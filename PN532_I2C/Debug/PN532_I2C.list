
PN532_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080073b8  080073b8  000083b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007624  08007624  00009068  2**0
                  CONTENTS
  4 .ARM          00000000  08007624  08007624  00009068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007624  08007624  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00008624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007628  08007628  00008628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800762c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000068  08007694  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08007694  000093f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc5a  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002235  00000000  00000000  00016ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00018f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a53  00000000  00000000  00019c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cc5  00000000  00000000  0001a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104d8  00000000  00000000  00033378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089429  00000000  00000000  00043850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccc79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f14  00000000  00000000  000cccbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d0bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080073a0 	.word	0x080073a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080073a0 	.word	0x080073a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 fa3f 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f873 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f945 	bl	80003e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8b5 	bl	80002cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000162:	f000 f8e1 	bl	8000328 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f915 	bl	8000394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   printf("Hello!\r\n");
 800016a:	482b      	ldr	r0, [pc, #172]	@ (8000218 <main+0xcc>)
 800016c:	f006 fa76 	bl	800665c <puts>

   PN532_SPI_Init(&pn532);
 8000170:	482a      	ldr	r0, [pc, #168]	@ (800021c <main+0xd0>)
 8000172:	f000 feb9 	bl	8000ee8 <PN532_SPI_Init>
   PN532_I2C_Init(&pn532);
 8000176:	4829      	ldr	r0, [pc, #164]	@ (800021c <main+0xd0>)
 8000178:	f000 ffbc 	bl	80010f4 <PN532_I2C_Init>
   PN532_GetFirmwareVersion(&pn532, buff);
 800017c:	4928      	ldr	r1, [pc, #160]	@ (8000220 <main+0xd4>)
 800017e:	4827      	ldr	r0, [pc, #156]	@ (800021c <main+0xd0>)
 8000180:	f000 fcc4 	bl	8000b0c <PN532_GetFirmwareVersion>
   if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8000184:	4926      	ldr	r1, [pc, #152]	@ (8000220 <main+0xd4>)
 8000186:	4825      	ldr	r0, [pc, #148]	@ (800021c <main+0xd0>)
 8000188:	f000 fcc0 	bl	8000b0c <PN532_GetFirmwareVersion>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	d10f      	bne.n	80001b2 <main+0x66>
     printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8000192:	4b23      	ldr	r3, [pc, #140]	@ (8000220 <main+0xd4>)
 8000194:	785b      	ldrb	r3, [r3, #1]
 8000196:	4619      	mov	r1, r3
 8000198:	4b21      	ldr	r3, [pc, #132]	@ (8000220 <main+0xd4>)
 800019a:	789b      	ldrb	r3, [r3, #2]
 800019c:	461a      	mov	r2, r3
 800019e:	4821      	ldr	r0, [pc, #132]	@ (8000224 <main+0xd8>)
 80001a0:	f006 f9ec 	bl	800657c <iprintf>
   } else {
     return -1;
   }
   PN532_SamConfiguration(&pn532);
 80001a4:	481d      	ldr	r0, [pc, #116]	@ (800021c <main+0xd0>)
 80001a6:	f000 fcd5 	bl	8000b54 <PN532_SamConfiguration>
   printf("Waiting for RFID/NFC card...\r\n");
 80001aa:	481f      	ldr	r0, [pc, #124]	@ (8000228 <main+0xdc>)
 80001ac:	f006 fa56 	bl	800665c <puts>
 80001b0:	e002      	b.n	80001b8 <main+0x6c>
     return -1;
 80001b2:	f04f 33ff 	mov.w	r3, #4294967295
 80001b6:	e02b      	b.n	8000210 <main+0xc4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Check if a card is available to read
	     uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001bc:	2200      	movs	r2, #0
 80001be:	491b      	ldr	r1, [pc, #108]	@ (800022c <main+0xe0>)
 80001c0:	4816      	ldr	r0, [pc, #88]	@ (800021c <main+0xd0>)
 80001c2:	f000 fce9 	bl	8000b98 <PN532_ReadPassiveTarget>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a19      	ldr	r2, [pc, #100]	@ (8000230 <main+0xe4>)
 80001ca:	6013      	str	r3, [r2, #0]
	     if (uid_len == PN532_STATUS_ERROR) {
 80001cc:	4b18      	ldr	r3, [pc, #96]	@ (8000230 <main+0xe4>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001d4:	d103      	bne.n	80001de <main+0x92>
	       printf(".");
 80001d6:	202e      	movs	r0, #46	@ 0x2e
 80001d8:	f006 f9e2 	bl	80065a0 <putchar>
 80001dc:	e7ec      	b.n	80001b8 <main+0x6c>
	     } else {
	       printf("Found card with UID: ");
 80001de:	4815      	ldr	r0, [pc, #84]	@ (8000234 <main+0xe8>)
 80001e0:	f006 f9cc 	bl	800657c <iprintf>
	       for (uint8_t i = 0; i < uid_len; i++) {
 80001e4:	2300      	movs	r3, #0
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e009      	b.n	80001fe <main+0xb2>
	         printf("%02x ", uid[i]);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4a0f      	ldr	r2, [pc, #60]	@ (800022c <main+0xe0>)
 80001ee:	5cd3      	ldrb	r3, [r2, r3]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4811      	ldr	r0, [pc, #68]	@ (8000238 <main+0xec>)
 80001f4:	f006 f9c2 	bl	800657c <iprintf>
	       for (uint8_t i = 0; i < uid_len; i++) {
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	3301      	adds	r3, #1
 80001fc:	71fb      	strb	r3, [r7, #7]
 80001fe:	79fa      	ldrb	r2, [r7, #7]
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <main+0xe4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	429a      	cmp	r2, r3
 8000206:	dbf0      	blt.n	80001ea <main+0x9e>
	       }
	       printf("\r\n");
 8000208:	480c      	ldr	r0, [pc, #48]	@ (800023c <main+0xf0>)
 800020a:	f006 fa27 	bl	800665c <puts>
	     uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800020e:	e7d3      	b.n	80001b8 <main+0x6c>
	     }

  }
  /* USER CODE END 3 */
}
 8000210:	4618      	mov	r0, r3
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	080073b8 	.word	0x080073b8
 800021c:	20000288 	.word	0x20000288
 8000220:	20000084 	.word	0x20000084
 8000224:	080073c0 	.word	0x080073c0
 8000228:	080073ec 	.word	0x080073ec
 800022c:	20000184 	.word	0x20000184
 8000230:	20000190 	.word	0x20000190
 8000234:	0800740c 	.word	0x0800740c
 8000238:	08007424 	.word	0x08007424
 800023c:	0800742c 	.word	0x0800742c

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	@ 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f006 fae4 	bl	800681c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000262:	2301      	movs	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000278:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f004 faad 	bl	80047e8 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f93c 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f004 fd1a 	bl	8004cec <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f927 	bl	8000510 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	@ 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <MX_I2C1_Init+0x50>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <MX_I2C1_Init+0x54>)
 80002d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d6:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_I2C1_Init+0x50>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <MX_I2C1_Init+0x58>)
 80002da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_I2C1_Init+0x50>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_I2C1_Init+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_I2C1_Init+0x50>)
 80002ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b0a      	ldr	r3, [pc, #40]	@ (800031c <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000308:	4804      	ldr	r0, [pc, #16]	@ (800031c <MX_I2C1_Init+0x50>)
 800030a:	f001 fd53 	bl	8001db4 <HAL_I2C_Init>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000314:	f000 f8fc 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000194 	.word	0x20000194
 8000320:	40005400 	.word	0x40005400
 8000324:	000186a0 	.word	0x000186a0

08000328 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800032c:	4b17      	ldr	r3, [pc, #92]	@ (800038c <MX_SPI1_Init+0x64>)
 800032e:	4a18      	ldr	r2, [pc, #96]	@ (8000390 <MX_SPI1_Init+0x68>)
 8000330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000332:	4b16      	ldr	r3, [pc, #88]	@ (800038c <MX_SPI1_Init+0x64>)
 8000334:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <MX_SPI1_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_SPI1_Init+0x64>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_SPI1_Init+0x64>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_SPI1_Init+0x64>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_SPI1_Init+0x64>)
 8000354:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800035a:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <MX_SPI1_Init+0x64>)
 800035c:	2230      	movs	r2, #48	@ 0x30
 800035e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <MX_SPI1_Init+0x64>)
 8000362:	2280      	movs	r2, #128	@ 0x80
 8000364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <MX_SPI1_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <MX_SPI1_Init+0x64>)
 800036e:	2200      	movs	r2, #0
 8000370:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_SPI1_Init+0x64>)
 8000374:	220a      	movs	r2, #10
 8000376:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000378:	4804      	ldr	r0, [pc, #16]	@ (800038c <MX_SPI1_Init+0x64>)
 800037a:	f004 fe45 	bl	8005008 <HAL_SPI_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000384:	f000 f8c4 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001e8 	.word	0x200001e8
 8000390:	40013000 	.word	0x40013000

08000394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 800039a:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <MX_USART1_UART_Init+0x50>)
 800039c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800039e:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003cc:	f005 f9ff 	bl	80057ce <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003d6:	f000 f89b 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000240 	.word	0x20000240
 80003e4:	40013800 	.word	0x40013800

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	4b37      	ldr	r3, [pc, #220]	@ (80004dc <MX_GPIO_Init+0xf4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a36      	ldr	r2, [pc, #216]	@ (80004dc <MX_GPIO_Init+0xf4>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b34      	ldr	r3, [pc, #208]	@ (80004dc <MX_GPIO_Init+0xf4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000414:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <MX_GPIO_Init+0xf4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a30      	ldr	r2, [pc, #192]	@ (80004dc <MX_GPIO_Init+0xf4>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b2e      	ldr	r3, [pc, #184]	@ (80004dc <MX_GPIO_Init+0xf4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b2b      	ldr	r3, [pc, #172]	@ (80004dc <MX_GPIO_Init+0xf4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a2a      	ldr	r2, [pc, #168]	@ (80004dc <MX_GPIO_Init+0xf4>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <MX_GPIO_Init+0xf4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b25      	ldr	r3, [pc, #148]	@ (80004dc <MX_GPIO_Init+0xf4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a24      	ldr	r2, [pc, #144]	@ (80004dc <MX_GPIO_Init+0xf4>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b22      	ldr	r3, [pc, #136]	@ (80004dc <MX_GPIO_Init+0xf4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	481f      	ldr	r0, [pc, #124]	@ (80004e0 <MX_GPIO_Init+0xf8>)
 8000464:	f001 fc8e 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2110      	movs	r1, #16
 800046c:	481d      	ldr	r0, [pc, #116]	@ (80004e4 <MX_GPIO_Init+0xfc>)
 800046e:	f001 fc89 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PN532_RST_Pin|PN532_REQ_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2103      	movs	r1, #3
 8000476:	481c      	ldr	r0, [pc, #112]	@ (80004e8 <MX_GPIO_Init+0x100>)
 8000478:	f001 fc84 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800047c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800048a:	2303      	movs	r3, #3
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4812      	ldr	r0, [pc, #72]	@ (80004e0 <MX_GPIO_Init+0xf8>)
 8000496:	f001 faf1 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 800049a:	2310      	movs	r3, #16
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a6:	2303      	movs	r3, #3
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <MX_GPIO_Init+0xfc>)
 80004b2:	f001 fae3 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_RST_Pin PN532_REQ_Pin */
  GPIO_InitStruct.Pin = PN532_RST_Pin|PN532_REQ_Pin;
 80004b6:	2303      	movs	r3, #3
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c2:	2303      	movs	r3, #3
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	@ (80004e8 <MX_GPIO_Init+0x100>)
 80004ce:	f001 fad5 	bl	8001a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d2:	bf00      	nop
 80004d4:	3720      	adds	r7, #32
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40011000 	.word	0x40011000
 80004e4:	40010800 	.word	0x40010800
 80004e8:	40010c00 	.word	0x40010c00

080004ec <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004f4:	1d39      	adds	r1, r7, #4
 80004f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004fa:	2201      	movs	r2, #1
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <__io_putchar+0x20>)
 80004fe:	f005 f9b6 	bl	800586e <HAL_UART_Transmit>

  return ch;
 8000502:	687b      	ldr	r3, [r7, #4]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000240 	.word	0x20000240

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <Error_Handler+0x8>

0800051c <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b0c8      	sub	sp, #288	@ 0x120
 8000520:	af00      	add	r7, sp, #0
 8000522:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000526:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800052a:	6018      	str	r0, [r3, #0]
 800052c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000530:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000534:	6019      	str	r1, [r3, #0]
 8000536:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800053a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800053e:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000540:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000544:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	2bff      	cmp	r3, #255	@ 0xff
 800054c:	d806      	bhi.n	800055c <PN532_WriteFrame+0x40>
 800054e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000552:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e0aa      	b.n	80006b8 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8000568:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800056c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000574:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800057c:	2200      	movs	r2, #0
 800057e:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000580:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000584:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000588:	22ff      	movs	r2, #255	@ 0xff
 800058a:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000592:	e010      	b.n	80005b6 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000594:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000598:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800059c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80005a0:	5cd2      	ldrb	r2, [r2, r3]
 80005a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80005a6:	4413      	add	r3, r2
 80005a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80005ac:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80005b0:	3301      	adds	r3, #1
 80005b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80005b6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d9ea      	bls.n	8000594 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80005be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005c2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005d2:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80005d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005d8:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	425b      	negs	r3, r3
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005ec:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80005f4:	e023      	b.n	800063e <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 80005f6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80005fa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80005fe:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	441a      	add	r2, r3
 8000606:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800060a:	3305      	adds	r3, #5
 800060c:	7811      	ldrb	r1, [r2, #0]
 800060e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000612:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000616:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000618:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800061c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000620:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	4413      	add	r3, r2
 8000628:	781a      	ldrb	r2, [r3, #0]
 800062a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800062e:	4413      	add	r3, r2
 8000630:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000634:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000638:	3301      	adds	r3, #1
 800063a:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800063e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000642:	b29b      	uxth	r3, r3
 8000644:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000648:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 800064c:	8812      	ldrh	r2, [r2, #0]
 800064e:	429a      	cmp	r2, r3
 8000650:	d8d1      	bhi.n	80005f6 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000652:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000656:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	3305      	adds	r3, #5
 800065e:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8000662:	43d2      	mvns	r2, r2
 8000664:	b2d1      	uxtb	r1, r2
 8000666:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800066a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800066e:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000670:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000674:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	3306      	adds	r3, #6
 800067c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000680:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000684:	2100      	movs	r1, #0
 8000686:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000688:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800068c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000698:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 800069c:	8812      	ldrh	r2, [r2, #0]
 800069e:	3207      	adds	r2, #7
 80006a0:	b291      	uxth	r1, r2
 80006a2:	f107 0214 	add.w	r2, r7, #20
 80006a6:	4610      	mov	r0, r2
 80006a8:	4798      	blx	r3
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	e000      	b.n	80006b8 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0c8      	sub	sp, #288	@ 0x120
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006d2:	6018      	str	r0, [r3, #0]
 80006d4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006e2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80006e6:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80006ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006fe:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000702:	8812      	ldrh	r2, [r2, #0]
 8000704:	3207      	adds	r2, #7
 8000706:	b291      	uxth	r1, r2
 8000708:	f107 0214 	add.w	r2, r7, #20
 800070c:	4610      	mov	r0, r2
 800070e:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000716:	e019      	b.n	800074c <PN532_ReadFrame+0x88>
        offset += 1;
 8000718:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800071c:	3301      	adds	r3, #1
 800071e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8000722:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000726:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	1dda      	adds	r2, r3, #7
 800072e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000732:	429a      	cmp	r2, r3
 8000734:	da0a      	bge.n	800074c <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000736:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800073a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	485b      	ldr	r0, [pc, #364]	@ (80008b0 <PN532_ReadFrame+0x1ec>)
 8000744:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	e0ab      	b.n	80008a4 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 800074c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000750:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000754:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000758:	5cd3      	ldrb	r3, [r2, r3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0dc      	beq.n	8000718 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 800075e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000762:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000766:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	2bff      	cmp	r3, #255	@ 0xff
 800076e:	d00a      	beq.n	8000786 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000770:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000774:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	484c      	ldr	r0, [pc, #304]	@ (80008b0 <PN532_ReadFrame+0x1ec>)
 800077e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	e08e      	b.n	80008a4 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000786:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800078a:	3301      	adds	r3, #1
 800078c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000790:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000794:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	1dda      	adds	r2, r3, #7
 800079c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007a0:	429a      	cmp	r2, r3
 80007a2:	da0a      	bge.n	80007ba <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 80007a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	4840      	ldr	r0, [pc, #256]	@ (80008b4 <PN532_ReadFrame+0x1f0>)
 80007b2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	e074      	b.n	80008a4 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80007ba:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007be:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007c2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80007cc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007d0:	3301      	adds	r3, #1
 80007d2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007d6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007da:	5cd2      	ldrb	r2, [r2, r3]
 80007dc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80007e0:	4413      	add	r3, r2
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00a      	beq.n	80007fe <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 80007e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	4830      	ldr	r0, [pc, #192]	@ (80008b8 <PN532_ReadFrame+0x1f4>)
 80007f6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	e052      	b.n	80008a4 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000804:	e014      	b.n	8000830 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000806:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800080a:	1c9a      	adds	r2, r3, #2
 800080c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000810:	4413      	add	r3, r2
 8000812:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000816:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800081a:	5cd2      	ldrb	r2, [r2, r3]
 800081c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000820:	4413      	add	r3, r2
 8000822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000826:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800082a:	3301      	adds	r3, #1
 800082c:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000830:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000834:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000838:	429a      	cmp	r2, r3
 800083a:	d2e4      	bcs.n	8000806 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 800083c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000840:	2b00      	cmp	r3, #0
 8000842:	d00a      	beq.n	800085a <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000844:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000848:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	481a      	ldr	r0, [pc, #104]	@ (80008bc <PN532_ReadFrame+0x1f8>)
 8000852:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	e024      	b.n	80008a4 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000860:	e018      	b.n	8000894 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000862:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000866:	1c9a      	adds	r2, r3, #2
 8000868:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800086c:	441a      	add	r2, r3
 800086e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000872:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000876:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 800087a:	6809      	ldr	r1, [r1, #0]
 800087c:	440b      	add	r3, r1
 800087e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000882:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000886:	5c8a      	ldrb	r2, [r1, r2]
 8000888:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 800088a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800088e:	3301      	adds	r3, #1
 8000890:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000894:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000898:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800089c:	429a      	cmp	r2, r3
 800089e:	d3e0      	bcc.n	8000862 <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 80008a0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	08007430 	.word	0x08007430
 80008b4:	08007464 	.word	0x08007464
 80008b8:	08007480 	.word	0x08007480
 80008bc:	080074b0 	.word	0x080074b0

080008c0 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b0c7      	sub	sp, #284	@ 0x11c
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80008ca:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 80008ce:	6020      	str	r0, [r4, #0]
 80008d0:	4608      	mov	r0, r1
 80008d2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80008d6:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80008da:	600a      	str	r2, [r1, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008e2:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80008e6:	4602      	mov	r2, r0
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008f2:	460a      	mov	r2, r1
 80008f4:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 80008f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80008fe:	22d4      	movs	r2, #212	@ 0xd4
 8000900:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000902:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800090a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800090e:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 8000912:	7812      	ldrb	r2, [r2, #0]
 8000914:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000916:	2300      	movs	r3, #0
 8000918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800091c:	e012      	b.n	8000944 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800091e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000922:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000926:	441a      	add	r2, r3
 8000928:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800092c:	3302      	adds	r3, #2
 800092e:	7811      	ldrb	r1, [r2, #0]
 8000930:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000934:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000938:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 800093a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800093e:	3301      	adds	r3, #1
 8000940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000948:	b29b      	uxth	r3, r3
 800094a:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 800094e:	429a      	cmp	r2, r3
 8000950:	d8e5      	bhi.n	800091e <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000952:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8000956:	3302      	adds	r3, #2
 8000958:	b29a      	uxth	r2, r3
 800095a:	f107 0110 	add.w	r1, r7, #16
 800095e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000962:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000966:	6818      	ldr	r0, [r3, #0]
 8000968:	f7ff fdd8 	bl	800051c <PN532_WriteFrame>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d011      	beq.n	8000996 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000972:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000976:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000980:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000984:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	485b      	ldr	r0, [pc, #364]	@ (8000afc <PN532_CallFunction+0x23c>)
 800098e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	e0ac      	b.n	8000af0 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000996:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800099a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80009a6:	4798      	blx	r3
 80009a8:	4603      	mov	r3, r0
 80009aa:	f083 0301 	eor.w	r3, r3, #1
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
 80009b8:	e09a      	b.n	8000af0 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 80009ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f107 0210 	add.w	r2, r7, #16
 80009ca:	2106      	movs	r1, #6
 80009cc:	4610      	mov	r0, r2
 80009ce:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80009d6:	e01c      	b.n	8000a12 <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 80009d8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80009dc:	4a48      	ldr	r2, [pc, #288]	@ (8000b00 <PN532_CallFunction+0x240>)
 80009de:	5cd2      	ldrb	r2, [r2, r3]
 80009e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80009e4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80009e8:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80009ec:	5ccb      	ldrb	r3, [r1, r3]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d00a      	beq.n	8000a08 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 80009f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	4841      	ldr	r0, [pc, #260]	@ (8000b04 <PN532_CallFunction+0x244>)
 8000a00:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e073      	b.n	8000af0 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a08:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000a12:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d9de      	bls.n	80009d8 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a1a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000a2a:	4798      	blx	r3
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	e058      	b.n	8000af0 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000a3e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f107 0110 	add.w	r1, r7, #16
 8000a50:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	f7ff fe33 	bl	80006c4 <PN532_ReadFrame>
 8000a5e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000a62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2bd5      	cmp	r3, #213	@ 0xd5
 8000a6e:	d10d      	bne.n	8000a8c <PN532_CallFunction+0x1cc>
 8000a70:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a80:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	3301      	adds	r3, #1
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d00a      	beq.n	8000aa2 <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000a8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	481b      	ldr	r0, [pc, #108]	@ (8000b08 <PN532_CallFunction+0x248>)
 8000a9a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	e026      	b.n	8000af0 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000aa8:	e015      	b.n	8000ad6 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000aaa:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000aae:	1c9a      	adds	r2, r3, #2
 8000ab0:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ab4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000ab8:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000abc:	6809      	ldr	r1, [r1, #0]
 8000abe:	440b      	add	r3, r1
 8000ac0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000ac4:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000ac8:	5c8a      	ldrb	r2, [r1, r2]
 8000aca:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000acc:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000ad6:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000ae0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000ae4:	8812      	ldrh	r2, [r2, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8df      	bhi.n	8000aaa <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000aea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000aee:	3b02      	subs	r3, #2
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	080074e4 	.word	0x080074e4
 8000b00:	080075bc 	.word	0x080075bc
 8000b04:	080074f8 	.word	0x080074f8
 8000b08:	08007524 	.word	0x08007524

08000b0c <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b16:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b1a:	9302      	str	r3, [sp, #8]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2300      	movs	r3, #0
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2304      	movs	r3, #4
 8000b26:	683a      	ldr	r2, [r7, #0]
 8000b28:	2102      	movs	r1, #2
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fec8 	bl	80008c0 <PN532_CallFunction>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b36:	d106      	bne.n	8000b46 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <PN532_GetFirmwareVersion+0x44>)
 8000b3e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	e000      	b.n	8000b48 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	0800754c 	.word	0x0800754c

08000b54 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af04      	add	r7, sp, #16
 8000b5a:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <PN532_SamConfiguration+0x40>)
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	4611      	mov	r1, r2
 8000b66:	8019      	strh	r1, [r3, #0]
 8000b68:	3302      	adds	r3, #2
 8000b6a:	0c12      	lsrs	r2, r2, #16
 8000b6c:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2303      	movs	r3, #3
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2200      	movs	r2, #0
 8000b82:	2114      	movs	r1, #20
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fe9b 	bl	80008c0 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	08007568 	.word	0x08007568

08000b98 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b090      	sub	sp, #64	@ 0x40
 8000b9c:	af04      	add	r7, sp, #16
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000bb4:	f107 0210 	add.w	r2, r7, #16
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2313      	movs	r3, #19
 8000bc8:	214a      	movs	r1, #74	@ 0x4a
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff fe78 	bl	80008c0 <PN532_CallFunction>
 8000bd0:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da02      	bge.n	8000bde <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	e02e      	b.n	8000c3c <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000bde:	7c3b      	ldrb	r3, [r7, #16]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d006      	beq.n	8000bf2 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <PN532_ReadPassiveTarget+0xac>)
 8000bea:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	e024      	b.n	8000c3c <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000bf2:	7d7b      	ldrb	r3, [r7, #21]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d906      	bls.n	8000c06 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <PN532_ReadPassiveTarget+0xb0>)
 8000bfe:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	e01a      	b.n	8000c3c <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c0c:	e010      	b.n	8000c30 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c12:	1d9a      	adds	r2, r3, #6
 8000c14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	440b      	add	r3, r1
 8000c1c:	3230      	adds	r2, #48	@ 0x30
 8000c1e:	443a      	add	r2, r7
 8000c20:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c24:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c30:	7d7b      	ldrb	r3, [r7, #21]
 8000c32:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d3e9      	bcc.n	8000c0e <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000c3a:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3730      	adds	r7, #48	@ 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800756c 	.word	0x0800756c
 8000c48:	0800758c 	.word	0x0800758c

08000c4c <PN532_Reset>:
extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <PN532_Reset+0x3c>)
 8000c56:	f001 f895 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f000 fd1c 	bl	8001698 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2101      	movs	r1, #1
 8000c64:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <PN532_Reset+0x3c>)
 8000c66:	f001 f88d 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c6e:	f000 fd13 	bl	8001698 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2101      	movs	r1, #1
 8000c76:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <PN532_Reset+0x3c>)
 8000c78:	f001 f884 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c7c:	2064      	movs	r0, #100	@ 0x64
 8000c7e:	f000 fd0b 	bl	8001698 <HAL_Delay>
    return PN532_STATUS_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <PN532_Log>:

void PN532_Log(const char* log) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <PN532_Log+0x18>)
 8000c98:	f005 fc70 	bl	800657c <iprintf>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	080075b4 	.word	0x080075b4

08000ca8 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <spi_rw+0x48>)
 8000cba:	f001 f863 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fcea 	bl	8001698 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	220a      	movs	r2, #10
 8000cca:	9200      	str	r2, [sp, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <spi_rw+0x4c>)
 8000cd2:	f004 fa1d 	bl	8005110 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 fcde 	bl	8001698 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2110      	movs	r1, #16
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <spi_rw+0x48>)
 8000ce2:	f001 f84f 	bl	8001d84 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	200001e8 	.word	0x200001e8

08000cf8 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	b087      	sub	sp, #28
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	807b      	strh	r3, [r7, #2]
 8000d06:	466b      	mov	r3, sp
 8000d08:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	1c59      	adds	r1, r3, #1
 8000d0e:	1e4b      	subs	r3, r1, #1
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	460a      	mov	r2, r1
 8000d14:	2300      	movs	r3, #0
 8000d16:	4690      	mov	r8, r2
 8000d18:	4699      	mov	r9, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d2e:	460a      	mov	r2, r1
 8000d30:	2300      	movs	r3, #0
 8000d32:	4614      	mov	r4, r2
 8000d34:	461d      	mov	r5, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	00eb      	lsls	r3, r5, #3
 8000d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d44:	00e2      	lsls	r2, r4, #3
 8000d46:	460b      	mov	r3, r1
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f000 fc9a 	bl	8001698 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000d64:	887b      	ldrh	r3, [r7, #2]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff ff9a 	bl	8000ca8 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	75fb      	strb	r3, [r7, #23]
 8000d78:	e00a      	b.n	8000d90 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	440b      	add	r3, r1
 8000d84:	68f9      	ldr	r1, [r7, #12]
 8000d86:	5c8a      	ldrb	r2, [r1, r2]
 8000d88:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	887a      	ldrh	r2, [r7, #2]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d8ef      	bhi.n	8000d7a <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	46b5      	mov	sp, r6
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000da8 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dac:	b087      	sub	sp, #28
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	807b      	strh	r3, [r7, #2]
 8000db6:	466b      	mov	r3, sp
 8000db8:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	1c59      	adds	r1, r3, #1
 8000dbe:	1e4b      	subs	r3, r1, #1
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4690      	mov	r8, r2
 8000dc8:	4699      	mov	r9, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dde:	460a      	mov	r2, r1
 8000de0:	2300      	movs	r3, #0
 8000de2:	4614      	mov	r4, r2
 8000de4:	461d      	mov	r5, r3
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	00eb      	lsls	r3, r5, #3
 8000df0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000df4:	00e2      	lsls	r2, r4, #3
 8000df6:	460b      	mov	r3, r1
 8000df8:	3307      	adds	r3, #7
 8000dfa:	08db      	lsrs	r3, r3, #3
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	ebad 0d03 	sub.w	sp, sp, r3
 8000e02:	466b      	mov	r3, sp
 8000e04:	3300      	adds	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	75fb      	strb	r3, [r7, #23]
 8000e12:	e00a      	b.n	8000e2a <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	441a      	add	r2, r3
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	7811      	ldrb	r1, [r2, #0]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	3301      	adds	r3, #1
 8000e28:	75fb      	strb	r3, [r7, #23]
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8ef      	bhi.n	8000e14 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f7ff ff32 	bl	8000ca8 <spi_rw>
    return PN532_STATUS_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	46b5      	mov	sp, r6
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e52 <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8000e5e:	f000 fc11 	bl	8001684 <HAL_GetTick>
 8000e62:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000e64:	e010      	b.n	8000e88 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8000e66:	200a      	movs	r0, #10
 8000e68:	f000 fc16 	bl	8001698 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff18 	bl	8000ca8 <spi_rw>
        if (status[1] == _SPI_READY) {
 8000e78:	7a7b      	ldrb	r3, [r7, #9]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d101      	bne.n	8000e82 <PN532_SPI_WaitReady+0x30>
            return true;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00b      	b.n	8000e9a <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8000e82:	2005      	movs	r0, #5
 8000e84:	f000 fc08 	bl	8001698 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000e88:	f000 fbfc 	bl	8001684 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8e6      	bhi.n	8000e66 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8000eaa:	2300      	movs	r3, #0
 8000eac:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8000eae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000eb2:	f000 fbf1 	bl	8001698 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2110      	movs	r1, #16
 8000eba:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <PN532_SPI_Wakeup+0x40>)
 8000ebc:	f000 ff62 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f000 fbe9 	bl	8001698 <HAL_Delay>
    spi_rw(data, 1);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2101      	movs	r1, #1
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff feec 	bl	8000ca8 <spi_rw>
    HAL_Delay(1000);
 8000ed0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed4:	f000 fbe0 	bl	8001698 <HAL_Delay>
    return PN532_STATUS_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010800 	.word	0x40010800

08000ee8 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <PN532_SPI_Init+0x3c>)
 8000ef4:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f28 <PN532_SPI_Init+0x40>)
 8000efa:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <PN532_SPI_Init+0x44>)
 8000f00:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <PN532_SPI_Init+0x48>)
 8000f06:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <PN532_SPI_Init+0x4c>)
 8000f0c:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a09      	ldr	r2, [pc, #36]	@ (8000f38 <PN532_SPI_Init+0x50>)
 8000f12:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	4798      	blx	r3
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	08000c4d 	.word	0x08000c4d
 8000f28:	08000cf9 	.word	0x08000cf9
 8000f2c:	08000da9 	.word	0x08000da9
 8000f30:	08000e53 	.word	0x08000e53
 8000f34:	08000ea5 	.word	0x08000ea5
 8000f38:	08000c8d 	.word	0x08000c8d

08000f3c <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	220a      	movs	r2, #10
 8000f4c:	9200      	str	r2, [sp, #0]
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	2148      	movs	r1, #72	@ 0x48
 8000f52:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <i2c_read+0x24>)
 8000f54:	f001 f984 	bl	8002260 <HAL_I2C_Master_Receive>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000194 	.word	0x20000194

08000f64 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	220a      	movs	r2, #10
 8000f74:	9200      	str	r2, [sp, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	2148      	movs	r1, #72	@ 0x48
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <i2c_write+0x24>)
 8000f7c:	f001 f872 	bl	8002064 <HAL_I2C_Master_Transmit>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000194 	.word	0x20000194

08000f8c <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8000f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f90:	b087      	sub	sp, #28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	807b      	strh	r3, [r7, #2]
 8000f9a:	466b      	mov	r3, sp
 8000f9c:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	1e4b      	subs	r3, r1, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	460a      	mov	r2, r1
 8000fac:	2300      	movs	r3, #0
 8000fae:	4690      	mov	r8, r2
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4614      	mov	r4, r2
 8000fcc:	461d      	mov	r5, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	00eb      	lsls	r3, r5, #3
 8000fd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fdc:	00e2      	lsls	r2, r4, #3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	3307      	adds	r3, #7
 8000fe2:	08db      	lsrs	r3, r3, #3
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	ebad 0d03 	sub.w	sp, sp, r3
 8000fea:	466b      	mov	r3, sp
 8000fec:	3300      	adds	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ffa0 	bl	8000f3c <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8000ffc:	7a3b      	ldrb	r3, [r7, #8]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d002      	beq.n	8001008 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e01a      	b.n	800103e <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8001008:	887b      	ldrh	r3, [r7, #2]
 800100a:	3301      	adds	r3, #1
 800100c:	b29b      	uxth	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f7ff ff93 	bl	8000f3c <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	75fb      	strb	r3, [r7, #23]
 800101a:	e00a      	b.n	8001032 <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	440b      	add	r3, r1
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	5c8a      	ldrb	r2, [r1, r2]
 800102a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	3301      	adds	r3, #1
 8001030:	75fb      	strb	r3, [r7, #23]
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	b29b      	uxth	r3, r3
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8ef      	bhi.n	800101c <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	46b5      	mov	sp, r6
}
 8001040:	4618      	mov	r0, r3
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800104a <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ff82 	bl	8000f64 <i2c_write>
    return PN532_STATUS_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8001072:	2300      	movs	r3, #0
 8001074:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8001076:	f000 fb05 	bl	8001684 <HAL_GetTick>
 800107a:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 800107c:	e00d      	b.n	800109a <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2101      	movs	r1, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff59 	bl	8000f3c <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 800108a:	7a3b      	ldrb	r3, [r7, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <PN532_I2C_WaitReady+0x2a>
            return true;
 8001090:	2301      	movs	r3, #1
 8001092:	e00b      	b.n	80010ac <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8001094:	2005      	movs	r0, #5
 8001096:	f000 faff 	bl	8001698 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 800109a:	f000 faf3 	bl	8001684 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d8e9      	bhi.n	800107e <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    // TODO
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2102      	movs	r1, #2
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <PN532_I2C_Wakeup+0x3c>)
 80010be:	f000 fe61 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	@ 0x64
 80010c4:	f000 fae8 	bl	8001698 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2102      	movs	r1, #2
 80010cc:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <PN532_I2C_Wakeup+0x3c>)
 80010ce:	f000 fe59 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f000 fae0 	bl	8001698 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2102      	movs	r1, #2
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <PN532_I2C_Wakeup+0x3c>)
 80010de:	f000 fe51 	bl	8001d84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80010e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010e6:	f000 fad7 	bl	8001698 <HAL_Delay>
    return PN532_STATUS_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010c00 	.word	0x40010c00

080010f4 <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <PN532_I2C_Init+0x3c>)
 8001100:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a0b      	ldr	r2, [pc, #44]	@ (8001134 <PN532_I2C_Init+0x40>)
 8001106:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <PN532_I2C_Init+0x44>)
 800110c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <PN532_I2C_Init+0x48>)
 8001112:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <PN532_I2C_Init+0x4c>)
 8001118:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <PN532_I2C_Init+0x50>)
 800111e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4798      	blx	r3
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08000c4d 	.word	0x08000c4d
 8001134:	08000f8d 	.word	0x08000f8d
 8001138:	0800104b 	.word	0x0800104b
 800113c:	0800106b 	.word	0x0800106b
 8001140:	080010b5 	.word	0x080010b5
 8001144:	08000c8d 	.word	0x08000c8d

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_I2C_MspInit+0x90>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d133      	bne.n	8001234 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_I2C_MspInit+0x94>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <HAL_I2C_MspInit+0x94>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <HAL_I2C_MspInit+0x94>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e4:	23c0      	movs	r3, #192	@ 0xc0
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <HAL_I2C_MspInit+0x98>)
 80011f8:	f000 fc40 	bl	8001a7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fc:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <HAL_I2C_MspInit+0x94>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <HAL_I2C_MspInit+0x94>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001206:	61d3      	str	r3, [r2, #28]
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <HAL_I2C_MspInit+0x94>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	201f      	movs	r0, #31
 800121a:	f000 fb38 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800121e:	201f      	movs	r0, #31
 8001220:	f000 fb51 	bl	80018c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2020      	movs	r0, #32
 800122a:	f000 fb30 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800122e:	2020      	movs	r0, #32
 8001230:	f000 fb49 	bl	80018c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40005400 	.word	0x40005400
 8001240:	40021000 	.word	0x40021000
 8001244:	40010c00 	.word	0x40010c00

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1f      	ldr	r2, [pc, #124]	@ (80012e0 <HAL_SPI_MspInit+0x98>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d137      	bne.n	80012d8 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001268:	4b1e      	ldr	r3, [pc, #120]	@ (80012e4 <HAL_SPI_MspInit+0x9c>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a1d      	ldr	r2, [pc, #116]	@ (80012e4 <HAL_SPI_MspInit+0x9c>)
 800126e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <HAL_SPI_MspInit+0x9c>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_SPI_MspInit+0x9c>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <HAL_SPI_MspInit+0x9c>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_SPI_MspInit+0x9c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001298:	23a0      	movs	r3, #160	@ 0xa0
 800129a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	@ (80012e8 <HAL_SPI_MspInit+0xa0>)
 80012ac:	f000 fbe6 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4809      	ldr	r0, [pc, #36]	@ (80012e8 <HAL_SPI_MspInit+0xa0>)
 80012c4:	f000 fbda 	bl	8001a7c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	2023      	movs	r0, #35	@ 0x23
 80012ce:	f000 fade 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012d2:	2023      	movs	r0, #35	@ 0x23
 80012d4:	f000 faf7 	bl	80018c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40013000 	.word	0x40013000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010800 	.word	0x40010800

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a20      	ldr	r2, [pc, #128]	@ (8001388 <HAL_UART_MspInit+0x9c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d139      	bne.n	8001380 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_UART_MspInit+0xa0>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_UART_MspInit+0xa0>)
 8001312:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <HAL_UART_MspInit+0xa0>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_UART_MspInit+0xa0>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a18      	ldr	r2, [pc, #96]	@ (800138c <HAL_UART_MspInit+0xa0>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b16      	ldr	r3, [pc, #88]	@ (800138c <HAL_UART_MspInit+0xa0>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001340:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	480f      	ldr	r0, [pc, #60]	@ (8001390 <HAL_UART_MspInit+0xa4>)
 8001352:	f000 fb93 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4619      	mov	r1, r3
 800136a:	4809      	ldr	r0, [pc, #36]	@ (8001390 <HAL_UART_MspInit+0xa4>)
 800136c:	f000 fb86 	bl	8001a7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2025      	movs	r0, #37	@ 0x25
 8001376:	f000 fa8a 	bl	800188e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800137a:	2025      	movs	r0, #37	@ 0x25
 800137c:	f000 faa3 	bl	80018c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40013800 	.word	0x40013800
 800138c:	40021000 	.word	0x40021000
 8001390:	40010800 	.word	0x40010800

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 f93c 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <I2C1_EV_IRQHandler+0x10>)
 80013f2:	f001 f9a1 	bl	8002738 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000194 	.word	0x20000194

08001400 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <I2C1_ER_IRQHandler+0x10>)
 8001406:	f001 faea 	bl	80029de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000194 	.word	0x20000194

08001414 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001418:	4802      	ldr	r0, [pc, #8]	@ (8001424 <SPI1_IRQHandler+0x10>)
 800141a:	f004 f823 	bl	8005464 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200001e8 	.word	0x200001e8

08001428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800142c:	4802      	ldr	r0, [pc, #8]	@ (8001438 <USART1_IRQHandler+0x10>)
 800142e:	f004 faa9 	bl	8005984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000240 	.word	0x20000240

0800143c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
  }

  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f82b 	bl	80004ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
  }
  return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d4:	605a      	str	r2, [r3, #4]
  return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	@ (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f005 f9ba 	bl	80068b8 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20005000 	.word	0x20005000
 8001570:	00000400 	.word	0x00000400
 8001574:	200002a0 	.word	0x200002a0
 8001578:	200003f8 	.word	0x200003f8

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001588:	f7ff fff8 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480b      	ldr	r0, [pc, #44]	@ (80015bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800158e:	490c      	ldr	r1, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001590:	4a0c      	ldr	r2, [pc, #48]	@ (80015c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a09      	ldr	r2, [pc, #36]	@ (80015c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015a4:	4c09      	ldr	r4, [pc, #36]	@ (80015cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f005 f987 	bl	80068c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7fe fdc9 	bl	800014c <main>
  bx lr
 80015ba:	4770      	bx	lr
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c4:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 80015c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015cc:	200003f4 	.word	0x200003f4

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <HAL_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	@ (80015fc <HAL_Init+0x28>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f947 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	200f      	movs	r0, #15
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fdaa 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f95f 	bl	80018e2 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f927 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	@ (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	@ (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HAL_IncTick+0x20>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000008 	.word	0x20000008
 8001680:	200002a4 	.word	0x200002a4

08001684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b02      	ldr	r3, [pc, #8]	@ (8001694 <HAL_GetTick+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	200002a4 	.word	0x200002a4

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fff0 	bl	8001684 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffe0 	bl	8001684 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4906      	ldr	r1, [pc, #24]	@ (8001778 <__NVIC_EnableIRQ+0x34>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	@ (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	@ (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	@ 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	@ (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff42 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d008      	beq.n	8001924 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e020      	b.n	8001966 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 020e 	bic.w	r2, r2, #14
 8001932:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d005      	beq.n	8001994 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2204      	movs	r2, #4
 800198c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e051      	b.n	8001a38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 020e 	bic.w	r2, r2, #14
 80019a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <HAL_DMA_Abort_IT+0xd4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d029      	beq.n	8001a12 <HAL_DMA_Abort_IT+0xa2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a21      	ldr	r2, [pc, #132]	@ (8001a48 <HAL_DMA_Abort_IT+0xd8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x9e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a4c <HAL_DMA_Abort_IT+0xdc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x98>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a50 <HAL_DMA_Abort_IT+0xe0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x92>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a54 <HAL_DMA_Abort_IT+0xe4>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_DMA_Abort_IT+0x8c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001a58 <HAL_DMA_Abort_IT+0xe8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_Abort_IT+0x86>
 80019f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 80019f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019fa:	e00b      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 80019fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a00:	e008      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a0c:	e002      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a0e:	2310      	movs	r3, #16
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_Abort_IT+0xa4>
 8001a12:	2301      	movs	r3, #1
 8001a14:	4a11      	ldr	r2, [pc, #68]	@ (8001a5c <HAL_DMA_Abort_IT+0xec>)
 8001a16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
    } 
  }
  return status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40020008 	.word	0x40020008
 8001a48:	4002001c 	.word	0x4002001c
 8001a4c:	40020030 	.word	0x40020030
 8001a50:	40020044 	.word	0x40020044
 8001a54:	40020058 	.word	0x40020058
 8001a58:	4002006c 	.word	0x4002006c
 8001a5c:	40020000 	.word	0x40020000

08001a60 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a6e:	b2db      	uxtb	r3, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	@ 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e169      	b.n	8001d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8158 	bne.w	8001d5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a9a      	ldr	r2, [pc, #616]	@ (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d05e      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a98      	ldr	r2, [pc, #608]	@ (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d875      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001abe:	4a98      	ldr	r2, [pc, #608]	@ (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d058      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a96      	ldr	r2, [pc, #600]	@ (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d86f      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aca:	4a96      	ldr	r2, [pc, #600]	@ (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d052      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a94      	ldr	r2, [pc, #592]	@ (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d869      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ad6:	4a94      	ldr	r2, [pc, #592]	@ (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04c      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001adc:	4a92      	ldr	r2, [pc, #584]	@ (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d863      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ae2:	4a92      	ldr	r2, [pc, #584]	@ (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d046      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a90      	ldr	r2, [pc, #576]	@ (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d85d      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d82a      	bhi.n	8001b48 <HAL_GPIO_Init+0xcc>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d859      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001af6:	a201      	add	r2, pc, #4	@ (adr r2, 8001afc <HAL_GPIO_Init+0x80>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b51 	.word	0x08001b51
 8001b04:	08001b63 	.word	0x08001b63
 8001b08:	08001ba5 	.word	0x08001ba5
 8001b0c:	08001bab 	.word	0x08001bab
 8001b10:	08001bab 	.word	0x08001bab
 8001b14:	08001bab 	.word	0x08001bab
 8001b18:	08001bab 	.word	0x08001bab
 8001b1c:	08001bab 	.word	0x08001bab
 8001b20:	08001bab 	.word	0x08001bab
 8001b24:	08001bab 	.word	0x08001bab
 8001b28:	08001bab 	.word	0x08001bab
 8001b2c:	08001bab 	.word	0x08001bab
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001bab 	.word	0x08001bab
 8001b38:	08001bab 	.word	0x08001bab
 8001b3c:	08001bab 	.word	0x08001bab
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b6d 	.word	0x08001b6d
 8001b48:	4a79      	ldr	r2, [pc, #484]	@ (8001d30 <HAL_GPIO_Init+0x2b4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4e:	e02c      	b.n	8001baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e029      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e024      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	3308      	adds	r3, #8
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e01f      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	330c      	adds	r3, #12
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e01a      	b.n	8001bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e013      	b.n	8001bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	611a      	str	r2, [r3, #16]
          break;
 8001b96:	e009      	b.n	8001bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	615a      	str	r2, [r3, #20]
          break;
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x130>
          break;
 8001baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	@ 0xff
 8001bb0:	d801      	bhi.n	8001bb6 <HAL_GPIO_Init+0x13a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_Init+0x13e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	@ 0xff
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_GPIO_Init+0x14c>
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x152>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	3b08      	subs	r3, #8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80b1 	beq.w	8001d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	@ (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b4a      	ldr	r3, [pc, #296]	@ (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c14:	4a48      	ldr	r2, [pc, #288]	@ (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	@ (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1e8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1e4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3d      	ldr	r2, [pc, #244]	@ (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1e0>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7a:	492f      	ldr	r1, [pc, #188]	@ (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c94:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	492c      	ldr	r1, [pc, #176]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4928      	ldr	r1, [pc, #160]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cbc:	4b23      	ldr	r3, [pc, #140]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4922      	ldr	r1, [pc, #136]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	491e      	ldr	r1, [pc, #120]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4918      	ldr	r1, [pc, #96]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4914      	ldr	r1, [pc, #80]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d021      	beq.n	8001d50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	490e      	ldr	r1, [pc, #56]	@ (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e021      	b.n	8001d5e <HAL_GPIO_Init+0x2e2>
 8001d1a:	bf00      	nop
 8001d1c:	10320000 	.word	0x10320000
 8001d20:	10310000 	.word	0x10310000
 8001d24:	10220000 	.word	0x10220000
 8001d28:	10210000 	.word	0x10210000
 8001d2c:	10120000 	.word	0x10120000
 8001d30:	10110000 	.word	0x10110000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40011400 	.word	0x40011400
 8001d4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4909      	ldr	r1, [pc, #36]	@ (8001d80 <HAL_GPIO_Init+0x304>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae8e 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	372c      	adds	r7, #44	@ 0x2c
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	40010400 	.word	0x40010400

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001da0:	e003      	b.n	8001daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001da2:	887b      	ldrh	r3, [r7, #2]
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e12b      	b.n	800201e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff f9e6 	bl	80011ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e18:	f003 f8b0 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a81      	ldr	r2, [pc, #516]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d807      	bhi.n	8001e38 <HAL_I2C_Init+0x84>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a80      	ldr	r2, [pc, #512]	@ (800202c <HAL_I2C_Init+0x278>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e006      	b.n	8001e46 <HAL_I2C_Init+0x92>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002030 <HAL_I2C_Init+0x27c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e7      	b.n	800201e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a78      	ldr	r2, [pc, #480]	@ (8002034 <HAL_I2C_Init+0x280>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d802      	bhi.n	8001e88 <HAL_I2C_Init+0xd4>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3301      	adds	r3, #1
 8001e86:	e009      	b.n	8001e9c <HAL_I2C_Init+0xe8>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_I2C_Init+0x284>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	495c      	ldr	r1, [pc, #368]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d819      	bhi.n	8001ef0 <HAL_I2C_Init+0x13c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e59      	subs	r1, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_I2C_Init+0x138>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e59      	subs	r1, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	e051      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e04f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_I2C_Init+0x168>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e012      	b.n	8001f42 <HAL_I2C_Init+0x18e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x196>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e022      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <HAL_I2C_Init+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e58      	subs	r0, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	440b      	add	r3, r1
 8001f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6809      	ldr	r1, [r1, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6911      	ldr	r1, [r2, #16]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	000186a0 	.word	0x000186a0
 800202c:	001e847f 	.word	0x001e847f
 8002030:	003d08ff 	.word	0x003d08ff
 8002034:	431bde83 	.word	0x431bde83
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b80      	cmp	r3, #128	@ 0x80
 8002050:	d103      	bne.n	800205a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	817b      	strh	r3, [r7, #10]
 8002074:	4613      	mov	r3, r2
 8002076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fb04 	bl	8001684 <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	f040 80e0 	bne.w	800224c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2319      	movs	r3, #25
 8002092:	2201      	movs	r2, #1
 8002094:	4970      	ldr	r1, [pc, #448]	@ (8002258 <HAL_I2C_Master_Transmit+0x1f4>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f002 f924 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0d3      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x50>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e0cc      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d007      	beq.n	80020da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2221      	movs	r2, #33	@ 0x21
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2210      	movs	r2, #16
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a50      	ldr	r2, [pc, #320]	@ (800225c <HAL_I2C_Master_Transmit+0x1f8>)
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800211c:	8979      	ldrh	r1, [r7, #10]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f001 fee6 	bl	8003ef4 <I2C_MasterRequestWrite>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08d      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002148:	e066      	b.n	8002218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f002 f9e2 	bl	8004518 <I2C_WaitOnTXEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	2b04      	cmp	r3, #4
 8002160:	d107      	bne.n	8002172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x188>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d017      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	6a39      	ldr	r1, [r7, #32]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f002 f9d9 	bl	80045a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	2b04      	cmp	r3, #4
 8002202:	d107      	bne.n	8002214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e01a      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d194      	bne.n	800214a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	00100002 	.word	0x00100002
 800225c:	ffff0000 	.word	0xffff0000

08002260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	@ 0x30
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	460b      	mov	r3, r1
 800226e:	817b      	strh	r3, [r7, #10]
 8002270:	4613      	mov	r3, r2
 8002272:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff fa04 	bl	8001684 <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 824b 	bne.w	8002722 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	497f      	ldr	r1, [pc, #508]	@ (8002494 <HAL_I2C_Master_Receive+0x234>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f002 f824 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e23e      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2C_Master_Receive+0x54>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e237      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d007      	beq.n	80022da <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2222      	movs	r2, #34	@ 0x22
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2210      	movs	r2, #16
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	893a      	ldrh	r2, [r7, #8]
 800230a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a5f      	ldr	r2, [pc, #380]	@ (8002498 <HAL_I2C_Master_Receive+0x238>)
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800231c:	8979      	ldrh	r1, [r7, #10]
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f001 fe68 	bl	8003ff8 <I2C_MasterRequestRead>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1f8      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	2b00      	cmp	r3, #0
 8002338:	d113      	bne.n	8002362 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e1cc      	b.n	80026fc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002366:	2b01      	cmp	r3, #1
 8002368:	d11e      	bne.n	80023a8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002378:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800237a:	b672      	cpsid	i
}
 800237c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023a4:	b662      	cpsie	i
}
 80023a6:	e035      	b.n	8002414 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d11e      	bne.n	80023ee <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023c0:	b672      	cpsid	i
}
 80023c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023ea:	b662      	cpsie	i
}
 80023ec:	e012      	b.n	8002414 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002414:	e172      	b.n	80026fc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	2b03      	cmp	r3, #3
 800241c:	f200 811f 	bhi.w	800265e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002424:	2b01      	cmp	r3, #1
 8002426:	d123      	bne.n	8002470 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f002 f935 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e173      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800246e:	e145      	b.n	80026fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	2b02      	cmp	r3, #2
 8002476:	d152      	bne.n	800251e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	2200      	movs	r2, #0
 8002480:	4906      	ldr	r1, [pc, #24]	@ (800249c <HAL_I2C_Master_Receive+0x23c>)
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f001 ff2e 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e148      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
 8002492:	bf00      	nop
 8002494:	00100002 	.word	0x00100002
 8002498:	ffff0000 	.word	0xffff0000
 800249c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024a0:	b672      	cpsid	i
}
 80024a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024e6:	b662      	cpsie	i
}
 80024e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800251c:	e0ee      	b.n	80026fc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002524:	2200      	movs	r2, #0
 8002526:	4981      	ldr	r1, [pc, #516]	@ (800272c <HAL_I2C_Master_Receive+0x4cc>)
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f001 fedb 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0f5      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800257e:	4b6c      	ldr	r3, [pc, #432]	@ (8002730 <HAL_I2C_Master_Receive+0x4d0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	4a6b      	ldr	r2, [pc, #428]	@ (8002734 <HAL_I2C_Master_Receive+0x4d4>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a1a      	lsrs	r2, r3, #8
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00da      	lsls	r2, r3, #3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	3b01      	subs	r3, #1
 800259c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d118      	bne.n	80025d6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80025c6:	b662      	cpsie	i
}
 80025c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0a6      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d1d9      	bne.n	8002598 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002626:	b662      	cpsie	i
}
 8002628:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800265c:	e04e      	b.n	80026fc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002660:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f002 f81a 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e058      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d124      	bne.n	80026fc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d107      	bne.n	80026ca <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	f47f ae88 	bne.w	8002416 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	3728      	adds	r7, #40	@ 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	00010004 	.word	0x00010004
 8002730:	20000000 	.word	0x20000000
 8002734:	14f8b589 	.word	0x14f8b589

08002738 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002758:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002760:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b10      	cmp	r3, #16
 8002766:	d003      	beq.n	8002770 <HAL_I2C_EV_IRQHandler+0x38>
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	f040 80b1 	bne.w	80028d2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002790:	d003      	beq.n	800279a <HAL_I2C_EV_IRQHandler+0x62>
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002798:	d101      	bne.n	800279e <HAL_I2C_EV_IRQHandler+0x66>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_I2C_EV_IRQHandler+0x68>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	f000 8114 	beq.w	80029ce <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_I2C_EV_IRQHandler+0x90>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f001 fff9 	bl	80047b2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fd74 	bl	80032ae <I2C_Master_SB>
 80027c6:	e083      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_I2C_EV_IRQHandler+0xac>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fdeb 	bl	80033b8 <I2C_Master_ADD10>
 80027e2:	e075      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_I2C_EV_IRQHandler+0xc8>
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 fe06 	bl	800340a <I2C_Master_ADDR>
 80027fe:	e067      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002818:	f000 80db 	beq.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <HAL_I2C_EV_IRQHandler+0x10a>
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_I2C_EV_IRQHandler+0x10a>
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f9d4 	bl	8002be8 <I2C_MasterTransmit_TXE>
 8002840:	e046      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80c2 	beq.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80bc 	beq.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800285a:	7bbb      	ldrb	r3, [r7, #14]
 800285c:	2b21      	cmp	r3, #33	@ 0x21
 800285e:	d103      	bne.n	8002868 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fa5d 	bl	8002d20 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002866:	e0b4      	b.n	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b40      	cmp	r3, #64	@ 0x40
 800286c:	f040 80b1 	bne.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 facb 	bl	8002e0c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002876:	e0ac      	b.n	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002886:	f000 80a4 	beq.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00d      	beq.n	80028b0 <HAL_I2C_EV_IRQHandler+0x178>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_I2C_EV_IRQHandler+0x178>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb47 	bl	8002f3c <I2C_MasterReceive_RXNE>
 80028ae:	e00f      	b.n	80028d0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 808b 	beq.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8085 	beq.w	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fbff 	bl	80030cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ce:	e080      	b.n	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80028d0:	e07f      	b.n	80029d2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e007      	b.n	80028f4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <HAL_I2C_EV_IRQHandler+0x1ea>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 ffcc 	bl	80038b8 <I2C_Slave_ADDR>
 8002920:	e05a      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_I2C_EV_IRQHandler+0x206>
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f001 f806 	bl	8003948 <I2C_Slave_STOPF>
 800293c:	e04c      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	2b21      	cmp	r3, #33	@ 0x21
 8002942:	d002      	beq.n	800294a <HAL_I2C_EV_IRQHandler+0x212>
 8002944:	7bbb      	ldrb	r3, [r7, #14]
 8002946:	2b29      	cmp	r3, #41	@ 0x29
 8002948:	d120      	bne.n	800298c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <HAL_I2C_EV_IRQHandler+0x238>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d008      	beq.n	8002970 <HAL_I2C_EV_IRQHandler+0x238>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fee9 	bl	8003740 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800296e:	e032      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02d      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x29e>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 ff18 	bl	80037ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800298a:	e024      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x27a>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_I2C_EV_IRQHandler+0x27a>
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d103      	bne.n	80029b2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 ff25 	bl	80037fa <I2C_SlaveReceive_RXNE>
 80029b0:	e012      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 ff55 	bl	8003876 <I2C_SlaveReceive_BTF>
 80029cc:	e004      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80029ce:	bf00      	nop
 80029d0:	e002      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d2:	bf00      	nop
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b08a      	sub	sp, #40	@ 0x28
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_I2C_ER_IRQHandler+0x5a>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a26:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_I2C_ER_IRQHandler+0x80>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002a5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03e      	beq.n	8002ae6 <HAL_I2C_ER_IRQHandler+0x108>
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d039      	beq.n	8002ae6 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002a72:	7efb      	ldrb	r3, [r7, #27]
 8002a74:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a8c:	7ebb      	ldrb	r3, [r7, #26]
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d112      	bne.n	8002ab8 <HAL_I2C_ER_IRQHandler+0xda>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <HAL_I2C_ER_IRQHandler+0xda>
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	2b21      	cmp	r3, #33	@ 0x21
 8002a9c:	d008      	beq.n	8002ab0 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002a9e:	7cfb      	ldrb	r3, [r7, #19]
 8002aa0:	2b29      	cmp	r3, #41	@ 0x29
 8002aa2:	d005      	beq.n	8002ab0 <HAL_I2C_ER_IRQHandler+0xd2>
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b28      	cmp	r3, #40	@ 0x28
 8002aa8:	d106      	bne.n	8002ab8 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b21      	cmp	r3, #33	@ 0x21
 8002aae:	d103      	bne.n	8002ab8 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 f879 	bl	8003ba8 <I2C_Slave_AF>
 8002ab6:	e016      	b.n	8002ae6 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ac0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aca:	7efb      	ldrb	r3, [r7, #27]
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d002      	beq.n	8002ad6 <HAL_I2C_ER_IRQHandler+0xf8>
 8002ad0:	7efb      	ldrb	r3, [r7, #27]
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d107      	bne.n	8002ae6 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <HAL_I2C_ER_IRQHandler+0x12e>
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	f043 0308 	orr.w	r3, r3, #8
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002b0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f001 f8b6 	bl	8003c90 <I2C_ITError>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3728      	adds	r7, #40	@ 0x28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
 8002b80:	4613      	mov	r3, r2
 8002b82:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c04:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d150      	bne.n	8002cb0 <I2C_MasterTransmit_TXE+0xc8>
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b21      	cmp	r3, #33	@ 0x21
 8002c12:	d14d      	bne.n	8002cb0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d01d      	beq.n	8002c56 <I2C_MasterTransmit_TXE+0x6e>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d01a      	beq.n	8002c56 <I2C_MasterTransmit_TXE+0x6e>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c26:	d016      	beq.n	8002c56 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c36:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2211      	movs	r2, #17
 8002c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ff6c 	bl	8002b2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c54:	e060      	b.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c64:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c74:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d107      	bne.n	8002ca0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff81 	bl	8002ba0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c9e:	e03b      	b.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff3f 	bl	8002b2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cae:	e033      	b.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b21      	cmp	r3, #33	@ 0x21
 8002cb4:	d005      	beq.n	8002cc2 <I2C_MasterTransmit_TXE+0xda>
 8002cb6:	7bbb      	ldrb	r3, [r7, #14]
 8002cb8:	2b40      	cmp	r3, #64	@ 0x40
 8002cba:	d12d      	bne.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b22      	cmp	r3, #34	@ 0x22
 8002cc0:	d12a      	bne.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d108      	bne.n	8002cde <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cda:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002cdc:	e01c      	b.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b40      	cmp	r3, #64	@ 0x40
 8002ce8:	d103      	bne.n	8002cf2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f88e 	bl	8002e0c <I2C_MemoryTransmit_TXE_BTF>
}
 8002cf0:	e012      	b.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	781a      	ldrb	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d16:	e7ff      	b.n	8002d18 <I2C_MasterTransmit_TXE+0x130>
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b21      	cmp	r3, #33	@ 0x21
 8002d38:	d164      	bne.n	8002e04 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d68:	e04c      	b.n	8002e04 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d01d      	beq.n	8002dac <I2C_MasterTransmit_BTF+0x8c>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d01a      	beq.n	8002dac <I2C_MasterTransmit_BTF+0x8c>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d7c:	d016      	beq.n	8002dac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d8c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2211      	movs	r2, #17
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff fec1 	bl	8002b2c <HAL_I2C_MasterTxCpltCallback>
}
 8002daa:	e02b      	b.n	8002e04 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b40      	cmp	r3, #64	@ 0x40
 8002de4:	d107      	bne.n	8002df6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fed6 	bl	8002ba0 <HAL_I2C_MemTxCpltCallback>
}
 8002df4:	e006      	b.n	8002e04 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fe94 	bl	8002b2c <HAL_I2C_MasterTxCpltCallback>
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11d      	bne.n	8002e60 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10b      	bne.n	8002e44 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002e42:	e077      	b.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	121b      	asrs	r3, r3, #8
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e5e:	e069      	b.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10b      	bne.n	8002e80 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e7e:	e059      	b.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d152      	bne.n	8002f2e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b22      	cmp	r3, #34	@ 0x22
 8002e8c:	d10d      	bne.n	8002eaa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e9c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ea8:	e044      	b.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b21      	cmp	r3, #33	@ 0x21
 8002eb8:	d112      	bne.n	8002ee0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ede:	e029      	b.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d124      	bne.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b21      	cmp	r3, #33	@ 0x21
 8002eee:	d121      	bne.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002efe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fe3a 	bl	8002ba0 <HAL_I2C_MemTxCpltCallback>
}
 8002f2c:	e002      	b.n	8002f34 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff f884 	bl	800203c <I2C_Flush_DR>
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b22      	cmp	r3, #34	@ 0x22
 8002f4e:	f040 80b9 	bne.w	80030c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d921      	bls.n	8002faa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f040 8096 	bne.w	80030c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002fa8:	e08c      	b.n	80030c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d07f      	beq.n	80030b2 <I2C_MasterReceive_RXNE+0x176>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d002      	beq.n	8002fbe <I2C_MasterReceive_RXNE+0x82>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d179      	bne.n	80030b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 fb3a 	bl	8004638 <I2C_WaitOnSTOPRequestThroughIT>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d14c      	bne.n	8003064 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fe8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b40      	cmp	r3, #64	@ 0x40
 8003022:	d10a      	bne.n	800303a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fdbd 	bl	8002bb2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003038:	e044      	b.n	80030c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d002      	beq.n	800304e <I2C_MasterReceive_RXNE+0x112>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b20      	cmp	r3, #32
 800304c:	d103      	bne.n	8003056 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
 8003054:	e002      	b.n	800305c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2212      	movs	r2, #18
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fd6e 	bl	8002b3e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003062:	e02f      	b.n	80030c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003072:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff fd8a 	bl	8002bc4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030b0:	e008      	b.n	80030c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c0:	605a      	str	r2, [r3, #4]
}
 80030c2:	e7ff      	b.n	80030c4 <I2C_MasterReceive_RXNE+0x188>
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d11b      	bne.n	800311c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800311a:	e0c4      	b.n	80032a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b03      	cmp	r3, #3
 8003124:	d129      	bne.n	800317a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003134:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b04      	cmp	r3, #4
 800313a:	d00a      	beq.n	8003152 <I2C_MasterReceive_BTF+0x86>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d007      	beq.n	8003152 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003150:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003178:	e095      	b.n	80032a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d17d      	bne.n	8003280 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d002      	beq.n	8003190 <I2C_MasterReceive_BTF+0xc4>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d108      	bne.n	80031a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e016      	b.n	80031d0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d002      	beq.n	80031ae <I2C_MasterReceive_BTF+0xe2>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e007      	b.n	80031d0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800322a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	d10a      	bne.n	8003256 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fcaf 	bl	8002bb2 <HAL_I2C_MemRxCpltCallback>
}
 8003254:	e027      	b.n	80032a6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d002      	beq.n	800326a <I2C_MasterReceive_BTF+0x19e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b20      	cmp	r3, #32
 8003268:	d103      	bne.n	8003272 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003270:	e002      	b.n	8003278 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2212      	movs	r2, #18
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fc60 	bl	8002b3e <HAL_I2C_MasterRxCpltCallback>
}
 800327e:	e012      	b.n	80032a6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b40      	cmp	r3, #64	@ 0x40
 80032c0:	d117      	bne.n	80032f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80032dc:	e067      	b.n	80033ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]
}
 80032f0:	e05d      	b.n	80033ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fa:	d133      	bne.n	8003364 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b21      	cmp	r3, #33	@ 0x21
 8003306:	d109      	bne.n	800331c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003318:	611a      	str	r2, [r3, #16]
 800331a:	e008      	b.n	800332e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <I2C_Master_SB+0x92>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	d032      	beq.n	80033ae <I2C_Master_SB+0x100>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d02d      	beq.n	80033ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003360:	605a      	str	r2, [r3, #4]
}
 8003362:	e024      	b.n	80033ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10e      	bne.n	800338a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003370:	b29b      	uxth	r3, r3
 8003372:	11db      	asrs	r3, r3, #7
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 0306 	and.w	r3, r3, #6
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f063 030f 	orn	r3, r3, #15
 8003380:	b2da      	uxtb	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]
}
 8003388:	e011      	b.n	80033ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	b29b      	uxth	r3, r3
 8003398:	11db      	asrs	r3, r3, #7
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 0306 	and.w	r3, r3, #6
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f063 030e 	orn	r3, r3, #14
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <I2C_Master_ADD10+0x26>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d108      	bne.n	80033f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <I2C_Master_ADD10+0x48>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fe:	605a      	str	r2, [r3, #4]
  }
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b091      	sub	sp, #68	@ 0x44
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003418:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b22      	cmp	r3, #34	@ 0x22
 8003432:	f040 8174 	bne.w	800371e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <I2C_Master_ADDR+0x54>
 800343e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003442:	2b40      	cmp	r3, #64	@ 0x40
 8003444:	d10b      	bne.n	800345e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003446:	2300      	movs	r3, #0
 8003448:	633b      	str	r3, [r7, #48]	@ 0x30
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	633b      	str	r3, [r7, #48]	@ 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	e16b      	b.n	8003736 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11d      	bne.n	80034a2 <I2C_Master_ADDR+0x98>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800346e:	d118      	bne.n	80034a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003470:	2300      	movs	r3, #0
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003494:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	651a      	str	r2, [r3, #80]	@ 0x50
 80034a0:	e149      	b.n	8003736 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d113      	bne.n	80034d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e120      	b.n	8003716 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	f040 808a 	bne.w	80035f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80034e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034e6:	d137      	bne.n	8003558 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003506:	d113      	bne.n	8003530 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003516:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	e0f2      	b.n	8003716 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e0de      	b.n	8003716 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355a:	2b08      	cmp	r3, #8
 800355c:	d02e      	beq.n	80035bc <I2C_Master_ADDR+0x1b2>
 800355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003560:	2b20      	cmp	r3, #32
 8003562:	d02b      	beq.n	80035bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003566:	2b12      	cmp	r3, #18
 8003568:	d102      	bne.n	8003570 <I2C_Master_ADDR+0x166>
 800356a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356c:	2b01      	cmp	r3, #1
 800356e:	d125      	bne.n	80035bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	2b04      	cmp	r3, #4
 8003574:	d00e      	beq.n	8003594 <I2C_Master_ADDR+0x18a>
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	2b02      	cmp	r3, #2
 800357a:	d00b      	beq.n	8003594 <I2C_Master_ADDR+0x18a>
 800357c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357e:	2b10      	cmp	r3, #16
 8003580:	d008      	beq.n	8003594 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e007      	b.n	80035a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	e0ac      	b.n	8003716 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e090      	b.n	8003716 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d158      	bne.n	80036b0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003600:	2b04      	cmp	r3, #4
 8003602:	d021      	beq.n	8003648 <I2C_Master_ADDR+0x23e>
 8003604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003606:	2b02      	cmp	r3, #2
 8003608:	d01e      	beq.n	8003648 <I2C_Master_ADDR+0x23e>
 800360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360c:	2b10      	cmp	r3, #16
 800360e:	d01b      	beq.n	8003648 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e012      	b.n	800366e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003656:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800367c:	d14b      	bne.n	8003716 <I2C_Master_ADDR+0x30c>
 800367e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003680:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003684:	d00b      	beq.n	800369e <I2C_Master_ADDR+0x294>
 8003686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003688:	2b01      	cmp	r3, #1
 800368a:	d008      	beq.n	800369e <I2C_Master_ADDR+0x294>
 800368c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368e:	2b08      	cmp	r3, #8
 8003690:	d005      	beq.n	800369e <I2C_Master_ADDR+0x294>
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	2b10      	cmp	r3, #16
 8003696:	d002      	beq.n	800369e <I2C_Master_ADDR+0x294>
 8003698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369a:	2b20      	cmp	r3, #32
 800369c:	d13b      	bne.n	8003716 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	e032      	b.n	8003716 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036be:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ce:	d117      	bne.n	8003700 <I2C_Master_ADDR+0x2f6>
 80036d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036d6:	d00b      	beq.n	80036f0 <I2C_Master_ADDR+0x2e6>
 80036d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d008      	beq.n	80036f0 <I2C_Master_ADDR+0x2e6>
 80036de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d005      	beq.n	80036f0 <I2C_Master_ADDR+0x2e6>
 80036e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d002      	beq.n	80036f0 <I2C_Master_ADDR+0x2e6>
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d107      	bne.n	8003700 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800371c:	e00b      	b.n	8003736 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
}
 8003734:	e7ff      	b.n	8003736 <I2C_Master_ADDR+0x32c>
 8003736:	bf00      	nop
 8003738:	3744      	adds	r7, #68	@ 0x44
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800374e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02b      	beq.n	80037b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d114      	bne.n	80037b2 <I2C_SlaveTransmit_TXE+0x72>
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b29      	cmp	r3, #41	@ 0x29
 800378c:	d111      	bne.n	80037b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2221      	movs	r2, #33	@ 0x21
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2228      	movs	r2, #40	@ 0x28
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff f9cf 	bl	8002b50 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d011      	beq.n	80037f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003808:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02c      	beq.n	800386e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d114      	bne.n	800386e <I2C_SlaveReceive_RXNE+0x74>
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b2a      	cmp	r3, #42	@ 0x2a
 8003848:	d111      	bne.n	800386e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003858:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2222      	movs	r2, #34	@ 0x22
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2228      	movs	r2, #40	@ 0x28
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff f97a 	bl	8002b62 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038d2:	2b28      	cmp	r3, #40	@ 0x28
 80038d4:	d125      	bne.n	8003922 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80038f0:	2301      	movs	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	81bb      	strh	r3, [r7, #12]
 8003904:	e002      	b.n	800390c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003914:	89ba      	ldrh	r2, [r7, #12]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff f92a 	bl	8002b74 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003920:	e00e      	b.n	8003940 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003966:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003994:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a4:	d172      	bne.n	8003a8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b22      	cmp	r3, #34	@ 0x22
 80039aa:	d002      	beq.n	80039b2 <I2C_Slave_STOPF+0x6a>
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80039b0:	d135      	bne.n	8003a1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f043 0204 	orr.w	r2, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f838 	bl	8001a60 <HAL_DMA_GetState>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d049      	beq.n	8003a8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	4a69      	ldr	r2, [pc, #420]	@ (8003ba0 <I2C_Slave_STOPF+0x258>)
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd ffb4 	bl	8001970 <HAL_DMA_Abort_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d03d      	beq.n	8003a8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a1c:	e035      	b.n	8003a8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe f802 	bl	8001a60 <HAL_DMA_GetState>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d014      	beq.n	8003a8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a66:	4a4e      	ldr	r2, [pc, #312]	@ (8003ba0 <I2C_Slave_STOPF+0x258>)
 8003a68:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd ff7e 	bl	8001970 <HAL_DMA_Abort_IT>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a84:	4610      	mov	r0, r2
 8003a86:	4798      	blx	r3
 8003a88:	e000      	b.n	8003a8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d03e      	beq.n	8003b14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d112      	bne.n	8003aca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b40      	cmp	r3, #64	@ 0x40
 8003ad6:	d112      	bne.n	8003afe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f8b7 	bl	8003c90 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b22:	e039      	b.n	8003b98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b28:	d109      	bne.n	8003b3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2228      	movs	r2, #40	@ 0x28
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff f812 	bl	8002b62 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b28      	cmp	r3, #40	@ 0x28
 8003b48:	d111      	bne.n	8003b6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <I2C_Slave_STOPF+0x25c>)
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff f811 	bl	8002b8e <HAL_I2C_ListenCpltCallback>
}
 8003b6c:	e014      	b.n	8003b98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	2b22      	cmp	r3, #34	@ 0x22
 8003b74:	d002      	beq.n	8003b7c <I2C_Slave_STOPF+0x234>
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b22      	cmp	r3, #34	@ 0x22
 8003b7a:	d10d      	bne.n	8003b98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe ffe5 	bl	8002b62 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	08004195 	.word	0x08004195
 8003ba4:	ffff0000 	.word	0xffff0000

08003ba8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d002      	beq.n	8003bca <I2C_Slave_AF+0x22>
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d129      	bne.n	8003c1e <I2C_Slave_AF+0x76>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b28      	cmp	r3, #40	@ 0x28
 8003bce:	d126      	bne.n	8003c1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <I2C_Slave_AF+0xe4>)
 8003bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003be4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fe ffb9 	bl	8002b8e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003c1c:	e031      	b.n	8003c82 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b21      	cmp	r3, #33	@ 0x21
 8003c22:	d129      	bne.n	8003c78 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a19      	ldr	r2, [pc, #100]	@ (8003c8c <I2C_Slave_AF+0xe4>)
 8003c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2221      	movs	r2, #33	@ 0x21
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c68:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe f9e6 	bl	800203c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7fe ff6d 	bl	8002b50 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c76:	e004      	b.n	8003c82 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c80:	615a      	str	r2, [r3, #20]
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ca8:	7bbb      	ldrb	r3, [r7, #14]
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d002      	beq.n	8003cb4 <I2C_ITError+0x24>
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d10a      	bne.n	8003cca <I2C_ITError+0x3a>
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	2b22      	cmp	r3, #34	@ 0x22
 8003cb8:	d107      	bne.n	8003cca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cd0:	2b28      	cmp	r3, #40	@ 0x28
 8003cd2:	d107      	bne.n	8003ce4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2228      	movs	r2, #40	@ 0x28
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ce2:	e015      	b.n	8003d10 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf2:	d00a      	beq.n	8003d0a <I2C_ITError+0x7a>
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b60      	cmp	r3, #96	@ 0x60
 8003cf8:	d007      	beq.n	8003d0a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1e:	d162      	bne.n	8003de6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d34:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d020      	beq.n	8003d80 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	4a6a      	ldr	r2, [pc, #424]	@ (8003eec <I2C_ITError+0x25c>)
 8003d44:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fe10 	bl	8001970 <HAL_DMA_Abort_IT>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8089 	beq.w	8003e6a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4798      	blx	r3
 8003d7e:	e074      	b.n	8003e6a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	4a59      	ldr	r2, [pc, #356]	@ (8003eec <I2C_ITError+0x25c>)
 8003d86:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fdef 	bl	8001970 <HAL_DMA_Abort_IT>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d068      	beq.n	8003e6a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d10b      	bne.n	8003dbe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
 8003de4:	e041      	b.n	8003e6a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b60      	cmp	r3, #96	@ 0x60
 8003df0:	d125      	bne.n	8003e3e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	2b40      	cmp	r3, #64	@ 0x40
 8003e0c:	d10b      	bne.n	8003e26 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fe fecd 	bl	8002bd6 <HAL_I2C_AbortCpltCallback>
 8003e3c:	e015      	b.n	8003e6a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e48:	2b40      	cmp	r3, #64	@ 0x40
 8003e4a:	d10b      	bne.n	8003e64 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fe fead 	bl	8002bc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10e      	bne.n	8003e98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d113      	bne.n	8003ee4 <I2C_ITError+0x254>
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b28      	cmp	r3, #40	@ 0x28
 8003ec0:	d110      	bne.n	8003ee4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <I2C_ITError+0x260>)
 8003ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fe55 	bl	8002b8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08004195 	.word	0x08004195
 8003ef0:	ffff0000 	.word	0xffff0000

08003ef4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	460b      	mov	r3, r1
 8003f02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d006      	beq.n	8003f1e <I2C_MasterRequestWrite+0x2a>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d003      	beq.n	8003f1e <I2C_MasterRequestWrite+0x2a>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f1c:	d108      	bne.n	8003f30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e00b      	b.n	8003f48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	2b12      	cmp	r3, #18
 8003f36:	d107      	bne.n	8003f48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f9c5 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f6e:	d103      	bne.n	8003f78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e035      	b.n	8003fe8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f84:	d108      	bne.n	8003f98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f86:	897b      	ldrh	r3, [r7, #10]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f94:	611a      	str	r2, [r3, #16]
 8003f96:	e01b      	b.n	8003fd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f98:	897b      	ldrh	r3, [r7, #10]
 8003f9a:	11db      	asrs	r3, r3, #7
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0306 	and.w	r3, r3, #6
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f063 030f 	orn	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	490e      	ldr	r1, [pc, #56]	@ (8003ff0 <I2C_MasterRequestWrite+0xfc>)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fa0e 	bl	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e010      	b.n	8003fe8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fc6:	897b      	ldrh	r3, [r7, #10]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4907      	ldr	r1, [pc, #28]	@ (8003ff4 <I2C_MasterRequestWrite+0x100>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f9fe 	bl	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	00010008 	.word	0x00010008
 8003ff4:	00010002 	.word	0x00010002

08003ff8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	460b      	mov	r3, r1
 8004006:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800401c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d006      	beq.n	8004032 <I2C_MasterRequestRead+0x3a>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d003      	beq.n	8004032 <I2C_MasterRequestRead+0x3a>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004030:	d108      	bne.n	8004044 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e00b      	b.n	800405c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	2b11      	cmp	r3, #17
 800404a:	d107      	bne.n	800405c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800405a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f93b 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004082:	d103      	bne.n	800408c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e079      	b.n	8004184 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004098:	d108      	bne.n	80040ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	e05f      	b.n	800416c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040ac:	897b      	ldrh	r3, [r7, #10]
 80040ae:	11db      	asrs	r3, r3, #7
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f003 0306 	and.w	r3, r3, #6
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f063 030f 	orn	r3, r3, #15
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4930      	ldr	r1, [pc, #192]	@ (800418c <I2C_MasterRequestRead+0x194>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f984 	bl	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e054      	b.n	8004184 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040da:	897b      	ldrh	r3, [r7, #10]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4929      	ldr	r1, [pc, #164]	@ (8004190 <I2C_MasterRequestRead+0x198>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f974 	bl	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e044      	b.n	8004184 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800411e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f8d9 	bl	80042e4 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004146:	d103      	bne.n	8004150 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e017      	b.n	8004184 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004154:	897b      	ldrh	r3, [r7, #10]
 8004156:	11db      	asrs	r3, r3, #7
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0306 	and.w	r3, r3, #6
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f063 030e 	orn	r3, r3, #14
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4907      	ldr	r1, [pc, #28]	@ (8004190 <I2C_MasterRequestRead+0x198>)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f930 	bl	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	00010008 	.word	0x00010008
 8004190:	00010002 	.word	0x00010002

08004194 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ae:	4b4b      	ldr	r3, [pc, #300]	@ (80042dc <I2C_DMAAbort+0x148>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	4a4a      	ldr	r2, [pc, #296]	@ (80042e0 <I2C_DMAAbort+0x14c>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0a1a      	lsrs	r2, r3, #8
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00da      	lsls	r2, r3, #3
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80041da:	e00a      	b.n	80041f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f0:	d0ea      	beq.n	80041c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	2200      	movs	r2, #0
 8004200:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	2200      	movs	r2, #0
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004220:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2200      	movs	r2, #0
 8004226:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004234:	2200      	movs	r2, #0
 8004236:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	2200      	movs	r2, #0
 8004246:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b60      	cmp	r3, #96	@ 0x60
 8004262:	d10e      	bne.n	8004282 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2200      	movs	r2, #0
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7fe fcab 	bl	8002bd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004280:	e027      	b.n	80042d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004288:	2b28      	cmp	r3, #40	@ 0x28
 800428a:	d117      	bne.n	80042bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2228      	movs	r2, #40	@ 0x28
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042ba:	e007      	b.n	80042cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f7fe fc79 	bl	8002bc4 <HAL_I2C_ErrorCallback>
}
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000000 	.word	0x20000000
 80042e0:	14f8b589 	.word	0x14f8b589

080042e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f4:	e048      	b.n	8004388 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d044      	beq.n	8004388 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7fd f9c1 	bl	8001684 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d302      	bcc.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d139      	bne.n	8004388 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10d      	bne.n	800433a <I2C_WaitOnFlagUntilTimeout+0x56>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	43da      	mvns	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	e00c      	b.n	8004354 <I2C_WaitOnFlagUntilTimeout+0x70>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	43da      	mvns	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	429a      	cmp	r2, r3
 8004358:	d116      	bne.n	8004388 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e023      	b.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d10d      	bne.n	80043ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	43da      	mvns	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	e00c      	b.n	80043c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	4013      	ands	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d093      	beq.n	80042f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e6:	e071      	b.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f6:	d123      	bne.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004406:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e067      	b.n	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d041      	beq.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fd f91c 	bl	8001684 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d136      	bne.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10c      	bne.n	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf14      	ite	ne
 800447a:	2301      	movne	r3, #1
 800447c:	2300      	moveq	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	e00b      	b.n	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	43da      	mvns	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d016      	beq.n	80044cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e021      	b.n	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10c      	bne.n	80044f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	43da      	mvns	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf14      	ite	ne
 80044e8:	2301      	movne	r3, #1
 80044ea:	2300      	moveq	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e00b      	b.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	43da      	mvns	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bf14      	ite	ne
 8004502:	2301      	movne	r3, #1
 8004504:	2300      	moveq	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f af6d 	bne.w	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004524:	e034      	b.n	8004590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f915 	bl	8004756 <I2C_IsAcknowledgeFailed>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e034      	b.n	80045a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453c:	d028      	beq.n	8004590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fd f8a1 	bl	8001684 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11d      	bne.n	8004590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	2b80      	cmp	r3, #128	@ 0x80
 8004560:	d016      	beq.n	8004590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	f043 0220 	orr.w	r2, r3, #32
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e007      	b.n	80045a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b80      	cmp	r3, #128	@ 0x80
 800459c:	d1c3      	bne.n	8004526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b4:	e034      	b.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f8cd 	bl	8004756 <I2C_IsAcknowledgeFailed>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e034      	b.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d028      	beq.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fd f859 	bl	8001684 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d016      	beq.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e007      	b.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b04      	cmp	r3, #4
 800462c:	d1c3      	bne.n	80045b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004644:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	4a13      	ldr	r2, [pc, #76]	@ (8004698 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800464c:	fba2 2303 	umull	r2, r3, r2, r3
 8004650:	0a1a      	lsrs	r2, r3, #8
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b01      	subs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e008      	b.n	8004688 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004684:	d0e9      	beq.n	800465a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000
 8004698:	14f8b589 	.word	0x14f8b589

0800469c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a8:	e049      	b.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d119      	bne.n	80046ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0210 	mvn.w	r2, #16
 80046c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e030      	b.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ec:	f7fc ffca 	bl	8001684 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d302      	bcc.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470c:	2b40      	cmp	r3, #64	@ 0x40
 800470e:	d016      	beq.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e007      	b.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d1ae      	bne.n	80046aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476c:	d11b      	bne.n	80047a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004776:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80047c2:	d103      	bne.n	80047cc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80047ca:	e007      	b.n	80047dc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80047d4:	d102      	bne.n	80047dc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2208      	movs	r2, #8
 80047da:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
	...

080047e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e272      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8087 	beq.w	8004916 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004808:	4b92      	ldr	r3, [pc, #584]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b04      	cmp	r3, #4
 8004812:	d00c      	beq.n	800482e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004814:	4b8f      	ldr	r3, [pc, #572]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b08      	cmp	r3, #8
 800481e:	d112      	bne.n	8004846 <HAL_RCC_OscConfig+0x5e>
 8004820:	4b8c      	ldr	r3, [pc, #560]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482c:	d10b      	bne.n	8004846 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800482e:	4b89      	ldr	r3, [pc, #548]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d06c      	beq.n	8004914 <HAL_RCC_OscConfig+0x12c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d168      	bne.n	8004914 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e24c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x76>
 8004850:	4b80      	ldr	r3, [pc, #512]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7f      	ldr	r2, [pc, #508]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e02e      	b.n	80048bc <HAL_RCC_OscConfig+0xd4>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x98>
 8004866:	4b7b      	ldr	r3, [pc, #492]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7a      	ldr	r2, [pc, #488]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800486c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b78      	ldr	r3, [pc, #480]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a77      	ldr	r2, [pc, #476]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xd4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0xbc>
 800488a:	4b72      	ldr	r3, [pc, #456]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a71      	ldr	r2, [pc, #452]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b6f      	ldr	r3, [pc, #444]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xd4>
 80048a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b68      	ldr	r3, [pc, #416]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a67      	ldr	r2, [pc, #412]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc fede 	bl	8001684 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fc feda 	bl	8001684 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	@ 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e200      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b5d      	ldr	r3, [pc, #372]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xe4>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fc feca 	bl	8001684 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fc fec6 	bl	8001684 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	@ 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1ec      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b53      	ldr	r3, [pc, #332]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x10c>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004922:	4b4c      	ldr	r3, [pc, #304]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800492e:	4b49      	ldr	r3, [pc, #292]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x18c>
 800493a:	4b46      	ldr	r3, [pc, #280]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x176>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1c0      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4939      	ldr	r1, [pc, #228]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	e03a      	b.n	80049ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800497c:	4b36      	ldr	r3, [pc, #216]	@ (8004a58 <HAL_RCC_OscConfig+0x270>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fc fe7f 	bl	8001684 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800498a:	f7fc fe7b 	bl	8001684 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e1a1      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4927      	ldr	r1, [pc, #156]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	4b26      	ldr	r3, [pc, #152]	@ (8004a58 <HAL_RCC_OscConfig+0x270>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fc fe5e 	bl	8001684 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fc fe5a 	bl	8001684 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e180      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d03a      	beq.n	8004a6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d019      	beq.n	8004a32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fe:	4b17      	ldr	r3, [pc, #92]	@ (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a04:	f7fc fe3e 	bl	8001684 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fc fe3a 	bl	8001684 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e160      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f000 face 	bl	8004fcc <RCC_Delay>
 8004a30:	e01c      	b.n	8004a6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <HAL_RCC_OscConfig+0x274>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a38:	f7fc fe24 	bl	8001684 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3e:	e00f      	b.n	8004a60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fc fe20 	bl	8001684 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d908      	bls.n	8004a60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e146      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	42420000 	.word	0x42420000
 8004a5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a60:	4b92      	ldr	r3, [pc, #584]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e9      	bne.n	8004a40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a6 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7e:	4b8b      	ldr	r3, [pc, #556]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10d      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	4a87      	ldr	r2, [pc, #540]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a94:	61d3      	str	r3, [r2, #28]
 8004a96:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b82      	ldr	r3, [pc, #520]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d118      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a7e      	ldr	r2, [pc, #504]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fc fde1 	bl	8001684 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac6:	f7fc fddd 	bl	8001684 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b64      	cmp	r3, #100	@ 0x64
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e103      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	4b75      	ldr	r3, [pc, #468]	@ (8004cb0 <HAL_RCC_OscConfig+0x4c8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x312>
 8004aec:	4b6f      	ldr	r3, [pc, #444]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4a6e      	ldr	r2, [pc, #440]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6213      	str	r3, [r2, #32]
 8004af8:	e02d      	b.n	8004b56 <HAL_RCC_OscConfig+0x36e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x334>
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	4a69      	ldr	r2, [pc, #420]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	f023 0301 	bic.w	r3, r3, #1
 8004b0c:	6213      	str	r3, [r2, #32]
 8004b0e:	4b67      	ldr	r3, [pc, #412]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4a66      	ldr	r2, [pc, #408]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	6213      	str	r3, [r2, #32]
 8004b1a:	e01c      	b.n	8004b56 <HAL_RCC_OscConfig+0x36e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d10c      	bne.n	8004b3e <HAL_RCC_OscConfig+0x356>
 8004b24:	4b61      	ldr	r3, [pc, #388]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4a60      	ldr	r2, [pc, #384]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	6213      	str	r3, [r2, #32]
 8004b30:	4b5e      	ldr	r3, [pc, #376]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	4a5d      	ldr	r2, [pc, #372]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6213      	str	r3, [r2, #32]
 8004b3c:	e00b      	b.n	8004b56 <HAL_RCC_OscConfig+0x36e>
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	4a5a      	ldr	r2, [pc, #360]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6213      	str	r3, [r2, #32]
 8004b4a:	4b58      	ldr	r3, [pc, #352]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4a57      	ldr	r2, [pc, #348]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	f023 0304 	bic.w	r3, r3, #4
 8004b54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d015      	beq.n	8004b8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5e:	f7fc fd91 	bl	8001684 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fc fd8d 	bl	8001684 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e0b1      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCC_OscConfig+0x37e>
 8004b88:	e014      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b8a:	f7fc fd7b 	bl	8001684 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fc fd77 	bl	8001684 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e09b      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba8:	4b40      	ldr	r3, [pc, #256]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ee      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d105      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bba:	4b3c      	ldr	r3, [pc, #240]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8087 	beq.w	8004cde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd0:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 030c 	and.w	r3, r3, #12
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d061      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d146      	bne.n	8004c72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	4b33      	ldr	r3, [pc, #204]	@ (8004cb4 <HAL_RCC_OscConfig+0x4cc>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fc fd4b 	bl	8001684 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fc fd47 	bl	8001684 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e06d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c04:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f0      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c18:	d108      	bne.n	8004c2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4921      	ldr	r1, [pc, #132]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a19      	ldr	r1, [r3, #32]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	491b      	ldr	r1, [pc, #108]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x4cc>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fd1b 	bl	8001684 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fd17 	bl	8001684 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e03d      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x46a>
 8004c70:	e035      	b.n	8004cde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fc fd04 	bl	8001684 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fc fd00 	bl	8001684 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e026      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x498>
 8004c9e:	e01e      	b.n	8004cde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e019      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_RCC_OscConfig+0x500>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40021000 	.word	0x40021000

08004cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0d0      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d00:	4b6a      	ldr	r3, [pc, #424]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d910      	bls.n	8004d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 0207 	bic.w	r2, r3, #7
 8004d16:	4965      	ldr	r1, [pc, #404]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	4b63      	ldr	r3, [pc, #396]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d001      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0b8      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d48:	4b59      	ldr	r3, [pc, #356]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	4a58      	ldr	r2, [pc, #352]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d60:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a52      	ldr	r2, [pc, #328]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d6c:	4b50      	ldr	r3, [pc, #320]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	494d      	ldr	r1, [pc, #308]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d040      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d92:	4b47      	ldr	r3, [pc, #284]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d115      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e07f      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d107      	bne.n	8004dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e073      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06b      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dca:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f023 0203 	bic.w	r2, r3, #3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4936      	ldr	r1, [pc, #216]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ddc:	f7fc fc52 	bl	8001684 <HAL_GetTick>
 8004de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de4:	f7fc fc4e 	bl	8001684 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e053      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 020c 	and.w	r2, r3, #12
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d1eb      	bne.n	8004de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b27      	ldr	r3, [pc, #156]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d210      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b24      	ldr	r3, [pc, #144]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	4922      	ldr	r1, [pc, #136]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b20      	ldr	r3, [pc, #128]	@ (8004eac <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e032      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e48:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4916      	ldr	r1, [pc, #88]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d009      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e66:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	490e      	ldr	r1, [pc, #56]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e7a:	f000 f821 	bl	8004ec0 <HAL_RCC_GetSysClockFreq>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	490a      	ldr	r1, [pc, #40]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e8c:	5ccb      	ldrb	r3, [r1, r3]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	4a09      	ldr	r2, [pc, #36]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e96:	4b09      	ldr	r3, [pc, #36]	@ (8004ebc <HAL_RCC_ClockConfig+0x1d0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fc fbb0 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40022000 	.word	0x40022000
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	080075c4 	.word	0x080075c4
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	20000004 	.word	0x20000004

08004ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004eda:	4b1e      	ldr	r3, [pc, #120]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d002      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8004eee:	e027      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ef0:	4b19      	ldr	r3, [pc, #100]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ef2:	613b      	str	r3, [r7, #16]
      break;
 8004ef4:	e027      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	0c9b      	lsrs	r3, r3, #18
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f0e:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	0c5b      	lsrs	r3, r3, #17
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	4a11      	ldr	r2, [pc, #68]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a0d      	ldr	r2, [pc, #52]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f22:	fb03 f202 	mul.w	r2, r3, r2
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e004      	b.n	8004f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	613b      	str	r3, [r7, #16]
      break;
 8004f3e:	e002      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f42:	613b      	str	r3, [r7, #16]
      break;
 8004f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f46:	693b      	ldr	r3, [r7, #16]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
 8004f58:	007a1200 	.word	0x007a1200
 8004f5c:	080075dc 	.word	0x080075dc
 8004f60:	080075ec 	.word	0x080075ec
 8004f64:	003d0900 	.word	0x003d0900

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b02      	ldr	r3, [pc, #8]	@ (8004f78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	20000000 	.word	0x20000000

08004f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f80:	f7ff fff2 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	4903      	ldr	r1, [pc, #12]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f92:	5ccb      	ldrb	r3, [r1, r3]
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	080075d4 	.word	0x080075d4

08004fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fa8:	f7ff ffde 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	0adb      	lsrs	r3, r3, #11
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	4903      	ldr	r1, [pc, #12]	@ (8004fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	080075d4 	.word	0x080075d4

08004fcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005000 <RCC_Delay+0x34>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005004 <RCC_Delay+0x38>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fe8:	bf00      	nop
  }
  while (Delay --);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	60fa      	str	r2, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f9      	bne.n	8004fe8 <RCC_Delay+0x1c>
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	20000000 	.word	0x20000000
 8005004:	10624dd3 	.word	0x10624dd3

08005008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e076      	b.n	8005108 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800502a:	d009      	beq.n	8005040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
 8005032:	e005      	b.n	8005040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc f8f4 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c4:	ea42 0103 	orr.w	r1, r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	0c1a      	lsrs	r2, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f002 0204 	and.w	r2, r2, #4
 80050e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69da      	ldr	r2, [r3, #28]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	@ 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800511e:	2301      	movs	r3, #1
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005122:	f7fc faaf 	bl	8001684 <HAL_GetTick>
 8005126:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800512e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800513a:	7ffb      	ldrb	r3, [r7, #31]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d00c      	beq.n	800515a <HAL_SPI_TransmitReceive+0x4a>
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005146:	d106      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d102      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x46>
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d001      	beq.n	800515a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005156:	2302      	movs	r3, #2
 8005158:	e17f      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_SPI_TransmitReceive+0x5c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_SPI_TransmitReceive+0x5c>
 8005166:	887b      	ldrh	r3, [r7, #2]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e174      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_SPI_TransmitReceive+0x6e>
 800517a:	2302      	movs	r3, #2
 800517c:	e16d      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b04      	cmp	r3, #4
 8005190:	d003      	beq.n	800519a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2205      	movs	r2, #5
 8005196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	887a      	ldrh	r2, [r7, #2]
 80051aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	887a      	ldrh	r2, [r7, #2]
 80051c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d007      	beq.n	80051ee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f6:	d17e      	bne.n	80052f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_TransmitReceive+0xf6>
 8005200:	8afb      	ldrh	r3, [r7, #22]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d16c      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005216:	1c9a      	adds	r2, r3, #2
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800522a:	e059      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d11b      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x162>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d016      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x162>
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	2b01      	cmp	r3, #1
 8005248:	d113      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524e:	881a      	ldrh	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525a:	1c9a      	adds	r2, r3, #2
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d119      	bne.n	80052b4 <HAL_SPI_TransmitReceive+0x1a4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d014      	beq.n	80052b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005294:	b292      	uxth	r2, r2
 8005296:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052b0:	2301      	movs	r3, #1
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052b4:	f7fc f9e6 	bl	8001684 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d80d      	bhi.n	80052e0 <HAL_SPI_TransmitReceive+0x1d0>
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d009      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e0bc      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1a0      	bne.n	800522c <HAL_SPI_TransmitReceive+0x11c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d19b      	bne.n	800522c <HAL_SPI_TransmitReceive+0x11c>
 80052f4:	e082      	b.n	80053fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x1f4>
 80052fe:	8afb      	ldrh	r3, [r7, #22]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d171      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532a:	e05d      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d11c      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x264>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d017      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x264>
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	2b01      	cmp	r3, #1
 8005348:	d114      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d119      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x2a6>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d014      	beq.n	80053b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053b2:	2301      	movs	r3, #1
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053b6:	f7fc f965 	bl	8001684 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_TransmitReceive+0x2be>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x2c4>
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d109      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e038      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d19c      	bne.n	800532c <HAL_SPI_TransmitReceive+0x21c>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d197      	bne.n	800532c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053fc:	6a3a      	ldr	r2, [r7, #32]
 80053fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f9b3 	bl	800576c <SPI_EndRxTxTransaction>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e01d      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005458:	2300      	movs	r3, #0
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3728      	adds	r7, #40	@ 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10e      	bne.n	80054a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
    return;
 80054a2:	e0b7      	b.n	8005614 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_SPI_IRQHandler+0x5e>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	4798      	blx	r3
    return;
 80054c0:	e0a8      	b.n	8005614 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <HAL_SPI_IRQHandler+0x74>
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 809e 	beq.w	8005614 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8098 	beq.w	8005614 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d023      	beq.n	8005536 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d011      	beq.n	800551e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	f043 0204 	orr.w	r2, r3, #4
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	e00b      	b.n	8005536 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	693b      	ldr	r3, [r7, #16]
        return;
 8005534:	e06e      	b.n	8005614 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d014      	beq.n	800556a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005544:	f043 0201 	orr.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556e:	2b00      	cmp	r3, #0
 8005570:	d04f      	beq.n	8005612 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005580:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_SPI_IRQHandler+0x13a>
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d034      	beq.n	8005608 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0203 	bic.w	r2, r2, #3
 80055ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d011      	beq.n	80055da <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_SPI_IRQHandler+0x1b8>)
 80055bc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fc f9d4 	bl	8001970 <HAL_DMA_Abort_IT>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e6:	4a0d      	ldr	r2, [pc, #52]	@ (800561c <HAL_SPI_IRQHandler+0x1b8>)
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fc f9be 	bl	8001970 <HAL_DMA_Abort_IT>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005606:	e003      	b.n	8005610 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f809 	bl	8005620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800560e:	e000      	b.n	8005612 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005610:	bf00      	nop
    return;
 8005612:	bf00      	nop
  }
}
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	08005633 	.word	0x08005633

08005620 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff ffe7 	bl	8005620 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800566c:	f7fc f80a 	bl	8001684 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	4413      	add	r3, r2
 800567a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800567c:	f7fc f802 	bl	8001684 <HAL_GetTick>
 8005680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005682:	4b39      	ldr	r3, [pc, #228]	@ (8005768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	015b      	lsls	r3, r3, #5
 8005688:	0d1b      	lsrs	r3, r3, #20
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	fb02 f303 	mul.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005692:	e054      	b.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d050      	beq.n	800573e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800569c:	f7fb fff2 	bl	8001684 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	69fa      	ldr	r2, [r7, #28]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d902      	bls.n	80056b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d13d      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ca:	d111      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d4:	d004      	beq.n	80056e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056de:	d107      	bne.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f8:	d10f      	bne.n	800571a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e017      	b.n	800575e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3b01      	subs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d19b      	bne.n	8005694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000000 	.word	0x20000000

0800576c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2201      	movs	r2, #1
 8005780:	2102      	movs	r1, #2
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff6a 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e013      	b.n	80057c6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	@ 0x80
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff ff57 	bl	800565c <SPI_WaitFlagStateUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e000      	b.n	80057c6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e042      	b.n	8005866 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fb fd79 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2224      	movs	r2, #36	@ 0x24
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005810:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fd62 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005826:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005836:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005846:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b08a      	sub	sp, #40	@ 0x28
 8005872:	af02      	add	r7, sp, #8
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b20      	cmp	r3, #32
 800588c:	d175      	bne.n	800597a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_Transmit+0x2c>
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e06e      	b.n	800597c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2221      	movs	r2, #33	@ 0x21
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ac:	f7fb feea 	bl	8001684 <HAL_GetTick>
 80058b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c6:	d108      	bne.n	80058da <HAL_UART_Transmit+0x6c>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	e003      	b.n	80058e2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058e2:	e02e      	b.n	8005942 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2180      	movs	r1, #128	@ 0x80
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fb00 	bl	8005ef4 <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e03a      	b.n	800597c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800591a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	3302      	adds	r3, #2
 8005920:	61bb      	str	r3, [r7, #24]
 8005922:	e007      	b.n	8005934 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3301      	adds	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1cb      	bne.n	80058e4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2200      	movs	r2, #0
 8005954:	2140      	movs	r1, #64	@ 0x40
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 facc 	bl	8005ef4 <UART_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e006      	b.n	800597c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3720      	adds	r7, #32
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b0ba      	sub	sp, #232	@ 0xe8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80059c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10f      	bne.n	80059ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_UART_IRQHandler+0x66>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fbbc 	bl	8006160 <UART_Receive_IT>
      return;
 80059e8:	e25b      	b.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80de 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x22c>
 80059f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80d1 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_UART_IRQHandler+0xae>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	f043 0201 	orr.w	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a36:	f003 0304 	and.w	r3, r3, #4
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <HAL_UART_IRQHandler+0xd2>
 8005a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4e:	f043 0202 	orr.w	r2, r3, #2
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <HAL_UART_IRQHandler+0xf6>
 8005a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a72:	f043 0204 	orr.w	r2, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d011      	beq.n	8005aaa <HAL_UART_IRQHandler+0x126>
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d105      	bne.n	8005a9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	f043 0208 	orr.w	r2, r3, #8
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 81f2 	beq.w	8005e98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x14e>
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fb47 	bl	8006160 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <HAL_UART_IRQHandler+0x17a>
 8005af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04f      	beq.n	8005b9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa51 	bl	8005fa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d041      	beq.n	8005b96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3314      	adds	r3, #20
 8005b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1d9      	bne.n	8005b12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d013      	beq.n	8005b8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d64 <HAL_UART_IRQHandler+0x3e0>)
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fb fefc 	bl	8001970 <HAL_DMA_Abort_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00e      	b.n	8005bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f99c 	bl	8005ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e00a      	b.n	8005bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f998 	bl	8005ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f994 	bl	8005ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005baa:	e175      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	bf00      	nop
    return;
 8005bae:	e173      	b.n	8005e98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 814f 	bne.w	8005e58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8148 	beq.w	8005e58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8141 	beq.w	8005e58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80b6 	beq.w	8005d68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8145 	beq.w	8005e9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	f080 813e 	bcs.w	8005e9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	f000 8088 	beq.w	8005d44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1d9      	bne.n	8005c34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3314      	adds	r3, #20
 8005ca0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ca4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005cb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e1      	bne.n	8005c80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3314      	adds	r3, #20
 8005cdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ce0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ce6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e3      	bne.n	8005cbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d14:	f023 0310 	bic.w	r3, r3, #16
 8005d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d2e:	e841 2300 	strex	r3, r2, [r1]
 8005d32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1e3      	bne.n	8005d02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fb fddb 	bl	80018fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f8bf 	bl	8005ede <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d60:	e09c      	b.n	8005e9c <HAL_UART_IRQHandler+0x518>
 8005d62:	bf00      	nop
 8005d64:	0800606b 	.word	0x0800606b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 808e 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8089 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	330c      	adds	r3, #12
 8005dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005db2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005db4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e3      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	330c      	adds	r3, #12
 8005e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	e853 3f00 	ldrex	r3, [r3]
 8005e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0310 	bic.w	r3, r3, #16
 8005e22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e30:	61fa      	str	r2, [r7, #28]
 8005e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	69b9      	ldr	r1, [r7, #24]
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e3      	bne.n	8005e0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f844 	bl	8005ede <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e56:	e023      	b.n	8005ea0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <HAL_UART_IRQHandler+0x4f4>
 8005e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f90e 	bl	8006092 <UART_Transmit_IT>
    return;
 8005e76:	e014      	b.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00e      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f94d 	bl	8006130 <UART_EndTransmit_IT>
    return;
 8005e96:	e004      	b.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e98:	bf00      	nop
 8005e9a:	e002      	b.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ea0:	bf00      	nop
  }
}
 8005ea2:	37e8      	adds	r7, #232	@ 0xe8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr

08005eba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	4613      	mov	r3, r2
 8005f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f04:	e03b      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d037      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0e:	f7fb fbb9 	bl	8001684 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	6a3a      	ldr	r2, [r7, #32]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d302      	bcc.n	8005f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e03a      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d023      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b80      	cmp	r3, #128	@ 0x80
 8005f3a:	d020      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b40      	cmp	r3, #64	@ 0x40
 8005f40:	d01d      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d116      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 f81d 	bl	8005fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2208      	movs	r2, #8
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e00f      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d0b4      	beq.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b095      	sub	sp, #84	@ 0x54
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fce:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e5      	bne.n	8005fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3314      	adds	r3, #20
 8005fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601a:	2b01      	cmp	r3, #1
 800601c:	d119      	bne.n	8006052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	60bb      	str	r3, [r7, #8]
   return(result);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0310 	bic.w	r3, r3, #16
 8006034:	647b      	str	r3, [r7, #68]	@ 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	330c      	adds	r3, #12
 800603c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800603e:	61ba      	str	r2, [r7, #24]
 8006040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	613b      	str	r3, [r7, #16]
   return(result);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006060:	bf00      	nop
 8006062:	3754      	adds	r7, #84	@ 0x54
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr

0800606a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff ff21 	bl	8005ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006092:	b480      	push	{r7}
 8006094:	b085      	sub	sp, #20
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b21      	cmp	r3, #33	@ 0x21
 80060a4:	d13e      	bne.n	8006124 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ae:	d114      	bne.n	80060da <UART_Transmit_IT+0x48>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d110      	bne.n	80060da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	621a      	str	r2, [r3, #32]
 80060d8:	e008      	b.n	80060ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6211      	str	r1, [r2, #32]
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4619      	mov	r1, r3
 80060fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10f      	bne.n	8006120 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800610e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800611e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006146:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fea9 	bl	8005ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08c      	sub	sp, #48	@ 0x30
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b22      	cmp	r3, #34	@ 0x22
 8006172:	f040 80ae 	bne.w	80062d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617e:	d117      	bne.n	80061b0 <UART_Receive_IT+0x50>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d113      	bne.n	80061b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	1c9a      	adds	r2, r3, #2
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80061ae:	e026      	b.n	80061fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	d007      	beq.n	80061d4 <UART_Receive_IT+0x74>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <UART_Receive_IT+0x82>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e008      	b.n	80061f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29b      	uxth	r3, r3
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	4619      	mov	r1, r3
 800620c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800620e:	2b00      	cmp	r3, #0
 8006210:	d15d      	bne.n	80062ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0220 	bic.w	r2, r2, #32
 8006220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695a      	ldr	r2, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	d135      	bne.n	80062c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	613b      	str	r3, [r7, #16]
   return(result);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627e:	623a      	str	r2, [r7, #32]
 8006280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	69f9      	ldr	r1, [r7, #28]
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	61bb      	str	r3, [r7, #24]
   return(result);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b10      	cmp	r3, #16
 800629e:	d10a      	bne.n	80062b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ba:	4619      	mov	r1, r3
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fe0e 	bl	8005ede <HAL_UARTEx_RxEventCallback>
 80062c2:	e002      	b.n	80062ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fdf8 	bl	8005eba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	e002      	b.n	80062d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e000      	b.n	80062d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
  }
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3730      	adds	r7, #48	@ 0x30
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006316:	f023 030c 	bic.w	r3, r3, #12
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	430b      	orrs	r3, r1
 8006322:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2c      	ldr	r2, [pc, #176]	@ (80063f0 <UART_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d103      	bne.n	800634c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006344:	f7fe fe2e 	bl	8004fa4 <HAL_RCC_GetPCLK2Freq>
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	e002      	b.n	8006352 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fe fe16 	bl	8004f7c <HAL_RCC_GetPCLK1Freq>
 8006350:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009a      	lsls	r2, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	fbb2 f3f3 	udiv	r3, r2, r3
 8006368:	4a22      	ldr	r2, [pc, #136]	@ (80063f4 <UART_SetConfig+0x118>)
 800636a:	fba2 2303 	umull	r2, r3, r2, r3
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	0119      	lsls	r1, r3, #4
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fbb2 f2f3 	udiv	r2, r2, r3
 8006388:	4b1a      	ldr	r3, [pc, #104]	@ (80063f4 <UART_SetConfig+0x118>)
 800638a:	fba3 0302 	umull	r0, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	2064      	movs	r0, #100	@ 0x64
 8006392:	fb00 f303 	mul.w	r3, r0, r3
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	3332      	adds	r3, #50	@ 0x32
 800639c:	4a15      	ldr	r2, [pc, #84]	@ (80063f4 <UART_SetConfig+0x118>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063a8:	4419      	add	r1, r3
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	009a      	lsls	r2, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063c0:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <UART_SetConfig+0x118>)
 80063c2:	fba3 0302 	umull	r0, r3, r3, r2
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	2064      	movs	r0, #100	@ 0x64
 80063ca:	fb00 f303 	mul.w	r3, r0, r3
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	3332      	adds	r3, #50	@ 0x32
 80063d4:	4a07      	ldr	r2, [pc, #28]	@ (80063f4 <UART_SetConfig+0x118>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	f003 020f 	and.w	r2, r3, #15
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	440a      	add	r2, r1
 80063e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063e8:	bf00      	nop
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40013800 	.word	0x40013800
 80063f4:	51eb851f 	.word	0x51eb851f

080063f8 <std>:
 80063f8:	2300      	movs	r3, #0
 80063fa:	b510      	push	{r4, lr}
 80063fc:	4604      	mov	r4, r0
 80063fe:	e9c0 3300 	strd	r3, r3, [r0]
 8006402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006406:	6083      	str	r3, [r0, #8]
 8006408:	8181      	strh	r1, [r0, #12]
 800640a:	6643      	str	r3, [r0, #100]	@ 0x64
 800640c:	81c2      	strh	r2, [r0, #14]
 800640e:	6183      	str	r3, [r0, #24]
 8006410:	4619      	mov	r1, r3
 8006412:	2208      	movs	r2, #8
 8006414:	305c      	adds	r0, #92	@ 0x5c
 8006416:	f000 fa01 	bl	800681c <memset>
 800641a:	4b0d      	ldr	r3, [pc, #52]	@ (8006450 <std+0x58>)
 800641c:	6224      	str	r4, [r4, #32]
 800641e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006420:	4b0c      	ldr	r3, [pc, #48]	@ (8006454 <std+0x5c>)
 8006422:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006424:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <std+0x60>)
 8006426:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006428:	4b0c      	ldr	r3, [pc, #48]	@ (800645c <std+0x64>)
 800642a:	6323      	str	r3, [r4, #48]	@ 0x30
 800642c:	4b0c      	ldr	r3, [pc, #48]	@ (8006460 <std+0x68>)
 800642e:	429c      	cmp	r4, r3
 8006430:	d006      	beq.n	8006440 <std+0x48>
 8006432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006436:	4294      	cmp	r4, r2
 8006438:	d002      	beq.n	8006440 <std+0x48>
 800643a:	33d0      	adds	r3, #208	@ 0xd0
 800643c:	429c      	cmp	r4, r3
 800643e:	d105      	bne.n	800644c <std+0x54>
 8006440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006448:	f000 ba60 	b.w	800690c <__retarget_lock_init_recursive>
 800644c:	bd10      	pop	{r4, pc}
 800644e:	bf00      	nop
 8006450:	0800666d 	.word	0x0800666d
 8006454:	0800668f 	.word	0x0800668f
 8006458:	080066c7 	.word	0x080066c7
 800645c:	080066eb 	.word	0x080066eb
 8006460:	200002a8 	.word	0x200002a8

08006464 <stdio_exit_handler>:
 8006464:	4a02      	ldr	r2, [pc, #8]	@ (8006470 <stdio_exit_handler+0xc>)
 8006466:	4903      	ldr	r1, [pc, #12]	@ (8006474 <stdio_exit_handler+0x10>)
 8006468:	4803      	ldr	r0, [pc, #12]	@ (8006478 <stdio_exit_handler+0x14>)
 800646a:	f000 b869 	b.w	8006540 <_fwalk_sglue>
 800646e:	bf00      	nop
 8006470:	2000000c 	.word	0x2000000c
 8006474:	080071a5 	.word	0x080071a5
 8006478:	2000001c 	.word	0x2000001c

0800647c <cleanup_stdio>:
 800647c:	6841      	ldr	r1, [r0, #4]
 800647e:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <cleanup_stdio+0x34>)
 8006480:	b510      	push	{r4, lr}
 8006482:	4299      	cmp	r1, r3
 8006484:	4604      	mov	r4, r0
 8006486:	d001      	beq.n	800648c <cleanup_stdio+0x10>
 8006488:	f000 fe8c 	bl	80071a4 <_fflush_r>
 800648c:	68a1      	ldr	r1, [r4, #8]
 800648e:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <cleanup_stdio+0x38>)
 8006490:	4299      	cmp	r1, r3
 8006492:	d002      	beq.n	800649a <cleanup_stdio+0x1e>
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fe85 	bl	80071a4 <_fflush_r>
 800649a:	68e1      	ldr	r1, [r4, #12]
 800649c:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <cleanup_stdio+0x3c>)
 800649e:	4299      	cmp	r1, r3
 80064a0:	d004      	beq.n	80064ac <cleanup_stdio+0x30>
 80064a2:	4620      	mov	r0, r4
 80064a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a8:	f000 be7c 	b.w	80071a4 <_fflush_r>
 80064ac:	bd10      	pop	{r4, pc}
 80064ae:	bf00      	nop
 80064b0:	200002a8 	.word	0x200002a8
 80064b4:	20000310 	.word	0x20000310
 80064b8:	20000378 	.word	0x20000378

080064bc <global_stdio_init.part.0>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	4b0b      	ldr	r3, [pc, #44]	@ (80064ec <global_stdio_init.part.0+0x30>)
 80064c0:	4c0b      	ldr	r4, [pc, #44]	@ (80064f0 <global_stdio_init.part.0+0x34>)
 80064c2:	4a0c      	ldr	r2, [pc, #48]	@ (80064f4 <global_stdio_init.part.0+0x38>)
 80064c4:	4620      	mov	r0, r4
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	2104      	movs	r1, #4
 80064ca:	2200      	movs	r2, #0
 80064cc:	f7ff ff94 	bl	80063f8 <std>
 80064d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064d4:	2201      	movs	r2, #1
 80064d6:	2109      	movs	r1, #9
 80064d8:	f7ff ff8e 	bl	80063f8 <std>
 80064dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064e0:	2202      	movs	r2, #2
 80064e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e6:	2112      	movs	r1, #18
 80064e8:	f7ff bf86 	b.w	80063f8 <std>
 80064ec:	200003e0 	.word	0x200003e0
 80064f0:	200002a8 	.word	0x200002a8
 80064f4:	08006465 	.word	0x08006465

080064f8 <__sfp_lock_acquire>:
 80064f8:	4801      	ldr	r0, [pc, #4]	@ (8006500 <__sfp_lock_acquire+0x8>)
 80064fa:	f000 ba08 	b.w	800690e <__retarget_lock_acquire_recursive>
 80064fe:	bf00      	nop
 8006500:	200003e9 	.word	0x200003e9

08006504 <__sfp_lock_release>:
 8006504:	4801      	ldr	r0, [pc, #4]	@ (800650c <__sfp_lock_release+0x8>)
 8006506:	f000 ba03 	b.w	8006910 <__retarget_lock_release_recursive>
 800650a:	bf00      	nop
 800650c:	200003e9 	.word	0x200003e9

08006510 <__sinit>:
 8006510:	b510      	push	{r4, lr}
 8006512:	4604      	mov	r4, r0
 8006514:	f7ff fff0 	bl	80064f8 <__sfp_lock_acquire>
 8006518:	6a23      	ldr	r3, [r4, #32]
 800651a:	b11b      	cbz	r3, 8006524 <__sinit+0x14>
 800651c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006520:	f7ff bff0 	b.w	8006504 <__sfp_lock_release>
 8006524:	4b04      	ldr	r3, [pc, #16]	@ (8006538 <__sinit+0x28>)
 8006526:	6223      	str	r3, [r4, #32]
 8006528:	4b04      	ldr	r3, [pc, #16]	@ (800653c <__sinit+0x2c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f5      	bne.n	800651c <__sinit+0xc>
 8006530:	f7ff ffc4 	bl	80064bc <global_stdio_init.part.0>
 8006534:	e7f2      	b.n	800651c <__sinit+0xc>
 8006536:	bf00      	nop
 8006538:	0800647d 	.word	0x0800647d
 800653c:	200003e0 	.word	0x200003e0

08006540 <_fwalk_sglue>:
 8006540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006544:	4607      	mov	r7, r0
 8006546:	4688      	mov	r8, r1
 8006548:	4614      	mov	r4, r2
 800654a:	2600      	movs	r6, #0
 800654c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006550:	f1b9 0901 	subs.w	r9, r9, #1
 8006554:	d505      	bpl.n	8006562 <_fwalk_sglue+0x22>
 8006556:	6824      	ldr	r4, [r4, #0]
 8006558:	2c00      	cmp	r4, #0
 800655a:	d1f7      	bne.n	800654c <_fwalk_sglue+0xc>
 800655c:	4630      	mov	r0, r6
 800655e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006562:	89ab      	ldrh	r3, [r5, #12]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d907      	bls.n	8006578 <_fwalk_sglue+0x38>
 8006568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800656c:	3301      	adds	r3, #1
 800656e:	d003      	beq.n	8006578 <_fwalk_sglue+0x38>
 8006570:	4629      	mov	r1, r5
 8006572:	4638      	mov	r0, r7
 8006574:	47c0      	blx	r8
 8006576:	4306      	orrs	r6, r0
 8006578:	3568      	adds	r5, #104	@ 0x68
 800657a:	e7e9      	b.n	8006550 <_fwalk_sglue+0x10>

0800657c <iprintf>:
 800657c:	b40f      	push	{r0, r1, r2, r3}
 800657e:	b507      	push	{r0, r1, r2, lr}
 8006580:	4906      	ldr	r1, [pc, #24]	@ (800659c <iprintf+0x20>)
 8006582:	ab04      	add	r3, sp, #16
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	f853 2b04 	ldr.w	r2, [r3], #4
 800658a:	6881      	ldr	r1, [r0, #8]
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	f000 fadf 	bl	8006b50 <_vfiprintf_r>
 8006592:	b003      	add	sp, #12
 8006594:	f85d eb04 	ldr.w	lr, [sp], #4
 8006598:	b004      	add	sp, #16
 800659a:	4770      	bx	lr
 800659c:	20000018 	.word	0x20000018

080065a0 <putchar>:
 80065a0:	4b02      	ldr	r3, [pc, #8]	@ (80065ac <putchar+0xc>)
 80065a2:	4601      	mov	r1, r0
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	6882      	ldr	r2, [r0, #8]
 80065a8:	f000 be85 	b.w	80072b6 <_putc_r>
 80065ac:	20000018 	.word	0x20000018

080065b0 <_puts_r>:
 80065b0:	6a03      	ldr	r3, [r0, #32]
 80065b2:	b570      	push	{r4, r5, r6, lr}
 80065b4:	4605      	mov	r5, r0
 80065b6:	460e      	mov	r6, r1
 80065b8:	6884      	ldr	r4, [r0, #8]
 80065ba:	b90b      	cbnz	r3, 80065c0 <_puts_r+0x10>
 80065bc:	f7ff ffa8 	bl	8006510 <__sinit>
 80065c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065c2:	07db      	lsls	r3, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_puts_r+0x22>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	0598      	lsls	r0, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_puts_r+0x22>
 80065cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ce:	f000 f99e 	bl	800690e <__retarget_lock_acquire_recursive>
 80065d2:	89a3      	ldrh	r3, [r4, #12]
 80065d4:	0719      	lsls	r1, r3, #28
 80065d6:	d502      	bpl.n	80065de <_puts_r+0x2e>
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d135      	bne.n	800664a <_puts_r+0x9a>
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f000 f8c5 	bl	8006770 <__swsetup_r>
 80065e6:	b380      	cbz	r0, 800664a <_puts_r+0x9a>
 80065e8:	f04f 35ff 	mov.w	r5, #4294967295
 80065ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ee:	07da      	lsls	r2, r3, #31
 80065f0:	d405      	bmi.n	80065fe <_puts_r+0x4e>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	059b      	lsls	r3, r3, #22
 80065f6:	d402      	bmi.n	80065fe <_puts_r+0x4e>
 80065f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065fa:	f000 f989 	bl	8006910 <__retarget_lock_release_recursive>
 80065fe:	4628      	mov	r0, r5
 8006600:	bd70      	pop	{r4, r5, r6, pc}
 8006602:	2b00      	cmp	r3, #0
 8006604:	da04      	bge.n	8006610 <_puts_r+0x60>
 8006606:	69a2      	ldr	r2, [r4, #24]
 8006608:	429a      	cmp	r2, r3
 800660a:	dc17      	bgt.n	800663c <_puts_r+0x8c>
 800660c:	290a      	cmp	r1, #10
 800660e:	d015      	beq.n	800663c <_puts_r+0x8c>
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	7019      	strb	r1, [r3, #0]
 8006618:	68a3      	ldr	r3, [r4, #8]
 800661a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800661e:	3b01      	subs	r3, #1
 8006620:	60a3      	str	r3, [r4, #8]
 8006622:	2900      	cmp	r1, #0
 8006624:	d1ed      	bne.n	8006602 <_puts_r+0x52>
 8006626:	2b00      	cmp	r3, #0
 8006628:	da11      	bge.n	800664e <_puts_r+0x9e>
 800662a:	4622      	mov	r2, r4
 800662c:	210a      	movs	r1, #10
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f85f 	bl	80066f2 <__swbuf_r>
 8006634:	3001      	adds	r0, #1
 8006636:	d0d7      	beq.n	80065e8 <_puts_r+0x38>
 8006638:	250a      	movs	r5, #10
 800663a:	e7d7      	b.n	80065ec <_puts_r+0x3c>
 800663c:	4622      	mov	r2, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f857 	bl	80066f2 <__swbuf_r>
 8006644:	3001      	adds	r0, #1
 8006646:	d1e7      	bne.n	8006618 <_puts_r+0x68>
 8006648:	e7ce      	b.n	80065e8 <_puts_r+0x38>
 800664a:	3e01      	subs	r6, #1
 800664c:	e7e4      	b.n	8006618 <_puts_r+0x68>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	6022      	str	r2, [r4, #0]
 8006654:	220a      	movs	r2, #10
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	e7ee      	b.n	8006638 <_puts_r+0x88>
	...

0800665c <puts>:
 800665c:	4b02      	ldr	r3, [pc, #8]	@ (8006668 <puts+0xc>)
 800665e:	4601      	mov	r1, r0
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f7ff bfa5 	b.w	80065b0 <_puts_r>
 8006666:	bf00      	nop
 8006668:	20000018 	.word	0x20000018

0800666c <__sread>:
 800666c:	b510      	push	{r4, lr}
 800666e:	460c      	mov	r4, r1
 8006670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006674:	f000 f8fc 	bl	8006870 <_read_r>
 8006678:	2800      	cmp	r0, #0
 800667a:	bfab      	itete	ge
 800667c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800667e:	89a3      	ldrhlt	r3, [r4, #12]
 8006680:	181b      	addge	r3, r3, r0
 8006682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006686:	bfac      	ite	ge
 8006688:	6563      	strge	r3, [r4, #84]	@ 0x54
 800668a:	81a3      	strhlt	r3, [r4, #12]
 800668c:	bd10      	pop	{r4, pc}

0800668e <__swrite>:
 800668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	461f      	mov	r7, r3
 8006694:	898b      	ldrh	r3, [r1, #12]
 8006696:	4605      	mov	r5, r0
 8006698:	05db      	lsls	r3, r3, #23
 800669a:	460c      	mov	r4, r1
 800669c:	4616      	mov	r6, r2
 800669e:	d505      	bpl.n	80066ac <__swrite+0x1e>
 80066a0:	2302      	movs	r3, #2
 80066a2:	2200      	movs	r2, #0
 80066a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a8:	f000 f8d0 	bl	800684c <_lseek_r>
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	4632      	mov	r2, r6
 80066b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	4628      	mov	r0, r5
 80066b8:	463b      	mov	r3, r7
 80066ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c2:	f000 b8e7 	b.w	8006894 <_write_r>

080066c6 <__sseek>:
 80066c6:	b510      	push	{r4, lr}
 80066c8:	460c      	mov	r4, r1
 80066ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ce:	f000 f8bd 	bl	800684c <_lseek_r>
 80066d2:	1c43      	adds	r3, r0, #1
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	bf15      	itete	ne
 80066d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066e2:	81a3      	strheq	r3, [r4, #12]
 80066e4:	bf18      	it	ne
 80066e6:	81a3      	strhne	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__sclose>:
 80066ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ee:	f000 b89d 	b.w	800682c <_close_r>

080066f2 <__swbuf_r>:
 80066f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f4:	460e      	mov	r6, r1
 80066f6:	4614      	mov	r4, r2
 80066f8:	4605      	mov	r5, r0
 80066fa:	b118      	cbz	r0, 8006704 <__swbuf_r+0x12>
 80066fc:	6a03      	ldr	r3, [r0, #32]
 80066fe:	b90b      	cbnz	r3, 8006704 <__swbuf_r+0x12>
 8006700:	f7ff ff06 	bl	8006510 <__sinit>
 8006704:	69a3      	ldr	r3, [r4, #24]
 8006706:	60a3      	str	r3, [r4, #8]
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	071a      	lsls	r2, r3, #28
 800670c:	d501      	bpl.n	8006712 <__swbuf_r+0x20>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	b943      	cbnz	r3, 8006724 <__swbuf_r+0x32>
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f82b 	bl	8006770 <__swsetup_r>
 800671a:	b118      	cbz	r0, 8006724 <__swbuf_r+0x32>
 800671c:	f04f 37ff 	mov.w	r7, #4294967295
 8006720:	4638      	mov	r0, r7
 8006722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	6922      	ldr	r2, [r4, #16]
 8006728:	b2f6      	uxtb	r6, r6
 800672a:	1a98      	subs	r0, r3, r2
 800672c:	6963      	ldr	r3, [r4, #20]
 800672e:	4637      	mov	r7, r6
 8006730:	4283      	cmp	r3, r0
 8006732:	dc05      	bgt.n	8006740 <__swbuf_r+0x4e>
 8006734:	4621      	mov	r1, r4
 8006736:	4628      	mov	r0, r5
 8006738:	f000 fd34 	bl	80071a4 <_fflush_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	d1ed      	bne.n	800671c <__swbuf_r+0x2a>
 8006740:	68a3      	ldr	r3, [r4, #8]
 8006742:	3b01      	subs	r3, #1
 8006744:	60a3      	str	r3, [r4, #8]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	6022      	str	r2, [r4, #0]
 800674c:	701e      	strb	r6, [r3, #0]
 800674e:	6962      	ldr	r2, [r4, #20]
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	429a      	cmp	r2, r3
 8006754:	d004      	beq.n	8006760 <__swbuf_r+0x6e>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	07db      	lsls	r3, r3, #31
 800675a:	d5e1      	bpl.n	8006720 <__swbuf_r+0x2e>
 800675c:	2e0a      	cmp	r6, #10
 800675e:	d1df      	bne.n	8006720 <__swbuf_r+0x2e>
 8006760:	4621      	mov	r1, r4
 8006762:	4628      	mov	r0, r5
 8006764:	f000 fd1e 	bl	80071a4 <_fflush_r>
 8006768:	2800      	cmp	r0, #0
 800676a:	d0d9      	beq.n	8006720 <__swbuf_r+0x2e>
 800676c:	e7d6      	b.n	800671c <__swbuf_r+0x2a>
	...

08006770 <__swsetup_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4b29      	ldr	r3, [pc, #164]	@ (8006818 <__swsetup_r+0xa8>)
 8006774:	4605      	mov	r5, r0
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	460c      	mov	r4, r1
 800677a:	b118      	cbz	r0, 8006784 <__swsetup_r+0x14>
 800677c:	6a03      	ldr	r3, [r0, #32]
 800677e:	b90b      	cbnz	r3, 8006784 <__swsetup_r+0x14>
 8006780:	f7ff fec6 	bl	8006510 <__sinit>
 8006784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006788:	0719      	lsls	r1, r3, #28
 800678a:	d422      	bmi.n	80067d2 <__swsetup_r+0x62>
 800678c:	06da      	lsls	r2, r3, #27
 800678e:	d407      	bmi.n	80067a0 <__swsetup_r+0x30>
 8006790:	2209      	movs	r2, #9
 8006792:	602a      	str	r2, [r5, #0]
 8006794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	e033      	b.n	8006808 <__swsetup_r+0x98>
 80067a0:	0758      	lsls	r0, r3, #29
 80067a2:	d512      	bpl.n	80067ca <__swsetup_r+0x5a>
 80067a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067a6:	b141      	cbz	r1, 80067ba <__swsetup_r+0x4a>
 80067a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <__swsetup_r+0x46>
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 f8af 	bl	8006914 <_free_r>
 80067b6:	2300      	movs	r3, #0
 80067b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067c0:	81a3      	strh	r3, [r4, #12]
 80067c2:	2300      	movs	r3, #0
 80067c4:	6063      	str	r3, [r4, #4]
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f043 0308 	orr.w	r3, r3, #8
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	b94b      	cbnz	r3, 80067ea <__swsetup_r+0x7a>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e0:	d003      	beq.n	80067ea <__swsetup_r+0x7a>
 80067e2:	4621      	mov	r1, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 fd2a 	bl	800723e <__smakebuf_r>
 80067ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ee:	f013 0201 	ands.w	r2, r3, #1
 80067f2:	d00a      	beq.n	800680a <__swsetup_r+0x9a>
 80067f4:	2200      	movs	r2, #0
 80067f6:	60a2      	str	r2, [r4, #8]
 80067f8:	6962      	ldr	r2, [r4, #20]
 80067fa:	4252      	negs	r2, r2
 80067fc:	61a2      	str	r2, [r4, #24]
 80067fe:	6922      	ldr	r2, [r4, #16]
 8006800:	b942      	cbnz	r2, 8006814 <__swsetup_r+0xa4>
 8006802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006806:	d1c5      	bne.n	8006794 <__swsetup_r+0x24>
 8006808:	bd38      	pop	{r3, r4, r5, pc}
 800680a:	0799      	lsls	r1, r3, #30
 800680c:	bf58      	it	pl
 800680e:	6962      	ldrpl	r2, [r4, #20]
 8006810:	60a2      	str	r2, [r4, #8]
 8006812:	e7f4      	b.n	80067fe <__swsetup_r+0x8e>
 8006814:	2000      	movs	r0, #0
 8006816:	e7f7      	b.n	8006808 <__swsetup_r+0x98>
 8006818:	20000018 	.word	0x20000018

0800681c <memset>:
 800681c:	4603      	mov	r3, r0
 800681e:	4402      	add	r2, r0
 8006820:	4293      	cmp	r3, r2
 8006822:	d100      	bne.n	8006826 <memset+0xa>
 8006824:	4770      	bx	lr
 8006826:	f803 1b01 	strb.w	r1, [r3], #1
 800682a:	e7f9      	b.n	8006820 <memset+0x4>

0800682c <_close_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	2300      	movs	r3, #0
 8006830:	4d05      	ldr	r5, [pc, #20]	@ (8006848 <_close_r+0x1c>)
 8006832:	4604      	mov	r4, r0
 8006834:	4608      	mov	r0, r1
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	f7fa fe39 	bl	80014ae <_close>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	d102      	bne.n	8006846 <_close_r+0x1a>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	b103      	cbz	r3, 8006846 <_close_r+0x1a>
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	bd38      	pop	{r3, r4, r5, pc}
 8006848:	200003e4 	.word	0x200003e4

0800684c <_lseek_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	4611      	mov	r1, r2
 8006854:	2200      	movs	r2, #0
 8006856:	4d05      	ldr	r5, [pc, #20]	@ (800686c <_lseek_r+0x20>)
 8006858:	602a      	str	r2, [r5, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	f7fa fe4b 	bl	80014f6 <_lseek>
 8006860:	1c43      	adds	r3, r0, #1
 8006862:	d102      	bne.n	800686a <_lseek_r+0x1e>
 8006864:	682b      	ldr	r3, [r5, #0]
 8006866:	b103      	cbz	r3, 800686a <_lseek_r+0x1e>
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	bd38      	pop	{r3, r4, r5, pc}
 800686c:	200003e4 	.word	0x200003e4

08006870 <_read_r>:
 8006870:	b538      	push	{r3, r4, r5, lr}
 8006872:	4604      	mov	r4, r0
 8006874:	4608      	mov	r0, r1
 8006876:	4611      	mov	r1, r2
 8006878:	2200      	movs	r2, #0
 800687a:	4d05      	ldr	r5, [pc, #20]	@ (8006890 <_read_r+0x20>)
 800687c:	602a      	str	r2, [r5, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	f7fa fddc 	bl	800143c <_read>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_read_r+0x1e>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_read_r+0x1e>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	200003e4 	.word	0x200003e4

08006894 <_write_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	2200      	movs	r2, #0
 800689e:	4d05      	ldr	r5, [pc, #20]	@ (80068b4 <_write_r+0x20>)
 80068a0:	602a      	str	r2, [r5, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7fa fde7 	bl	8001476 <_write>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_write_r+0x1e>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_write_r+0x1e>
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	200003e4 	.word	0x200003e4

080068b8 <__errno>:
 80068b8:	4b01      	ldr	r3, [pc, #4]	@ (80068c0 <__errno+0x8>)
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000018 	.word	0x20000018

080068c4 <__libc_init_array>:
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	2600      	movs	r6, #0
 80068c8:	4d0c      	ldr	r5, [pc, #48]	@ (80068fc <__libc_init_array+0x38>)
 80068ca:	4c0d      	ldr	r4, [pc, #52]	@ (8006900 <__libc_init_array+0x3c>)
 80068cc:	1b64      	subs	r4, r4, r5
 80068ce:	10a4      	asrs	r4, r4, #2
 80068d0:	42a6      	cmp	r6, r4
 80068d2:	d109      	bne.n	80068e8 <__libc_init_array+0x24>
 80068d4:	f000 fd64 	bl	80073a0 <_init>
 80068d8:	2600      	movs	r6, #0
 80068da:	4d0a      	ldr	r5, [pc, #40]	@ (8006904 <__libc_init_array+0x40>)
 80068dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006908 <__libc_init_array+0x44>)
 80068de:	1b64      	subs	r4, r4, r5
 80068e0:	10a4      	asrs	r4, r4, #2
 80068e2:	42a6      	cmp	r6, r4
 80068e4:	d105      	bne.n	80068f2 <__libc_init_array+0x2e>
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ec:	4798      	blx	r3
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7ee      	b.n	80068d0 <__libc_init_array+0xc>
 80068f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f6:	4798      	blx	r3
 80068f8:	3601      	adds	r6, #1
 80068fa:	e7f2      	b.n	80068e2 <__libc_init_array+0x1e>
 80068fc:	08007624 	.word	0x08007624
 8006900:	08007624 	.word	0x08007624
 8006904:	08007624 	.word	0x08007624
 8006908:	08007628 	.word	0x08007628

0800690c <__retarget_lock_init_recursive>:
 800690c:	4770      	bx	lr

0800690e <__retarget_lock_acquire_recursive>:
 800690e:	4770      	bx	lr

08006910 <__retarget_lock_release_recursive>:
 8006910:	4770      	bx	lr
	...

08006914 <_free_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4605      	mov	r5, r0
 8006918:	2900      	cmp	r1, #0
 800691a:	d040      	beq.n	800699e <_free_r+0x8a>
 800691c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006920:	1f0c      	subs	r4, r1, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	bfb8      	it	lt
 8006926:	18e4      	addlt	r4, r4, r3
 8006928:	f000 f8de 	bl	8006ae8 <__malloc_lock>
 800692c:	4a1c      	ldr	r2, [pc, #112]	@ (80069a0 <_free_r+0x8c>)
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	b933      	cbnz	r3, 8006940 <_free_r+0x2c>
 8006932:	6063      	str	r3, [r4, #4]
 8006934:	6014      	str	r4, [r2, #0]
 8006936:	4628      	mov	r0, r5
 8006938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800693c:	f000 b8da 	b.w	8006af4 <__malloc_unlock>
 8006940:	42a3      	cmp	r3, r4
 8006942:	d908      	bls.n	8006956 <_free_r+0x42>
 8006944:	6820      	ldr	r0, [r4, #0]
 8006946:	1821      	adds	r1, r4, r0
 8006948:	428b      	cmp	r3, r1
 800694a:	bf01      	itttt	eq
 800694c:	6819      	ldreq	r1, [r3, #0]
 800694e:	685b      	ldreq	r3, [r3, #4]
 8006950:	1809      	addeq	r1, r1, r0
 8006952:	6021      	streq	r1, [r4, #0]
 8006954:	e7ed      	b.n	8006932 <_free_r+0x1e>
 8006956:	461a      	mov	r2, r3
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	b10b      	cbz	r3, 8006960 <_free_r+0x4c>
 800695c:	42a3      	cmp	r3, r4
 800695e:	d9fa      	bls.n	8006956 <_free_r+0x42>
 8006960:	6811      	ldr	r1, [r2, #0]
 8006962:	1850      	adds	r0, r2, r1
 8006964:	42a0      	cmp	r0, r4
 8006966:	d10b      	bne.n	8006980 <_free_r+0x6c>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	4401      	add	r1, r0
 800696c:	1850      	adds	r0, r2, r1
 800696e:	4283      	cmp	r3, r0
 8006970:	6011      	str	r1, [r2, #0]
 8006972:	d1e0      	bne.n	8006936 <_free_r+0x22>
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4408      	add	r0, r1
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	6053      	str	r3, [r2, #4]
 800697e:	e7da      	b.n	8006936 <_free_r+0x22>
 8006980:	d902      	bls.n	8006988 <_free_r+0x74>
 8006982:	230c      	movs	r3, #12
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	e7d6      	b.n	8006936 <_free_r+0x22>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	1821      	adds	r1, r4, r0
 800698c:	428b      	cmp	r3, r1
 800698e:	bf01      	itttt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	1809      	addeq	r1, r1, r0
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	6063      	str	r3, [r4, #4]
 800699a:	6054      	str	r4, [r2, #4]
 800699c:	e7cb      	b.n	8006936 <_free_r+0x22>
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	200003f0 	.word	0x200003f0

080069a4 <sbrk_aligned>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4e0f      	ldr	r6, [pc, #60]	@ (80069e4 <sbrk_aligned+0x40>)
 80069a8:	460c      	mov	r4, r1
 80069aa:	6831      	ldr	r1, [r6, #0]
 80069ac:	4605      	mov	r5, r0
 80069ae:	b911      	cbnz	r1, 80069b6 <sbrk_aligned+0x12>
 80069b0:	f000 fcd8 	bl	8007364 <_sbrk_r>
 80069b4:	6030      	str	r0, [r6, #0]
 80069b6:	4621      	mov	r1, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 fcd3 	bl	8007364 <_sbrk_r>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	d103      	bne.n	80069ca <sbrk_aligned+0x26>
 80069c2:	f04f 34ff 	mov.w	r4, #4294967295
 80069c6:	4620      	mov	r0, r4
 80069c8:	bd70      	pop	{r4, r5, r6, pc}
 80069ca:	1cc4      	adds	r4, r0, #3
 80069cc:	f024 0403 	bic.w	r4, r4, #3
 80069d0:	42a0      	cmp	r0, r4
 80069d2:	d0f8      	beq.n	80069c6 <sbrk_aligned+0x22>
 80069d4:	1a21      	subs	r1, r4, r0
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 fcc4 	bl	8007364 <_sbrk_r>
 80069dc:	3001      	adds	r0, #1
 80069de:	d1f2      	bne.n	80069c6 <sbrk_aligned+0x22>
 80069e0:	e7ef      	b.n	80069c2 <sbrk_aligned+0x1e>
 80069e2:	bf00      	nop
 80069e4:	200003ec 	.word	0x200003ec

080069e8 <_malloc_r>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	1ccd      	adds	r5, r1, #3
 80069ee:	f025 0503 	bic.w	r5, r5, #3
 80069f2:	3508      	adds	r5, #8
 80069f4:	2d0c      	cmp	r5, #12
 80069f6:	bf38      	it	cc
 80069f8:	250c      	movcc	r5, #12
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	4606      	mov	r6, r0
 80069fe:	db01      	blt.n	8006a04 <_malloc_r+0x1c>
 8006a00:	42a9      	cmp	r1, r5
 8006a02:	d904      	bls.n	8006a0e <_malloc_r+0x26>
 8006a04:	230c      	movs	r3, #12
 8006a06:	6033      	str	r3, [r6, #0]
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ae4 <_malloc_r+0xfc>
 8006a12:	f000 f869 	bl	8006ae8 <__malloc_lock>
 8006a16:	f8d8 3000 	ldr.w	r3, [r8]
 8006a1a:	461c      	mov	r4, r3
 8006a1c:	bb44      	cbnz	r4, 8006a70 <_malloc_r+0x88>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4630      	mov	r0, r6
 8006a22:	f7ff ffbf 	bl	80069a4 <sbrk_aligned>
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	4604      	mov	r4, r0
 8006a2a:	d158      	bne.n	8006ade <_malloc_r+0xf6>
 8006a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006a30:	4627      	mov	r7, r4
 8006a32:	2f00      	cmp	r7, #0
 8006a34:	d143      	bne.n	8006abe <_malloc_r+0xd6>
 8006a36:	2c00      	cmp	r4, #0
 8006a38:	d04b      	beq.n	8006ad2 <_malloc_r+0xea>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	4630      	mov	r0, r6
 8006a40:	eb04 0903 	add.w	r9, r4, r3
 8006a44:	f000 fc8e 	bl	8007364 <_sbrk_r>
 8006a48:	4581      	cmp	r9, r0
 8006a4a:	d142      	bne.n	8006ad2 <_malloc_r+0xea>
 8006a4c:	6821      	ldr	r1, [r4, #0]
 8006a4e:	4630      	mov	r0, r6
 8006a50:	1a6d      	subs	r5, r5, r1
 8006a52:	4629      	mov	r1, r5
 8006a54:	f7ff ffa6 	bl	80069a4 <sbrk_aligned>
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d03a      	beq.n	8006ad2 <_malloc_r+0xea>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	442b      	add	r3, r5
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	f8d8 3000 	ldr.w	r3, [r8]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	bb62      	cbnz	r2, 8006ac4 <_malloc_r+0xdc>
 8006a6a:	f8c8 7000 	str.w	r7, [r8]
 8006a6e:	e00f      	b.n	8006a90 <_malloc_r+0xa8>
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	1b52      	subs	r2, r2, r5
 8006a74:	d420      	bmi.n	8006ab8 <_malloc_r+0xd0>
 8006a76:	2a0b      	cmp	r2, #11
 8006a78:	d917      	bls.n	8006aaa <_malloc_r+0xc2>
 8006a7a:	1961      	adds	r1, r4, r5
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	6025      	str	r5, [r4, #0]
 8006a80:	bf18      	it	ne
 8006a82:	6059      	strne	r1, [r3, #4]
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	bf08      	it	eq
 8006a88:	f8c8 1000 	streq.w	r1, [r8]
 8006a8c:	5162      	str	r2, [r4, r5]
 8006a8e:	604b      	str	r3, [r1, #4]
 8006a90:	4630      	mov	r0, r6
 8006a92:	f000 f82f 	bl	8006af4 <__malloc_unlock>
 8006a96:	f104 000b 	add.w	r0, r4, #11
 8006a9a:	1d23      	adds	r3, r4, #4
 8006a9c:	f020 0007 	bic.w	r0, r0, #7
 8006aa0:	1ac2      	subs	r2, r0, r3
 8006aa2:	bf1c      	itt	ne
 8006aa4:	1a1b      	subne	r3, r3, r0
 8006aa6:	50a3      	strne	r3, [r4, r2]
 8006aa8:	e7af      	b.n	8006a0a <_malloc_r+0x22>
 8006aaa:	6862      	ldr	r2, [r4, #4]
 8006aac:	42a3      	cmp	r3, r4
 8006aae:	bf0c      	ite	eq
 8006ab0:	f8c8 2000 	streq.w	r2, [r8]
 8006ab4:	605a      	strne	r2, [r3, #4]
 8006ab6:	e7eb      	b.n	8006a90 <_malloc_r+0xa8>
 8006ab8:	4623      	mov	r3, r4
 8006aba:	6864      	ldr	r4, [r4, #4]
 8006abc:	e7ae      	b.n	8006a1c <_malloc_r+0x34>
 8006abe:	463c      	mov	r4, r7
 8006ac0:	687f      	ldr	r7, [r7, #4]
 8006ac2:	e7b6      	b.n	8006a32 <_malloc_r+0x4a>
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	d1fb      	bne.n	8006ac4 <_malloc_r+0xdc>
 8006acc:	2300      	movs	r3, #0
 8006ace:	6053      	str	r3, [r2, #4]
 8006ad0:	e7de      	b.n	8006a90 <_malloc_r+0xa8>
 8006ad2:	230c      	movs	r3, #12
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	6033      	str	r3, [r6, #0]
 8006ad8:	f000 f80c 	bl	8006af4 <__malloc_unlock>
 8006adc:	e794      	b.n	8006a08 <_malloc_r+0x20>
 8006ade:	6005      	str	r5, [r0, #0]
 8006ae0:	e7d6      	b.n	8006a90 <_malloc_r+0xa8>
 8006ae2:	bf00      	nop
 8006ae4:	200003f0 	.word	0x200003f0

08006ae8 <__malloc_lock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__malloc_lock+0x8>)
 8006aea:	f7ff bf10 	b.w	800690e <__retarget_lock_acquire_recursive>
 8006aee:	bf00      	nop
 8006af0:	200003e8 	.word	0x200003e8

08006af4 <__malloc_unlock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	@ (8006afc <__malloc_unlock+0x8>)
 8006af6:	f7ff bf0b 	b.w	8006910 <__retarget_lock_release_recursive>
 8006afa:	bf00      	nop
 8006afc:	200003e8 	.word	0x200003e8

08006b00 <__sfputc_r>:
 8006b00:	6893      	ldr	r3, [r2, #8]
 8006b02:	b410      	push	{r4}
 8006b04:	3b01      	subs	r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	6093      	str	r3, [r2, #8]
 8006b0a:	da07      	bge.n	8006b1c <__sfputc_r+0x1c>
 8006b0c:	6994      	ldr	r4, [r2, #24]
 8006b0e:	42a3      	cmp	r3, r4
 8006b10:	db01      	blt.n	8006b16 <__sfputc_r+0x16>
 8006b12:	290a      	cmp	r1, #10
 8006b14:	d102      	bne.n	8006b1c <__sfputc_r+0x1c>
 8006b16:	bc10      	pop	{r4}
 8006b18:	f7ff bdeb 	b.w	80066f2 <__swbuf_r>
 8006b1c:	6813      	ldr	r3, [r2, #0]
 8006b1e:	1c58      	adds	r0, r3, #1
 8006b20:	6010      	str	r0, [r2, #0]
 8006b22:	7019      	strb	r1, [r3, #0]
 8006b24:	4608      	mov	r0, r1
 8006b26:	bc10      	pop	{r4}
 8006b28:	4770      	bx	lr

08006b2a <__sfputs_r>:
 8006b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	460f      	mov	r7, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	18d5      	adds	r5, r2, r3
 8006b34:	42ac      	cmp	r4, r5
 8006b36:	d101      	bne.n	8006b3c <__sfputs_r+0x12>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	e007      	b.n	8006b4c <__sfputs_r+0x22>
 8006b3c:	463a      	mov	r2, r7
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b44:	f7ff ffdc 	bl	8006b00 <__sfputc_r>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d1f3      	bne.n	8006b34 <__sfputs_r+0xa>
 8006b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b50 <_vfiprintf_r>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	460d      	mov	r5, r1
 8006b56:	4614      	mov	r4, r2
 8006b58:	4698      	mov	r8, r3
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	b09d      	sub	sp, #116	@ 0x74
 8006b5e:	b118      	cbz	r0, 8006b68 <_vfiprintf_r+0x18>
 8006b60:	6a03      	ldr	r3, [r0, #32]
 8006b62:	b90b      	cbnz	r3, 8006b68 <_vfiprintf_r+0x18>
 8006b64:	f7ff fcd4 	bl	8006510 <__sinit>
 8006b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b6a:	07d9      	lsls	r1, r3, #31
 8006b6c:	d405      	bmi.n	8006b7a <_vfiprintf_r+0x2a>
 8006b6e:	89ab      	ldrh	r3, [r5, #12]
 8006b70:	059a      	lsls	r2, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_vfiprintf_r+0x2a>
 8006b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b76:	f7ff feca 	bl	800690e <__retarget_lock_acquire_recursive>
 8006b7a:	89ab      	ldrh	r3, [r5, #12]
 8006b7c:	071b      	lsls	r3, r3, #28
 8006b7e:	d501      	bpl.n	8006b84 <_vfiprintf_r+0x34>
 8006b80:	692b      	ldr	r3, [r5, #16]
 8006b82:	b99b      	cbnz	r3, 8006bac <_vfiprintf_r+0x5c>
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff fdf2 	bl	8006770 <__swsetup_r>
 8006b8c:	b170      	cbz	r0, 8006bac <_vfiprintf_r+0x5c>
 8006b8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b90:	07dc      	lsls	r4, r3, #31
 8006b92:	d504      	bpl.n	8006b9e <_vfiprintf_r+0x4e>
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	b01d      	add	sp, #116	@ 0x74
 8006b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	0598      	lsls	r0, r3, #22
 8006ba2:	d4f7      	bmi.n	8006b94 <_vfiprintf_r+0x44>
 8006ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ba6:	f7ff feb3 	bl	8006910 <__retarget_lock_release_recursive>
 8006baa:	e7f3      	b.n	8006b94 <_vfiprintf_r+0x44>
 8006bac:	2300      	movs	r3, #0
 8006bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bb6:	2330      	movs	r3, #48	@ 0x30
 8006bb8:	f04f 0901 	mov.w	r9, #1
 8006bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006d6c <_vfiprintf_r+0x21c>
 8006bc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bc8:	4623      	mov	r3, r4
 8006bca:	469a      	mov	sl, r3
 8006bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd0:	b10a      	cbz	r2, 8006bd6 <_vfiprintf_r+0x86>
 8006bd2:	2a25      	cmp	r2, #37	@ 0x25
 8006bd4:	d1f9      	bne.n	8006bca <_vfiprintf_r+0x7a>
 8006bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8006bda:	d00b      	beq.n	8006bf4 <_vfiprintf_r+0xa4>
 8006bdc:	465b      	mov	r3, fp
 8006bde:	4622      	mov	r2, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	4630      	mov	r0, r6
 8006be4:	f7ff ffa1 	bl	8006b2a <__sfputs_r>
 8006be8:	3001      	adds	r0, #1
 8006bea:	f000 80a7 	beq.w	8006d3c <_vfiprintf_r+0x1ec>
 8006bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf0:	445a      	add	r2, fp
 8006bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 809f 	beq.w	8006d3c <_vfiprintf_r+0x1ec>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f04f 32ff 	mov.w	r2, #4294967295
 8006c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c08:	f10a 0a01 	add.w	sl, sl, #1
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	9307      	str	r3, [sp, #28]
 8006c10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c14:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c16:	4654      	mov	r4, sl
 8006c18:	2205      	movs	r2, #5
 8006c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c1e:	4853      	ldr	r0, [pc, #332]	@ (8006d6c <_vfiprintf_r+0x21c>)
 8006c20:	f000 fbb0 	bl	8007384 <memchr>
 8006c24:	9a04      	ldr	r2, [sp, #16]
 8006c26:	b9d8      	cbnz	r0, 8006c60 <_vfiprintf_r+0x110>
 8006c28:	06d1      	lsls	r1, r2, #27
 8006c2a:	bf44      	itt	mi
 8006c2c:	2320      	movmi	r3, #32
 8006c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c32:	0713      	lsls	r3, r2, #28
 8006c34:	bf44      	itt	mi
 8006c36:	232b      	movmi	r3, #43	@ 0x2b
 8006c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c42:	d015      	beq.n	8006c70 <_vfiprintf_r+0x120>
 8006c44:	4654      	mov	r4, sl
 8006c46:	2000      	movs	r0, #0
 8006c48:	f04f 0c0a 	mov.w	ip, #10
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	4621      	mov	r1, r4
 8006c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c54:	3b30      	subs	r3, #48	@ 0x30
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	d94b      	bls.n	8006cf2 <_vfiprintf_r+0x1a2>
 8006c5a:	b1b0      	cbz	r0, 8006c8a <_vfiprintf_r+0x13a>
 8006c5c:	9207      	str	r2, [sp, #28]
 8006c5e:	e014      	b.n	8006c8a <_vfiprintf_r+0x13a>
 8006c60:	eba0 0308 	sub.w	r3, r0, r8
 8006c64:	fa09 f303 	lsl.w	r3, r9, r3
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	46a2      	mov	sl, r4
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	e7d2      	b.n	8006c16 <_vfiprintf_r+0xc6>
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	1d19      	adds	r1, r3, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	9103      	str	r1, [sp, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bfbb      	ittet	lt
 8006c7c:	425b      	neglt	r3, r3
 8006c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8006c82:	9307      	strge	r3, [sp, #28]
 8006c84:	9307      	strlt	r3, [sp, #28]
 8006c86:	bfb8      	it	lt
 8006c88:	9204      	strlt	r2, [sp, #16]
 8006c8a:	7823      	ldrb	r3, [r4, #0]
 8006c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c8e:	d10a      	bne.n	8006ca6 <_vfiprintf_r+0x156>
 8006c90:	7863      	ldrb	r3, [r4, #1]
 8006c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c94:	d132      	bne.n	8006cfc <_vfiprintf_r+0x1ac>
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	3402      	adds	r4, #2
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	9203      	str	r2, [sp, #12]
 8006ca0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ca4:	9305      	str	r3, [sp, #20]
 8006ca6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006d70 <_vfiprintf_r+0x220>
 8006caa:	2203      	movs	r2, #3
 8006cac:	4650      	mov	r0, sl
 8006cae:	7821      	ldrb	r1, [r4, #0]
 8006cb0:	f000 fb68 	bl	8007384 <memchr>
 8006cb4:	b138      	cbz	r0, 8006cc6 <_vfiprintf_r+0x176>
 8006cb6:	2240      	movs	r2, #64	@ 0x40
 8006cb8:	9b04      	ldr	r3, [sp, #16]
 8006cba:	eba0 000a 	sub.w	r0, r0, sl
 8006cbe:	4082      	lsls	r2, r0
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	3401      	adds	r4, #1
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cca:	2206      	movs	r2, #6
 8006ccc:	4829      	ldr	r0, [pc, #164]	@ (8006d74 <_vfiprintf_r+0x224>)
 8006cce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cd2:	f000 fb57 	bl	8007384 <memchr>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d03f      	beq.n	8006d5a <_vfiprintf_r+0x20a>
 8006cda:	4b27      	ldr	r3, [pc, #156]	@ (8006d78 <_vfiprintf_r+0x228>)
 8006cdc:	bb1b      	cbnz	r3, 8006d26 <_vfiprintf_r+0x1d6>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	3307      	adds	r3, #7
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	9303      	str	r3, [sp, #12]
 8006cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cec:	443b      	add	r3, r7
 8006cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cf0:	e76a      	b.n	8006bc8 <_vfiprintf_r+0x78>
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	2001      	movs	r0, #1
 8006cf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cfa:	e7a8      	b.n	8006c4e <_vfiprintf_r+0xfe>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f04f 0c0a 	mov.w	ip, #10
 8006d02:	4619      	mov	r1, r3
 8006d04:	3401      	adds	r4, #1
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d0e:	3a30      	subs	r2, #48	@ 0x30
 8006d10:	2a09      	cmp	r2, #9
 8006d12:	d903      	bls.n	8006d1c <_vfiprintf_r+0x1cc>
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0c6      	beq.n	8006ca6 <_vfiprintf_r+0x156>
 8006d18:	9105      	str	r1, [sp, #20]
 8006d1a:	e7c4      	b.n	8006ca6 <_vfiprintf_r+0x156>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	2301      	movs	r3, #1
 8006d20:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d24:	e7f0      	b.n	8006d08 <_vfiprintf_r+0x1b8>
 8006d26:	ab03      	add	r3, sp, #12
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4b13      	ldr	r3, [pc, #76]	@ (8006d7c <_vfiprintf_r+0x22c>)
 8006d30:	a904      	add	r1, sp, #16
 8006d32:	f3af 8000 	nop.w
 8006d36:	4607      	mov	r7, r0
 8006d38:	1c78      	adds	r0, r7, #1
 8006d3a:	d1d6      	bne.n	8006cea <_vfiprintf_r+0x19a>
 8006d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d3e:	07d9      	lsls	r1, r3, #31
 8006d40:	d405      	bmi.n	8006d4e <_vfiprintf_r+0x1fe>
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	059a      	lsls	r2, r3, #22
 8006d46:	d402      	bmi.n	8006d4e <_vfiprintf_r+0x1fe>
 8006d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d4a:	f7ff fde1 	bl	8006910 <__retarget_lock_release_recursive>
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	065b      	lsls	r3, r3, #25
 8006d52:	f53f af1f 	bmi.w	8006b94 <_vfiprintf_r+0x44>
 8006d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d58:	e71e      	b.n	8006b98 <_vfiprintf_r+0x48>
 8006d5a:	ab03      	add	r3, sp, #12
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	462a      	mov	r2, r5
 8006d60:	4630      	mov	r0, r6
 8006d62:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <_vfiprintf_r+0x22c>)
 8006d64:	a904      	add	r1, sp, #16
 8006d66:	f000 f87d 	bl	8006e64 <_printf_i>
 8006d6a:	e7e4      	b.n	8006d36 <_vfiprintf_r+0x1e6>
 8006d6c:	080075ee 	.word	0x080075ee
 8006d70:	080075f4 	.word	0x080075f4
 8006d74:	080075f8 	.word	0x080075f8
 8006d78:	00000000 	.word	0x00000000
 8006d7c:	08006b2b 	.word	0x08006b2b

08006d80 <_printf_common>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	4616      	mov	r6, r2
 8006d86:	4698      	mov	r8, r3
 8006d88:	688a      	ldr	r2, [r1, #8]
 8006d8a:	690b      	ldr	r3, [r1, #16]
 8006d8c:	4607      	mov	r7, r0
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	bfb8      	it	lt
 8006d92:	4613      	movlt	r3, r2
 8006d94:	6033      	str	r3, [r6, #0]
 8006d96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006da0:	b10a      	cbz	r2, 8006da6 <_printf_common+0x26>
 8006da2:	3301      	adds	r3, #1
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	0699      	lsls	r1, r3, #26
 8006daa:	bf42      	ittt	mi
 8006dac:	6833      	ldrmi	r3, [r6, #0]
 8006dae:	3302      	addmi	r3, #2
 8006db0:	6033      	strmi	r3, [r6, #0]
 8006db2:	6825      	ldr	r5, [r4, #0]
 8006db4:	f015 0506 	ands.w	r5, r5, #6
 8006db8:	d106      	bne.n	8006dc8 <_printf_common+0x48>
 8006dba:	f104 0a19 	add.w	sl, r4, #25
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	6832      	ldr	r2, [r6, #0]
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc2b      	bgt.n	8006e20 <_printf_common+0xa0>
 8006dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	3b00      	subs	r3, #0
 8006dd0:	bf18      	it	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	0692      	lsls	r2, r2, #26
 8006dd6:	d430      	bmi.n	8006e3a <_printf_common+0xba>
 8006dd8:	4641      	mov	r1, r8
 8006dda:	4638      	mov	r0, r7
 8006ddc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006de0:	47c8      	blx	r9
 8006de2:	3001      	adds	r0, #1
 8006de4:	d023      	beq.n	8006e2e <_printf_common+0xae>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	6922      	ldr	r2, [r4, #16]
 8006dea:	f003 0306 	and.w	r3, r3, #6
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	bf14      	ite	ne
 8006df2:	2500      	movne	r5, #0
 8006df4:	6833      	ldreq	r3, [r6, #0]
 8006df6:	f04f 0600 	mov.w	r6, #0
 8006dfa:	bf08      	it	eq
 8006dfc:	68e5      	ldreq	r5, [r4, #12]
 8006dfe:	f104 041a 	add.w	r4, r4, #26
 8006e02:	bf08      	it	eq
 8006e04:	1aed      	subeq	r5, r5, r3
 8006e06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e0a:	bf08      	it	eq
 8006e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e10:	4293      	cmp	r3, r2
 8006e12:	bfc4      	itt	gt
 8006e14:	1a9b      	subgt	r3, r3, r2
 8006e16:	18ed      	addgt	r5, r5, r3
 8006e18:	42b5      	cmp	r5, r6
 8006e1a:	d11a      	bne.n	8006e52 <_printf_common+0xd2>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e008      	b.n	8006e32 <_printf_common+0xb2>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4652      	mov	r2, sl
 8006e24:	4641      	mov	r1, r8
 8006e26:	4638      	mov	r0, r7
 8006e28:	47c8      	blx	r9
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d103      	bne.n	8006e36 <_printf_common+0xb6>
 8006e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e36:	3501      	adds	r5, #1
 8006e38:	e7c1      	b.n	8006dbe <_printf_common+0x3e>
 8006e3a:	2030      	movs	r0, #48	@ 0x30
 8006e3c:	18e1      	adds	r1, r4, r3
 8006e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e48:	4422      	add	r2, r4
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e50:	e7c2      	b.n	8006dd8 <_printf_common+0x58>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4622      	mov	r2, r4
 8006e56:	4641      	mov	r1, r8
 8006e58:	4638      	mov	r0, r7
 8006e5a:	47c8      	blx	r9
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d0e6      	beq.n	8006e2e <_printf_common+0xae>
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7d9      	b.n	8006e18 <_printf_common+0x98>

08006e64 <_printf_i>:
 8006e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	7e0f      	ldrb	r7, [r1, #24]
 8006e6a:	4691      	mov	r9, r2
 8006e6c:	2f78      	cmp	r7, #120	@ 0x78
 8006e6e:	4680      	mov	r8, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	469a      	mov	sl, r3
 8006e74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e7a:	d807      	bhi.n	8006e8c <_printf_i+0x28>
 8006e7c:	2f62      	cmp	r7, #98	@ 0x62
 8006e7e:	d80a      	bhi.n	8006e96 <_printf_i+0x32>
 8006e80:	2f00      	cmp	r7, #0
 8006e82:	f000 80d3 	beq.w	800702c <_printf_i+0x1c8>
 8006e86:	2f58      	cmp	r7, #88	@ 0x58
 8006e88:	f000 80ba 	beq.w	8007000 <_printf_i+0x19c>
 8006e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e94:	e03a      	b.n	8006f0c <_printf_i+0xa8>
 8006e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e9a:	2b15      	cmp	r3, #21
 8006e9c:	d8f6      	bhi.n	8006e8c <_printf_i+0x28>
 8006e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8006ea4 <_printf_i+0x40>)
 8006ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ea4:	08006efd 	.word	0x08006efd
 8006ea8:	08006f11 	.word	0x08006f11
 8006eac:	08006e8d 	.word	0x08006e8d
 8006eb0:	08006e8d 	.word	0x08006e8d
 8006eb4:	08006e8d 	.word	0x08006e8d
 8006eb8:	08006e8d 	.word	0x08006e8d
 8006ebc:	08006f11 	.word	0x08006f11
 8006ec0:	08006e8d 	.word	0x08006e8d
 8006ec4:	08006e8d 	.word	0x08006e8d
 8006ec8:	08006e8d 	.word	0x08006e8d
 8006ecc:	08006e8d 	.word	0x08006e8d
 8006ed0:	08007013 	.word	0x08007013
 8006ed4:	08006f3b 	.word	0x08006f3b
 8006ed8:	08006fcd 	.word	0x08006fcd
 8006edc:	08006e8d 	.word	0x08006e8d
 8006ee0:	08006e8d 	.word	0x08006e8d
 8006ee4:	08007035 	.word	0x08007035
 8006ee8:	08006e8d 	.word	0x08006e8d
 8006eec:	08006f3b 	.word	0x08006f3b
 8006ef0:	08006e8d 	.word	0x08006e8d
 8006ef4:	08006e8d 	.word	0x08006e8d
 8006ef8:	08006fd5 	.word	0x08006fd5
 8006efc:	6833      	ldr	r3, [r6, #0]
 8006efe:	1d1a      	adds	r2, r3, #4
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6032      	str	r2, [r6, #0]
 8006f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e09e      	b.n	800704e <_printf_i+0x1ea>
 8006f10:	6833      	ldr	r3, [r6, #0]
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	1d19      	adds	r1, r3, #4
 8006f16:	6031      	str	r1, [r6, #0]
 8006f18:	0606      	lsls	r6, r0, #24
 8006f1a:	d501      	bpl.n	8006f20 <_printf_i+0xbc>
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	e003      	b.n	8006f28 <_printf_i+0xc4>
 8006f20:	0645      	lsls	r5, r0, #25
 8006f22:	d5fb      	bpl.n	8006f1c <_printf_i+0xb8>
 8006f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	da03      	bge.n	8006f34 <_printf_i+0xd0>
 8006f2c:	232d      	movs	r3, #45	@ 0x2d
 8006f2e:	426d      	negs	r5, r5
 8006f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f34:	230a      	movs	r3, #10
 8006f36:	4859      	ldr	r0, [pc, #356]	@ (800709c <_printf_i+0x238>)
 8006f38:	e011      	b.n	8006f5e <_printf_i+0xfa>
 8006f3a:	6821      	ldr	r1, [r4, #0]
 8006f3c:	6833      	ldr	r3, [r6, #0]
 8006f3e:	0608      	lsls	r0, r1, #24
 8006f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f44:	d402      	bmi.n	8006f4c <_printf_i+0xe8>
 8006f46:	0649      	lsls	r1, r1, #25
 8006f48:	bf48      	it	mi
 8006f4a:	b2ad      	uxthmi	r5, r5
 8006f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f4e:	6033      	str	r3, [r6, #0]
 8006f50:	bf14      	ite	ne
 8006f52:	230a      	movne	r3, #10
 8006f54:	2308      	moveq	r3, #8
 8006f56:	4851      	ldr	r0, [pc, #324]	@ (800709c <_printf_i+0x238>)
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f5e:	6866      	ldr	r6, [r4, #4]
 8006f60:	2e00      	cmp	r6, #0
 8006f62:	bfa8      	it	ge
 8006f64:	6821      	ldrge	r1, [r4, #0]
 8006f66:	60a6      	str	r6, [r4, #8]
 8006f68:	bfa4      	itt	ge
 8006f6a:	f021 0104 	bicge.w	r1, r1, #4
 8006f6e:	6021      	strge	r1, [r4, #0]
 8006f70:	b90d      	cbnz	r5, 8006f76 <_printf_i+0x112>
 8006f72:	2e00      	cmp	r6, #0
 8006f74:	d04b      	beq.n	800700e <_printf_i+0x1aa>
 8006f76:	4616      	mov	r6, r2
 8006f78:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f7c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f80:	5dc7      	ldrb	r7, [r0, r7]
 8006f82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f86:	462f      	mov	r7, r5
 8006f88:	42bb      	cmp	r3, r7
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	d9f4      	bls.n	8006f78 <_printf_i+0x114>
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d10b      	bne.n	8006faa <_printf_i+0x146>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	07df      	lsls	r7, r3, #31
 8006f96:	d508      	bpl.n	8006faa <_printf_i+0x146>
 8006f98:	6923      	ldr	r3, [r4, #16]
 8006f9a:	6861      	ldr	r1, [r4, #4]
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	bfde      	ittt	le
 8006fa0:	2330      	movle	r3, #48	@ 0x30
 8006fa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006faa:	1b92      	subs	r2, r2, r6
 8006fac:	6122      	str	r2, [r4, #16]
 8006fae:	464b      	mov	r3, r9
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	f8cd a000 	str.w	sl, [sp]
 8006fb8:	aa03      	add	r2, sp, #12
 8006fba:	f7ff fee1 	bl	8006d80 <_printf_common>
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d14a      	bne.n	8007058 <_printf_i+0x1f4>
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	b004      	add	sp, #16
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	f043 0320 	orr.w	r3, r3, #32
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	2778      	movs	r7, #120	@ 0x78
 8006fd6:	4832      	ldr	r0, [pc, #200]	@ (80070a0 <_printf_i+0x23c>)
 8006fd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	6831      	ldr	r1, [r6, #0]
 8006fe0:	061f      	lsls	r7, r3, #24
 8006fe2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fe6:	d402      	bmi.n	8006fee <_printf_i+0x18a>
 8006fe8:	065f      	lsls	r7, r3, #25
 8006fea:	bf48      	it	mi
 8006fec:	b2ad      	uxthmi	r5, r5
 8006fee:	6031      	str	r1, [r6, #0]
 8006ff0:	07d9      	lsls	r1, r3, #31
 8006ff2:	bf44      	itt	mi
 8006ff4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ff8:	6023      	strmi	r3, [r4, #0]
 8006ffa:	b11d      	cbz	r5, 8007004 <_printf_i+0x1a0>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	e7ab      	b.n	8006f58 <_printf_i+0xf4>
 8007000:	4826      	ldr	r0, [pc, #152]	@ (800709c <_printf_i+0x238>)
 8007002:	e7e9      	b.n	8006fd8 <_printf_i+0x174>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	f023 0320 	bic.w	r3, r3, #32
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	e7f6      	b.n	8006ffc <_printf_i+0x198>
 800700e:	4616      	mov	r6, r2
 8007010:	e7bd      	b.n	8006f8e <_printf_i+0x12a>
 8007012:	6833      	ldr	r3, [r6, #0]
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	1d18      	adds	r0, r3, #4
 8007018:	6961      	ldr	r1, [r4, #20]
 800701a:	6030      	str	r0, [r6, #0]
 800701c:	062e      	lsls	r6, r5, #24
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	d501      	bpl.n	8007026 <_printf_i+0x1c2>
 8007022:	6019      	str	r1, [r3, #0]
 8007024:	e002      	b.n	800702c <_printf_i+0x1c8>
 8007026:	0668      	lsls	r0, r5, #25
 8007028:	d5fb      	bpl.n	8007022 <_printf_i+0x1be>
 800702a:	8019      	strh	r1, [r3, #0]
 800702c:	2300      	movs	r3, #0
 800702e:	4616      	mov	r6, r2
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	e7bc      	b.n	8006fae <_printf_i+0x14a>
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	2100      	movs	r1, #0
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	6032      	str	r2, [r6, #0]
 800703c:	681e      	ldr	r6, [r3, #0]
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	4630      	mov	r0, r6
 8007042:	f000 f99f 	bl	8007384 <memchr>
 8007046:	b108      	cbz	r0, 800704c <_printf_i+0x1e8>
 8007048:	1b80      	subs	r0, r0, r6
 800704a:	6060      	str	r0, [r4, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	2300      	movs	r3, #0
 8007052:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007056:	e7aa      	b.n	8006fae <_printf_i+0x14a>
 8007058:	4632      	mov	r2, r6
 800705a:	4649      	mov	r1, r9
 800705c:	4640      	mov	r0, r8
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	47d0      	blx	sl
 8007062:	3001      	adds	r0, #1
 8007064:	d0ad      	beq.n	8006fc2 <_printf_i+0x15e>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	079b      	lsls	r3, r3, #30
 800706a:	d413      	bmi.n	8007094 <_printf_i+0x230>
 800706c:	68e0      	ldr	r0, [r4, #12]
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	4298      	cmp	r0, r3
 8007072:	bfb8      	it	lt
 8007074:	4618      	movlt	r0, r3
 8007076:	e7a6      	b.n	8006fc6 <_printf_i+0x162>
 8007078:	2301      	movs	r3, #1
 800707a:	4632      	mov	r2, r6
 800707c:	4649      	mov	r1, r9
 800707e:	4640      	mov	r0, r8
 8007080:	47d0      	blx	sl
 8007082:	3001      	adds	r0, #1
 8007084:	d09d      	beq.n	8006fc2 <_printf_i+0x15e>
 8007086:	3501      	adds	r5, #1
 8007088:	68e3      	ldr	r3, [r4, #12]
 800708a:	9903      	ldr	r1, [sp, #12]
 800708c:	1a5b      	subs	r3, r3, r1
 800708e:	42ab      	cmp	r3, r5
 8007090:	dcf2      	bgt.n	8007078 <_printf_i+0x214>
 8007092:	e7eb      	b.n	800706c <_printf_i+0x208>
 8007094:	2500      	movs	r5, #0
 8007096:	f104 0619 	add.w	r6, r4, #25
 800709a:	e7f5      	b.n	8007088 <_printf_i+0x224>
 800709c:	080075ff 	.word	0x080075ff
 80070a0:	08007610 	.word	0x08007610

080070a4 <__sflush_r>:
 80070a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	0716      	lsls	r6, r2, #28
 80070ac:	4605      	mov	r5, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	d454      	bmi.n	800715c <__sflush_r+0xb8>
 80070b2:	684b      	ldr	r3, [r1, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dc02      	bgt.n	80070be <__sflush_r+0x1a>
 80070b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dd48      	ble.n	8007150 <__sflush_r+0xac>
 80070be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070c0:	2e00      	cmp	r6, #0
 80070c2:	d045      	beq.n	8007150 <__sflush_r+0xac>
 80070c4:	2300      	movs	r3, #0
 80070c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80070ca:	682f      	ldr	r7, [r5, #0]
 80070cc:	6a21      	ldr	r1, [r4, #32]
 80070ce:	602b      	str	r3, [r5, #0]
 80070d0:	d030      	beq.n	8007134 <__sflush_r+0x90>
 80070d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	0759      	lsls	r1, r3, #29
 80070d8:	d505      	bpl.n	80070e6 <__sflush_r+0x42>
 80070da:	6863      	ldr	r3, [r4, #4]
 80070dc:	1ad2      	subs	r2, r2, r3
 80070de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070e0:	b10b      	cbz	r3, 80070e6 <__sflush_r+0x42>
 80070e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070e4:	1ad2      	subs	r2, r2, r3
 80070e6:	2300      	movs	r3, #0
 80070e8:	4628      	mov	r0, r5
 80070ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80070ec:	6a21      	ldr	r1, [r4, #32]
 80070ee:	47b0      	blx	r6
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	89a3      	ldrh	r3, [r4, #12]
 80070f4:	d106      	bne.n	8007104 <__sflush_r+0x60>
 80070f6:	6829      	ldr	r1, [r5, #0]
 80070f8:	291d      	cmp	r1, #29
 80070fa:	d82b      	bhi.n	8007154 <__sflush_r+0xb0>
 80070fc:	4a28      	ldr	r2, [pc, #160]	@ (80071a0 <__sflush_r+0xfc>)
 80070fe:	410a      	asrs	r2, r1
 8007100:	07d6      	lsls	r6, r2, #31
 8007102:	d427      	bmi.n	8007154 <__sflush_r+0xb0>
 8007104:	2200      	movs	r2, #0
 8007106:	6062      	str	r2, [r4, #4]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	04d9      	lsls	r1, r3, #19
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	d504      	bpl.n	800711a <__sflush_r+0x76>
 8007110:	1c42      	adds	r2, r0, #1
 8007112:	d101      	bne.n	8007118 <__sflush_r+0x74>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b903      	cbnz	r3, 800711a <__sflush_r+0x76>
 8007118:	6560      	str	r0, [r4, #84]	@ 0x54
 800711a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800711c:	602f      	str	r7, [r5, #0]
 800711e:	b1b9      	cbz	r1, 8007150 <__sflush_r+0xac>
 8007120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007124:	4299      	cmp	r1, r3
 8007126:	d002      	beq.n	800712e <__sflush_r+0x8a>
 8007128:	4628      	mov	r0, r5
 800712a:	f7ff fbf3 	bl	8006914 <_free_r>
 800712e:	2300      	movs	r3, #0
 8007130:	6363      	str	r3, [r4, #52]	@ 0x34
 8007132:	e00d      	b.n	8007150 <__sflush_r+0xac>
 8007134:	2301      	movs	r3, #1
 8007136:	4628      	mov	r0, r5
 8007138:	47b0      	blx	r6
 800713a:	4602      	mov	r2, r0
 800713c:	1c50      	adds	r0, r2, #1
 800713e:	d1c9      	bne.n	80070d4 <__sflush_r+0x30>
 8007140:	682b      	ldr	r3, [r5, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0c6      	beq.n	80070d4 <__sflush_r+0x30>
 8007146:	2b1d      	cmp	r3, #29
 8007148:	d001      	beq.n	800714e <__sflush_r+0xaa>
 800714a:	2b16      	cmp	r3, #22
 800714c:	d11d      	bne.n	800718a <__sflush_r+0xe6>
 800714e:	602f      	str	r7, [r5, #0]
 8007150:	2000      	movs	r0, #0
 8007152:	e021      	b.n	8007198 <__sflush_r+0xf4>
 8007154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007158:	b21b      	sxth	r3, r3
 800715a:	e01a      	b.n	8007192 <__sflush_r+0xee>
 800715c:	690f      	ldr	r7, [r1, #16]
 800715e:	2f00      	cmp	r7, #0
 8007160:	d0f6      	beq.n	8007150 <__sflush_r+0xac>
 8007162:	0793      	lsls	r3, r2, #30
 8007164:	bf18      	it	ne
 8007166:	2300      	movne	r3, #0
 8007168:	680e      	ldr	r6, [r1, #0]
 800716a:	bf08      	it	eq
 800716c:	694b      	ldreq	r3, [r1, #20]
 800716e:	1bf6      	subs	r6, r6, r7
 8007170:	600f      	str	r7, [r1, #0]
 8007172:	608b      	str	r3, [r1, #8]
 8007174:	2e00      	cmp	r6, #0
 8007176:	ddeb      	ble.n	8007150 <__sflush_r+0xac>
 8007178:	4633      	mov	r3, r6
 800717a:	463a      	mov	r2, r7
 800717c:	4628      	mov	r0, r5
 800717e:	6a21      	ldr	r1, [r4, #32]
 8007180:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007184:	47e0      	blx	ip
 8007186:	2800      	cmp	r0, #0
 8007188:	dc07      	bgt.n	800719a <__sflush_r+0xf6>
 800718a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007192:	f04f 30ff 	mov.w	r0, #4294967295
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719a:	4407      	add	r7, r0
 800719c:	1a36      	subs	r6, r6, r0
 800719e:	e7e9      	b.n	8007174 <__sflush_r+0xd0>
 80071a0:	dfbffffe 	.word	0xdfbffffe

080071a4 <_fflush_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	4605      	mov	r5, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	b913      	cbnz	r3, 80071b4 <_fflush_r+0x10>
 80071ae:	2500      	movs	r5, #0
 80071b0:	4628      	mov	r0, r5
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	b118      	cbz	r0, 80071be <_fflush_r+0x1a>
 80071b6:	6a03      	ldr	r3, [r0, #32]
 80071b8:	b90b      	cbnz	r3, 80071be <_fflush_r+0x1a>
 80071ba:	f7ff f9a9 	bl	8006510 <__sinit>
 80071be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f3      	beq.n	80071ae <_fflush_r+0xa>
 80071c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071c8:	07d0      	lsls	r0, r2, #31
 80071ca:	d404      	bmi.n	80071d6 <_fflush_r+0x32>
 80071cc:	0599      	lsls	r1, r3, #22
 80071ce:	d402      	bmi.n	80071d6 <_fflush_r+0x32>
 80071d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071d2:	f7ff fb9c 	bl	800690e <__retarget_lock_acquire_recursive>
 80071d6:	4628      	mov	r0, r5
 80071d8:	4621      	mov	r1, r4
 80071da:	f7ff ff63 	bl	80070a4 <__sflush_r>
 80071de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e0:	4605      	mov	r5, r0
 80071e2:	07da      	lsls	r2, r3, #31
 80071e4:	d4e4      	bmi.n	80071b0 <_fflush_r+0xc>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	059b      	lsls	r3, r3, #22
 80071ea:	d4e1      	bmi.n	80071b0 <_fflush_r+0xc>
 80071ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ee:	f7ff fb8f 	bl	8006910 <__retarget_lock_release_recursive>
 80071f2:	e7dd      	b.n	80071b0 <_fflush_r+0xc>

080071f4 <__swhatbuf_r>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	460c      	mov	r4, r1
 80071f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fc:	4615      	mov	r5, r2
 80071fe:	2900      	cmp	r1, #0
 8007200:	461e      	mov	r6, r3
 8007202:	b096      	sub	sp, #88	@ 0x58
 8007204:	da0c      	bge.n	8007220 <__swhatbuf_r+0x2c>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	2100      	movs	r1, #0
 800720a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800720e:	bf14      	ite	ne
 8007210:	2340      	movne	r3, #64	@ 0x40
 8007212:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007216:	2000      	movs	r0, #0
 8007218:	6031      	str	r1, [r6, #0]
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	b016      	add	sp, #88	@ 0x58
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	466a      	mov	r2, sp
 8007222:	f000 f87d 	bl	8007320 <_fstat_r>
 8007226:	2800      	cmp	r0, #0
 8007228:	dbed      	blt.n	8007206 <__swhatbuf_r+0x12>
 800722a:	9901      	ldr	r1, [sp, #4]
 800722c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007230:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007234:	4259      	negs	r1, r3
 8007236:	4159      	adcs	r1, r3
 8007238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800723c:	e7eb      	b.n	8007216 <__swhatbuf_r+0x22>

0800723e <__smakebuf_r>:
 800723e:	898b      	ldrh	r3, [r1, #12]
 8007240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007242:	079d      	lsls	r5, r3, #30
 8007244:	4606      	mov	r6, r0
 8007246:	460c      	mov	r4, r1
 8007248:	d507      	bpl.n	800725a <__smakebuf_r+0x1c>
 800724a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	6123      	str	r3, [r4, #16]
 8007252:	2301      	movs	r3, #1
 8007254:	6163      	str	r3, [r4, #20]
 8007256:	b003      	add	sp, #12
 8007258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800725a:	466a      	mov	r2, sp
 800725c:	ab01      	add	r3, sp, #4
 800725e:	f7ff ffc9 	bl	80071f4 <__swhatbuf_r>
 8007262:	9f00      	ldr	r7, [sp, #0]
 8007264:	4605      	mov	r5, r0
 8007266:	4639      	mov	r1, r7
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff fbbd 	bl	80069e8 <_malloc_r>
 800726e:	b948      	cbnz	r0, 8007284 <__smakebuf_r+0x46>
 8007270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007274:	059a      	lsls	r2, r3, #22
 8007276:	d4ee      	bmi.n	8007256 <__smakebuf_r+0x18>
 8007278:	f023 0303 	bic.w	r3, r3, #3
 800727c:	f043 0302 	orr.w	r3, r3, #2
 8007280:	81a3      	strh	r3, [r4, #12]
 8007282:	e7e2      	b.n	800724a <__smakebuf_r+0xc>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800728a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	9b01      	ldr	r3, [sp, #4]
 8007292:	6020      	str	r0, [r4, #0]
 8007294:	b15b      	cbz	r3, 80072ae <__smakebuf_r+0x70>
 8007296:	4630      	mov	r0, r6
 8007298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800729c:	f000 f852 	bl	8007344 <_isatty_r>
 80072a0:	b128      	cbz	r0, 80072ae <__smakebuf_r+0x70>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f023 0303 	bic.w	r3, r3, #3
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	431d      	orrs	r5, r3
 80072b2:	81a5      	strh	r5, [r4, #12]
 80072b4:	e7cf      	b.n	8007256 <__smakebuf_r+0x18>

080072b6 <_putc_r>:
 80072b6:	b570      	push	{r4, r5, r6, lr}
 80072b8:	460d      	mov	r5, r1
 80072ba:	4614      	mov	r4, r2
 80072bc:	4606      	mov	r6, r0
 80072be:	b118      	cbz	r0, 80072c8 <_putc_r+0x12>
 80072c0:	6a03      	ldr	r3, [r0, #32]
 80072c2:	b90b      	cbnz	r3, 80072c8 <_putc_r+0x12>
 80072c4:	f7ff f924 	bl	8006510 <__sinit>
 80072c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072ca:	07d8      	lsls	r0, r3, #31
 80072cc:	d405      	bmi.n	80072da <_putc_r+0x24>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	0599      	lsls	r1, r3, #22
 80072d2:	d402      	bmi.n	80072da <_putc_r+0x24>
 80072d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072d6:	f7ff fb1a 	bl	800690e <__retarget_lock_acquire_recursive>
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	3b01      	subs	r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	60a3      	str	r3, [r4, #8]
 80072e2:	da05      	bge.n	80072f0 <_putc_r+0x3a>
 80072e4:	69a2      	ldr	r2, [r4, #24]
 80072e6:	4293      	cmp	r3, r2
 80072e8:	db12      	blt.n	8007310 <_putc_r+0x5a>
 80072ea:	b2eb      	uxtb	r3, r5
 80072ec:	2b0a      	cmp	r3, #10
 80072ee:	d00f      	beq.n	8007310 <_putc_r+0x5a>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	701d      	strb	r5, [r3, #0]
 80072f8:	b2ed      	uxtb	r5, r5
 80072fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072fc:	07da      	lsls	r2, r3, #31
 80072fe:	d405      	bmi.n	800730c <_putc_r+0x56>
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	059b      	lsls	r3, r3, #22
 8007304:	d402      	bmi.n	800730c <_putc_r+0x56>
 8007306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007308:	f7ff fb02 	bl	8006910 <__retarget_lock_release_recursive>
 800730c:	4628      	mov	r0, r5
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	4629      	mov	r1, r5
 8007312:	4622      	mov	r2, r4
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff f9ec 	bl	80066f2 <__swbuf_r>
 800731a:	4605      	mov	r5, r0
 800731c:	e7ed      	b.n	80072fa <_putc_r+0x44>
	...

08007320 <_fstat_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	2300      	movs	r3, #0
 8007324:	4d06      	ldr	r5, [pc, #24]	@ (8007340 <_fstat_r+0x20>)
 8007326:	4604      	mov	r4, r0
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	f7fa f8c9 	bl	80014c4 <_fstat>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	d102      	bne.n	800733c <_fstat_r+0x1c>
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	b103      	cbz	r3, 800733c <_fstat_r+0x1c>
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	bd38      	pop	{r3, r4, r5, pc}
 800733e:	bf00      	nop
 8007340:	200003e4 	.word	0x200003e4

08007344 <_isatty_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	2300      	movs	r3, #0
 8007348:	4d05      	ldr	r5, [pc, #20]	@ (8007360 <_isatty_r+0x1c>)
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	602b      	str	r3, [r5, #0]
 8007350:	f7fa f8c7 	bl	80014e2 <_isatty>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_isatty_r+0x1a>
 8007358:	682b      	ldr	r3, [r5, #0]
 800735a:	b103      	cbz	r3, 800735e <_isatty_r+0x1a>
 800735c:	6023      	str	r3, [r4, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	200003e4 	.word	0x200003e4

08007364 <_sbrk_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	2300      	movs	r3, #0
 8007368:	4d05      	ldr	r5, [pc, #20]	@ (8007380 <_sbrk_r+0x1c>)
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	602b      	str	r3, [r5, #0]
 8007370:	f7fa f8ce 	bl	8001510 <_sbrk>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_sbrk_r+0x1a>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_sbrk_r+0x1a>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	200003e4 	.word	0x200003e4

08007384 <memchr>:
 8007384:	4603      	mov	r3, r0
 8007386:	b510      	push	{r4, lr}
 8007388:	b2c9      	uxtb	r1, r1
 800738a:	4402      	add	r2, r0
 800738c:	4293      	cmp	r3, r2
 800738e:	4618      	mov	r0, r3
 8007390:	d101      	bne.n	8007396 <memchr+0x12>
 8007392:	2000      	movs	r0, #0
 8007394:	e003      	b.n	800739e <memchr+0x1a>
 8007396:	7804      	ldrb	r4, [r0, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	428c      	cmp	r4, r1
 800739c:	d1f6      	bne.n	800738c <memchr+0x8>
 800739e:	bd10      	pop	{r4, pc}

080073a0 <_init>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr

080073ac <_fini>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr
