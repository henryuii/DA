
PN532_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000636c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066dc  080066dc  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  080066dc  080066dc  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066dc  080066dc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000068  0800674c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  0800674c  000083fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcb4  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224a  00000000  00000000  00015d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00017f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a53  00000000  00000000  00018cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cc5  00000000  00000000  00019723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010542  00000000  00000000  000323e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089430  00000000  00000000  0004292a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbd5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f14  00000000  00000000  000cbda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000cfcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08006460 	.word	0x08006460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08006460 	.word	0x08006460

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f975 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8af 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f981 	bl	8000460 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f91f 	bl	80003a0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f953 	bl	800040c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000166:	f000 f8ed 	bl	8000344 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    PN532_SPI_Init(&pn532);
 800016a:	4848      	ldr	r0, [pc, #288]	@ (800028c <main+0x140>)
 800016c:	f000 fef8 	bl	8000f60 <PN532_SPI_Init>

    PN532_GetFirmwareVersion(&pn532, buff);
 8000170:	4947      	ldr	r1, [pc, #284]	@ (8000290 <main+0x144>)
 8000172:	4846      	ldr	r0, [pc, #280]	@ (800028c <main+0x140>)
 8000174:	f000 fd06 	bl	8000b84 <PN532_GetFirmwareVersion>
    if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 8000178:	4945      	ldr	r1, [pc, #276]	@ (8000290 <main+0x144>)
 800017a:	4844      	ldr	r0, [pc, #272]	@ (800028c <main+0x140>)
 800017c:	f000 fd02 	bl	8000b84 <PN532_GetFirmwareVersion>
 8000180:	4603      	mov	r3, r0
 8000182:	2b00      	cmp	r3, #0
 8000184:	d10f      	bne.n	80001a6 <main+0x5a>
      printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8000186:	4b42      	ldr	r3, [pc, #264]	@ (8000290 <main+0x144>)
 8000188:	785b      	ldrb	r3, [r3, #1]
 800018a:	4619      	mov	r1, r3
 800018c:	4b40      	ldr	r3, [pc, #256]	@ (8000290 <main+0x144>)
 800018e:	789b      	ldrb	r3, [r3, #2]
 8000190:	461a      	mov	r2, r3
 8000192:	4840      	ldr	r0, [pc, #256]	@ (8000294 <main+0x148>)
 8000194:	f005 fa52 	bl	800563c <iprintf>
    } else {
      return -1;
    }
    PN532_SamConfiguration(&pn532);
 8000198:	483c      	ldr	r0, [pc, #240]	@ (800028c <main+0x140>)
 800019a:	f000 fd17 	bl	8000bcc <PN532_SamConfiguration>
    printf("Waiting for RFID/NFC card...\r\n");
 800019e:	483e      	ldr	r0, [pc, #248]	@ (8000298 <main+0x14c>)
 80001a0:	f005 fabc 	bl	800571c <puts>
 80001a4:	e002      	b.n	80001ac <main+0x60>
      return -1;
 80001a6:	f04f 33ff 	mov.w	r3, #4294967295
 80001aa:	e06b      	b.n	8000284 <main+0x138>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001b0:	2200      	movs	r2, #0
 80001b2:	493a      	ldr	r1, [pc, #232]	@ (800029c <main+0x150>)
 80001b4:	4835      	ldr	r0, [pc, #212]	@ (800028c <main+0x140>)
 80001b6:	f000 fd2b 	bl	8000c10 <PN532_ReadPassiveTarget>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a38      	ldr	r2, [pc, #224]	@ (80002a0 <main+0x154>)
 80001be:	6013      	str	r3, [r2, #0]
	      if (uid_len == PN532_STATUS_ERROR) {
 80001c0:	4b37      	ldr	r3, [pc, #220]	@ (80002a0 <main+0x154>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001c8:	d103      	bne.n	80001d2 <main+0x86>
	        printf(".");
 80001ca:	202e      	movs	r0, #46	@ 0x2e
 80001cc:	f005 fa48 	bl	8005660 <putchar>
 80001d0:	e017      	b.n	8000202 <main+0xb6>
	      } else {
	        printf("Found card with UID: ");
 80001d2:	4834      	ldr	r0, [pc, #208]	@ (80002a4 <main+0x158>)
 80001d4:	f005 fa32 	bl	800563c <iprintf>
	        for (uint8_t i = 0; i < uid_len; i++) {
 80001d8:	2300      	movs	r3, #0
 80001da:	71fb      	strb	r3, [r7, #7]
 80001dc:	e009      	b.n	80001f2 <main+0xa6>
	          printf("%02x ", uid[i]);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a2e      	ldr	r2, [pc, #184]	@ (800029c <main+0x150>)
 80001e2:	5cd3      	ldrb	r3, [r2, r3]
 80001e4:	4619      	mov	r1, r3
 80001e6:	4830      	ldr	r0, [pc, #192]	@ (80002a8 <main+0x15c>)
 80001e8:	f005 fa28 	bl	800563c <iprintf>
	        for (uint8_t i = 0; i < uid_len; i++) {
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	3301      	adds	r3, #1
 80001f0:	71fb      	strb	r3, [r7, #7]
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	4b2a      	ldr	r3, [pc, #168]	@ (80002a0 <main+0x154>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	dbf0      	blt.n	80001de <main+0x92>
	        }
	        printf("\r\n");
 80001fc:	482b      	ldr	r0, [pc, #172]	@ (80002ac <main+0x160>)
 80001fe:	f005 fa8d 	bl	800571c <puts>
	      }

	      	  memcpy(CARDID, uid , 5);
 8000202:	4b2b      	ldr	r3, [pc, #172]	@ (80002b0 <main+0x164>)
 8000204:	4a25      	ldr	r2, [pc, #148]	@ (800029c <main+0x150>)
 8000206:	e892 0003 	ldmia.w	r2, {r0, r1}
 800020a:	6018      	str	r0, [r3, #0]
 800020c:	3304      	adds	r3, #4
 800020e:	7019      	strb	r1, [r3, #0]
	      	  if((CARDID[0]==172) && (CARDID[1]==44) && (CARDID[2]==5) && (CARDID[3]==4))
 8000210:	4b27      	ldr	r3, [pc, #156]	@ (80002b0 <main+0x164>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2bac      	cmp	r3, #172	@ 0xac
 8000216:	d114      	bne.n	8000242 <main+0xf6>
 8000218:	4b25      	ldr	r3, [pc, #148]	@ (80002b0 <main+0x164>)
 800021a:	785b      	ldrb	r3, [r3, #1]
 800021c:	2b2c      	cmp	r3, #44	@ 0x2c
 800021e:	d110      	bne.n	8000242 <main+0xf6>
 8000220:	4b23      	ldr	r3, [pc, #140]	@ (80002b0 <main+0x164>)
 8000222:	789b      	ldrb	r3, [r3, #2]
 8000224:	2b05      	cmp	r3, #5
 8000226:	d10c      	bne.n	8000242 <main+0xf6>
 8000228:	4b21      	ldr	r3, [pc, #132]	@ (80002b0 <main+0x164>)
 800022a:	78db      	ldrb	r3, [r3, #3]
 800022c:	2b04      	cmp	r3, #4
 800022e:	d108      	bne.n	8000242 <main+0xf6>
	      	  {
	      		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // nhay led tren chan 13
 8000230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000234:	481f      	ldr	r0, [pc, #124]	@ (80002b4 <main+0x168>)
 8000236:	f001 fcf3 	bl	8001c20 <HAL_GPIO_TogglePin>
	      		  HAL_Delay(100);
 800023a:	2064      	movs	r0, #100	@ 0x64
 800023c:	f001 f962 	bl	8001504 <HAL_Delay>
 8000240:	e01f      	b.n	8000282 <main+0x136>
	      	  }
	      	  else if((CARDID[0]==131) && (CARDID[1]==43) && (CARDID[2]==201) && (CARDID[3]==1))
 8000242:	4b1b      	ldr	r3, [pc, #108]	@ (80002b0 <main+0x164>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b83      	cmp	r3, #131	@ 0x83
 8000248:	d115      	bne.n	8000276 <main+0x12a>
 800024a:	4b19      	ldr	r3, [pc, #100]	@ (80002b0 <main+0x164>)
 800024c:	785b      	ldrb	r3, [r3, #1]
 800024e:	2b2b      	cmp	r3, #43	@ 0x2b
 8000250:	d111      	bne.n	8000276 <main+0x12a>
 8000252:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <main+0x164>)
 8000254:	789b      	ldrb	r3, [r3, #2]
 8000256:	2bc9      	cmp	r3, #201	@ 0xc9
 8000258:	d10d      	bne.n	8000276 <main+0x12a>
 800025a:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <main+0x164>)
 800025c:	78db      	ldrb	r3, [r3, #3]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d109      	bne.n	8000276 <main+0x12a>
	      	  {
	      		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // nhay led tren chan 13
 8000262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000266:	4813      	ldr	r0, [pc, #76]	@ (80002b4 <main+0x168>)
 8000268:	f001 fcda 	bl	8001c20 <HAL_GPIO_TogglePin>
	      		  HAL_Delay(1000);
 800026c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000270:	f001 f948 	bl	8001504 <HAL_Delay>
 8000274:	e005      	b.n	8000282 <main+0x136>
	      	  }
	      	  else
	      	  {
	      	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800027c:	480d      	ldr	r0, [pc, #52]	@ (80002b4 <main+0x168>)
 800027e:	f001 fcb7 	bl	8001bf0 <HAL_GPIO_WritePin>
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000282:	e793      	b.n	80001ac <main+0x60>

	      	  }

  }
  /* USER CODE END 3 */
}
 8000284:	4618      	mov	r0, r3
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000290 	.word	0x20000290
 8000290:	20000084 	.word	0x20000084
 8000294:	08006478 	.word	0x08006478
 8000298:	080064a4 	.word	0x080064a4
 800029c:	20000184 	.word	0x20000184
 80002a0:	20000190 	.word	0x20000190
 80002a4:	080064c4 	.word	0x080064c4
 80002a8:	080064dc 	.word	0x080064dc
 80002ac:	080064e4 	.word	0x080064e4
 80002b0:	20000194 	.word	0x20000194
 80002b4:	40011000 	.word	0x40011000

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f005 fb08 	bl	80058dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f003 fad1 	bl	80038a8 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800030c:	f000 f93c 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fd3e 	bl	8003dac <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f927 	bl	8000588 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	@ 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <MX_I2C1_Init+0x50>)
 800034a:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <MX_I2C1_Init+0x54>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000350:	4a12      	ldr	r2, [pc, #72]	@ (800039c <MX_I2C1_Init+0x58>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000362:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b0a      	ldr	r3, [pc, #40]	@ (8000394 <MX_I2C1_Init+0x50>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037a:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_I2C1_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	@ (8000394 <MX_I2C1_Init+0x50>)
 8000382:	f001 fc67 	bl	8001c54 <HAL_I2C_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800038c:	f000 f8fc 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000019c 	.word	0x2000019c
 8000398:	40005400 	.word	0x40005400
 800039c:	000186a0 	.word	0x000186a0

080003a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a4:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003a6:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <MX_SPI1_Init+0x68>)
 80003a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003aa:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003d4:	2220      	movs	r2, #32
 80003d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003da:	2280      	movs	r2, #128	@ 0x80
 80003dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003ec:	220a      	movs	r2, #10
 80003ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_SPI1_Init+0x64>)
 80003f2:	f003 fe69 	bl	80040c8 <HAL_SPI_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003fc:	f000 f8c4 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	200001f0 	.word	0x200001f0
 8000408:	40013000 	.word	0x40013000

0800040c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	@ (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f004 fa23 	bl	800488e <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f000 f89b 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000248 	.word	0x20000248
 800045c:	40013800 	.word	0x40013800

08000460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	4b37      	ldr	r3, [pc, #220]	@ (8000554 <MX_GPIO_Init+0xf4>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a36      	ldr	r2, [pc, #216]	@ (8000554 <MX_GPIO_Init+0xf4>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <MX_GPIO_Init+0xf4>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4b31      	ldr	r3, [pc, #196]	@ (8000554 <MX_GPIO_Init+0xf4>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a30      	ldr	r2, [pc, #192]	@ (8000554 <MX_GPIO_Init+0xf4>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <MX_GPIO_Init+0xf4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000554 <MX_GPIO_Init+0xf4>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000554 <MX_GPIO_Init+0xf4>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b28      	ldr	r3, [pc, #160]	@ (8000554 <MX_GPIO_Init+0xf4>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b25      	ldr	r3, [pc, #148]	@ (8000554 <MX_GPIO_Init+0xf4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a24      	ldr	r2, [pc, #144]	@ (8000554 <MX_GPIO_Init+0xf4>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_GPIO_Init+0xf4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004da:	481f      	ldr	r0, [pc, #124]	@ (8000558 <MX_GPIO_Init+0xf8>)
 80004dc:	f001 fb88 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2110      	movs	r1, #16
 80004e4:	481d      	ldr	r0, [pc, #116]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004e6:	f001 fb83 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PN532_RST_Pin|PN532_REQ_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	481c      	ldr	r0, [pc, #112]	@ (8000560 <MX_GPIO_Init+0x100>)
 80004f0:	f001 fb7e 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4812      	ldr	r0, [pc, #72]	@ (8000558 <MX_GPIO_Init+0xf8>)
 800050e:	f001 f9eb 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8000512:	2310      	movs	r3, #16
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800051e:	2303      	movs	r3, #3
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	4619      	mov	r1, r3
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <MX_GPIO_Init+0xfc>)
 800052a:	f001 f9dd 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_RST_Pin PN532_REQ_Pin */
  GPIO_InitStruct.Pin = PN532_RST_Pin|PN532_REQ_Pin;
 800052e:	2303      	movs	r3, #3
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053a:	2303      	movs	r3, #3
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4806      	ldr	r0, [pc, #24]	@ (8000560 <MX_GPIO_Init+0x100>)
 8000546:	f001 f9cf 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40011000 	.word	0x40011000
 800055c:	40010800 	.word	0x40010800
 8000560:	40010c00 	.word	0x40010c00

08000564 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800056c:	1d39      	adds	r1, r7, #4
 800056e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000572:	2201      	movs	r2, #1
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <__io_putchar+0x20>)
 8000576:	f004 f9da 	bl	800492e <HAL_UART_Transmit>

  return ch;
 800057a:	687b      	ldr	r3, [r7, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000248 	.word	0x20000248

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <Error_Handler+0x8>

08000594 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b0c8      	sub	sp, #288	@ 0x120
 8000598:	af00      	add	r7, sp, #0
 800059a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800059e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005a2:	6018      	str	r0, [r3, #0]
 80005a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80005ac:	6019      	str	r1, [r3, #0]
 80005ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005b2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005b6:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 80005b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005bc:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	2bff      	cmp	r3, #255	@ 0xff
 80005c4:	d806      	bhi.n	80005d4 <PN532_WriteFrame+0x40>
 80005c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005ca:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	e0aa      	b.n	8000730 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 80005e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 80005ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005f4:	2200      	movs	r2, #0
 80005f6:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 80005f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000600:	22ff      	movs	r2, #255	@ 0xff
 8000602:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800060a:	e010      	b.n	800062e <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 800060c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000610:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000614:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000618:	5cd2      	ldrb	r2, [r2, r3]
 800061a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800061e:	4413      	add	r3, r2
 8000620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000624:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000628:	3301      	adds	r3, #1
 800062a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800062e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000632:	2b02      	cmp	r3, #2
 8000634:	d9ea      	bls.n	800060c <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8000636:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800063a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000646:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800064a:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 800064c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000650:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	425b      	negs	r3, r3
 800065a:	b2da      	uxtb	r2, r3
 800065c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000660:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000664:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800066c:	e023      	b.n	80006b6 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 800066e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000672:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000676:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	441a      	add	r2, r3
 800067e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000682:	3305      	adds	r3, #5
 8000684:	7811      	ldrb	r1, [r2, #0]
 8000686:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800068a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800068e:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000690:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000694:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000698:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80006a6:	4413      	add	r3, r2
 80006a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 80006ac:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80006b0:	3301      	adds	r3, #1
 80006b2:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80006b6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006c0:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80006c4:	8812      	ldrh	r2, [r2, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d8d1      	bhi.n	800066e <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 80006ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006ce:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	3305      	adds	r3, #5
 80006d6:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 80006da:	43d2      	mvns	r2, r2
 80006dc:	b2d1      	uxtb	r1, r2
 80006de:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006e2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80006e6:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 80006e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006ec:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	3306      	adds	r3, #6
 80006f4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80006fc:	2100      	movs	r1, #0
 80006fe:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000704:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000710:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000714:	8812      	ldrh	r2, [r2, #0]
 8000716:	3207      	adds	r2, #7
 8000718:	b291      	uxth	r1, r2
 800071a:	f107 0214 	add.w	r2, r7, #20
 800071e:	4610      	mov	r0, r2
 8000720:	4798      	blx	r3
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	e000      	b.n	8000730 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b0c8      	sub	sp, #288	@ 0x120
 8000740:	af00      	add	r7, sp, #0
 8000742:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000746:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800074a:	6018      	str	r0, [r3, #0]
 800074c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000750:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000754:	6019      	str	r1, [r3, #0]
 8000756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800075a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800075e:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000766:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800076a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000776:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 800077a:	8812      	ldrh	r2, [r2, #0]
 800077c:	3207      	adds	r2, #7
 800077e:	b291      	uxth	r1, r2
 8000780:	f107 0214 	add.w	r2, r7, #20
 8000784:	4610      	mov	r0, r2
 8000786:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 800078e:	e019      	b.n	80007c4 <PN532_ReadFrame+0x88>
        offset += 1;
 8000790:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000794:	3301      	adds	r3, #1
 8000796:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 800079a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800079e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	1dda      	adds	r2, r3, #7
 80007a6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007aa:	429a      	cmp	r2, r3
 80007ac:	da0a      	bge.n	80007c4 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80007ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	485b      	ldr	r0, [pc, #364]	@ (8000928 <PN532_ReadFrame+0x1ec>)
 80007bc:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e0ab      	b.n	800091c <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 80007c4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007c8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007cc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007d0:	5cd3      	ldrb	r3, [r2, r3]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0dc      	beq.n	8000790 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 80007d6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007da:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007de:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
 80007e4:	2bff      	cmp	r3, #255	@ 0xff
 80007e6:	d00a      	beq.n	80007fe <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80007e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	484c      	ldr	r0, [pc, #304]	@ (8000928 <PN532_ReadFrame+0x1ec>)
 80007f6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	e08e      	b.n	800091c <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 80007fe:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000802:	3301      	adds	r3, #1
 8000804:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000808:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800080c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	1dda      	adds	r2, r3, #7
 8000814:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000818:	429a      	cmp	r2, r3
 800081a:	da0a      	bge.n	8000832 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 800081c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000820:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4840      	ldr	r0, [pc, #256]	@ (800092c <PN532_ReadFrame+0x1f0>)
 800082a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	e074      	b.n	800091c <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000832:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000836:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800083a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800083e:	5cd3      	ldrb	r3, [r2, r3]
 8000840:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000844:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000848:	3301      	adds	r3, #1
 800084a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800084e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000852:	5cd2      	ldrb	r2, [r2, r3]
 8000854:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000858:	4413      	add	r3, r2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00a      	beq.n	8000876 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000860:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000864:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4830      	ldr	r0, [pc, #192]	@ (8000930 <PN532_ReadFrame+0x1f4>)
 800086e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	e052      	b.n	800091c <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000876:	2300      	movs	r3, #0
 8000878:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800087c:	e014      	b.n	80008a8 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 800087e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000882:	1c9a      	adds	r2, r3, #2
 8000884:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000888:	4413      	add	r3, r2
 800088a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800088e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000892:	5cd2      	ldrb	r2, [r2, r3]
 8000894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000898:	4413      	add	r3, r2
 800089a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800089e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80008a2:	3301      	adds	r3, #1
 80008a4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80008a8:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 80008ac:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d2e4      	bcs.n	800087e <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80008b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00a      	beq.n	80008d2 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 80008bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80008c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	481a      	ldr	r0, [pc, #104]	@ (8000934 <PN532_ReadFrame+0x1f8>)
 80008ca:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	e024      	b.n	800091c <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 80008d8:	e018      	b.n	800090c <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 80008da:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80008de:	1c9a      	adds	r2, r3, #2
 80008e0:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 80008e4:	441a      	add	r2, r3
 80008e6:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 80008ea:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80008ee:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 80008f2:	6809      	ldr	r1, [r1, #0]
 80008f4:	440b      	add	r3, r1
 80008f6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80008fa:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80008fe:	5c8a      	ldrb	r2, [r1, r2]
 8000900:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000902:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000906:	3301      	adds	r3, #1
 8000908:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 800090c:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000910:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000914:	429a      	cmp	r2, r3
 8000916:	d3e0      	bcc.n	80008da <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000918:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 800091c:	4618      	mov	r0, r3
 800091e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	080064e8 	.word	0x080064e8
 800092c:	0800651c 	.word	0x0800651c
 8000930:	08006538 	.word	0x08006538
 8000934:	08006568 	.word	0x08006568

08000938 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b0c7      	sub	sp, #284	@ 0x11c
 800093c:	af00      	add	r7, sp, #0
 800093e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000942:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000946:	6020      	str	r0, [r4, #0]
 8000948:	4608      	mov	r0, r1
 800094a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800094e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000952:	600a      	str	r2, [r1, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800095a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800095e:	4602      	mov	r2, r0
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000966:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800096a:	460a      	mov	r2, r1
 800096c:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 800096e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000976:	22d4      	movs	r2, #212	@ 0xd4
 8000978:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800097a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800097e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000982:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000986:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 800098e:	2300      	movs	r3, #0
 8000990:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000994:	e012      	b.n	80009bc <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800099a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800099e:	441a      	add	r2, r3
 80009a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80009a4:	3302      	adds	r3, #2
 80009a6:	7811      	ldrb	r1, [r2, #0]
 80009a8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80009ac:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009b0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80009b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80009b6:	3301      	adds	r3, #1
 80009b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80009bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d8e5      	bhi.n	8000996 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80009ca:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 80009ce:	3302      	adds	r3, #2
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	f107 0110 	add.w	r1, r7, #16
 80009d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	f7ff fdd8 	bl	8000594 <PN532_WriteFrame>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d011      	beq.n	8000a0e <PN532_CallFunction+0xd6>
        pn532->wakeup();
 80009ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80009f8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	485b      	ldr	r0, [pc, #364]	@ (8000b74 <PN532_CallFunction+0x23c>)
 8000a06:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	e0ac      	b.n	8000b68 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000a0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000a1e:	4798      	blx	r3
 8000a20:	4603      	mov	r3, r0
 8000a22:	f083 0301 	eor.w	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	e09a      	b.n	8000b68 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000a32:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f107 0210 	add.w	r2, r7, #16
 8000a42:	2106      	movs	r1, #6
 8000a44:	4610      	mov	r0, r2
 8000a46:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000a4e:	e01c      	b.n	8000a8a <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000a50:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a54:	4a48      	ldr	r2, [pc, #288]	@ (8000b78 <PN532_CallFunction+0x240>)
 8000a56:	5cd2      	ldrb	r2, [r2, r3]
 8000a58:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a5c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000a60:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000a64:	5ccb      	ldrb	r3, [r1, r3]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d00a      	beq.n	8000a80 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000a6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4841      	ldr	r0, [pc, #260]	@ (8000b7c <PN532_CallFunction+0x244>)
 8000a78:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e073      	b.n	8000b68 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a80:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a84:	3301      	adds	r3, #1
 8000a86:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000a8a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a8e:	2b05      	cmp	r3, #5
 8000a90:	d9de      	bls.n	8000a50 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000aa2:	4798      	blx	r3
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	f083 0301 	eor.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d002      	beq.n	8000ab6 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	e058      	b.n	8000b68 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000ab6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000aba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	3302      	adds	r3, #2
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	f107 0110 	add.w	r1, r7, #16
 8000ac8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000acc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	f7ff fe33 	bl	800073c <PN532_ReadFrame>
 8000ad6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000ada:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2bd5      	cmp	r3, #213	@ 0xd5
 8000ae6:	d10d      	bne.n	8000b04 <PN532_CallFunction+0x1cc>
 8000ae8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	461a      	mov	r2, r3
 8000af4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000af8:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d00a      	beq.n	8000b1a <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000b04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b08:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	481b      	ldr	r0, [pc, #108]	@ (8000b80 <PN532_CallFunction+0x248>)
 8000b12:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e026      	b.n	8000b68 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000b20:	e015      	b.n	8000b4e <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000b22:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000b26:	1c9a      	adds	r2, r3, #2
 8000b28:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000b2c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b30:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000b34:	6809      	ldr	r1, [r1, #0]
 8000b36:	440b      	add	r3, r1
 8000b38:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000b3c:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000b40:	5c8a      	ldrb	r2, [r1, r2]
 8000b42:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000b44:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000b4e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000b58:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000b5c:	8812      	ldrh	r2, [r2, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d8df      	bhi.n	8000b22 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000b62:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000b66:	3b02      	subs	r3, #2
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	0800659c 	.word	0x0800659c
 8000b78:	08006674 	.word	0x08006674
 8000b7c:	080065b0 	.word	0x080065b0
 8000b80:	080065dc 	.word	0x080065dc

08000b84 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af04      	add	r7, sp, #16
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b8e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	2300      	movs	r3, #0
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fec8 	bl	8000938 <PN532_CallFunction>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bae:	d106      	bne.n	8000bbe <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <PN532_GetFirmwareVersion+0x44>)
 8000bb6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	e000      	b.n	8000bc0 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08006604 	.word	0x08006604

08000bcc <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <PN532_SamConfiguration+0x40>)
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	8019      	strh	r1, [r3, #0]
 8000be0:	3302      	adds	r3, #2
 8000be2:	0c12      	lsrs	r2, r2, #16
 8000be4:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2303      	movs	r3, #3
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2114      	movs	r1, #20
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fe9b 	bl	8000938 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	08006620 	.word	0x08006620

08000c10 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b090      	sub	sp, #64	@ 0x40
 8000c14:	af04      	add	r7, sp, #16
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000c20:	2301      	movs	r3, #1
 8000c22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000c2c:	f107 0210 	add.w	r2, r7, #16
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2302      	movs	r3, #2
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2313      	movs	r3, #19
 8000c40:	214a      	movs	r1, #74	@ 0x4a
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fe78 	bl	8000938 <PN532_CallFunction>
 8000c48:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	da02      	bge.n	8000c56 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	e02e      	b.n	8000cb4 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000c56:	7c3b      	ldrb	r3, [r7, #16]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d006      	beq.n	8000c6a <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	4816      	ldr	r0, [pc, #88]	@ (8000cbc <PN532_ReadPassiveTarget+0xac>)
 8000c62:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	e024      	b.n	8000cb4 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000c6a:	7d7b      	ldrb	r3, [r7, #21]
 8000c6c:	2b07      	cmp	r3, #7
 8000c6e:	d906      	bls.n	8000c7e <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <PN532_ReadPassiveTarget+0xb0>)
 8000c76:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	e01a      	b.n	8000cb4 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c84:	e010      	b.n	8000ca8 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c8a:	1d9a      	adds	r2, r3, #6
 8000c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	440b      	add	r3, r1
 8000c94:	3230      	adds	r2, #48	@ 0x30
 8000c96:	443a      	add	r2, r7
 8000c98:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c9c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ca8:	7d7b      	ldrb	r3, [r7, #21]
 8000caa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3e9      	bcc.n	8000c86 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000cb2:	7d7b      	ldrb	r3, [r7, #21]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3730      	adds	r7, #48	@ 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	08006624 	.word	0x08006624
 8000cc0:	08006644 	.word	0x08006644

08000cc4 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2101      	movs	r1, #1
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <PN532_Reset+0x3c>)
 8000cce:	f000 ff8f 	bl	8001bf0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	@ 0x64
 8000cd4:	f000 fc16 	bl	8001504 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2101      	movs	r1, #1
 8000cdc:	4808      	ldr	r0, [pc, #32]	@ (8000d00 <PN532_Reset+0x3c>)
 8000cde:	f000 ff87 	bl	8001bf0 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000ce2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ce6:	f000 fc0d 	bl	8001504 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2101      	movs	r1, #1
 8000cee:	4804      	ldr	r0, [pc, #16]	@ (8000d00 <PN532_Reset+0x3c>)
 8000cf0:	f000 ff7e 	bl	8001bf0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000cf4:	2064      	movs	r0, #100	@ 0x64
 8000cf6:	f000 fc05 	bl	8001504 <HAL_Delay>
    return PN532_STATUS_OK;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <PN532_Log>:

void PN532_Log(const char* log) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <PN532_Log+0x18>)
 8000d10:	f004 fc94 	bl	800563c <iprintf>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	0800666c 	.word	0x0800666c

08000d20 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2110      	movs	r1, #16
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <spi_rw+0x48>)
 8000d32:	f000 ff5d 	bl	8001bf0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f000 fbe4 	bl	8001504 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000d3c:	78fb      	ldrb	r3, [r7, #3]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	220a      	movs	r2, #10
 8000d42:	9200      	str	r2, [sp, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4808      	ldr	r0, [pc, #32]	@ (8000d6c <spi_rw+0x4c>)
 8000d4a:	f003 fa41 	bl	80041d0 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f000 fbd8 	bl	8001504 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2110      	movs	r1, #16
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <spi_rw+0x48>)
 8000d5a:	f000 ff49 	bl	8001bf0 <HAL_GPIO_WritePin>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	200001f0 	.word	0x200001f0

08000d70 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d74:	b087      	sub	sp, #28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	807b      	strh	r3, [r7, #2]
 8000d7e:	466b      	mov	r3, sp
 8000d80:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	1c59      	adds	r1, r3, #1
 8000d86:	1e4b      	subs	r3, r1, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	460a      	mov	r2, r1
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4690      	mov	r8, r2
 8000d90:	4699      	mov	r9, r3
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000da6:	460a      	mov	r2, r1
 8000da8:	2300      	movs	r3, #0
 8000daa:	4614      	mov	r4, r2
 8000dac:	461d      	mov	r5, r3
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	00eb      	lsls	r3, r5, #3
 8000db8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dbc:	00e2      	lsls	r2, r4, #3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	3307      	adds	r3, #7
 8000dc2:	08db      	lsrs	r3, r3, #3
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dca:	466b      	mov	r3, sp
 8000dcc:	3300      	adds	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fb94 	bl	8001504 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4619      	mov	r1, r3
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff ff9a 	bl	8000d20 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	75fb      	strb	r3, [r7, #23]
 8000df0:	e00a      	b.n	8000e08 <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	5c8a      	ldrb	r2, [r1, r2]
 8000e00:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
 8000e04:	3301      	adds	r3, #1
 8000e06:	75fb      	strb	r3, [r7, #23]
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d8ef      	bhi.n	8000df2 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	46b5      	mov	sp, r6
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e20 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e24:	b087      	sub	sp, #28
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	807b      	strh	r3, [r7, #2]
 8000e2e:	466b      	mov	r3, sp
 8000e30:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	1c59      	adds	r1, r3, #1
 8000e36:	1e4b      	subs	r3, r1, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	4690      	mov	r8, r2
 8000e40:	4699      	mov	r9, r3
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	f04f 0300 	mov.w	r3, #0
 8000e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e56:	460a      	mov	r2, r1
 8000e58:	2300      	movs	r3, #0
 8000e5a:	4614      	mov	r4, r2
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	00eb      	lsls	r3, r5, #3
 8000e68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e6c:	00e2      	lsls	r2, r4, #3
 8000e6e:	460b      	mov	r3, r1
 8000e70:	3307      	adds	r3, #7
 8000e72:	08db      	lsrs	r3, r3, #3
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	ebad 0d03 	sub.w	sp, sp, r3
 8000e7a:	466b      	mov	r3, sp
 8000e7c:	3300      	adds	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
 8000e8a:	e00a      	b.n	8000ea2 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	441a      	add	r2, r3
 8000e92:	7dfb      	ldrb	r3, [r7, #23]
 8000e94:	3301      	adds	r3, #1
 8000e96:	7811      	ldrb	r1, [r2, #0]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8ef      	bhi.n	8000e8c <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff ff32 	bl	8000d20 <spi_rw>
    return PN532_STATUS_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	46b5      	mov	sp, r6
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000eca <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8000ed6:	f000 fb0b 	bl	80014f0 <HAL_GetTick>
 8000eda:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000edc:	e010      	b.n	8000f00 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f000 fb10 	bl	8001504 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8000ee4:	f107 0308 	add.w	r3, r7, #8
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff18 	bl	8000d20 <spi_rw>
        if (status[1] == _SPI_READY) {
 8000ef0:	7a7b      	ldrb	r3, [r7, #9]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d101      	bne.n	8000efa <PN532_SPI_WaitReady+0x30>
            return true;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00b      	b.n	8000f12 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 8000efa:	2005      	movs	r0, #5
 8000efc:	f000 fb02 	bl	8001504 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000f00:	f000 faf6 	bl	80014f0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8e6      	bhi.n	8000ede <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8000f22:	2300      	movs	r3, #0
 8000f24:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8000f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2a:	f000 faeb 	bl	8001504 <HAL_Delay>
    HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <PN532_SPI_Wakeup+0x40>)
 8000f34:	f000 fe5c 	bl	8001bf0 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f000 fae3 	bl	8001504 <HAL_Delay>
    spi_rw(data, 1);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2101      	movs	r1, #1
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff feec 	bl	8000d20 <spi_rw>
    HAL_Delay(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4c:	f000 fada 	bl	8001504 <HAL_Delay>
    return PN532_STATUS_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010800 	.word	0x40010800

08000f60 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <PN532_SPI_Init+0x3c>)
 8000f6c:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa0 <PN532_SPI_Init+0x40>)
 8000f72:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <PN532_SPI_Init+0x44>)
 8000f78:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <PN532_SPI_Init+0x48>)
 8000f7e:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <PN532_SPI_Init+0x4c>)
 8000f84:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a09      	ldr	r2, [pc, #36]	@ (8000fb0 <PN532_SPI_Init+0x50>)
 8000f8a:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	4798      	blx	r3
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	08000cc5 	.word	0x08000cc5
 8000fa0:	08000d71 	.word	0x08000d71
 8000fa4:	08000e21 	.word	0x08000e21
 8000fa8:	08000ecb 	.word	0x08000ecb
 8000fac:	08000f1d 	.word	0x08000f1d
 8000fb0:	08000d05 	.word	0x08000d05

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_MspInit+0x5c>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <HAL_MspInit+0x5c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_MspInit+0x5c>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_MspInit+0x5c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_MspInit+0x5c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_MspInit+0x5c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <HAL_MspInit+0x60>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <HAL_MspInit+0x60>)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000
 8001014:	40010000 	.word	0x40010000

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1d      	ldr	r2, [pc, #116]	@ (80010a8 <HAL_I2C_MspInit+0x90>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d133      	bne.n	80010a0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_I2C_MspInit+0x94>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ac <HAL_I2C_MspInit+0x94>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_I2C_MspInit+0x94>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0308 	and.w	r3, r3, #8
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001050:	23c0      	movs	r3, #192	@ 0xc0
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4813      	ldr	r0, [pc, #76]	@ (80010b0 <HAL_I2C_MspInit+0x98>)
 8001064:	f000 fc40 	bl	80018e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_I2C_MspInit+0x94>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a0f      	ldr	r2, [pc, #60]	@ (80010ac <HAL_I2C_MspInit+0x94>)
 800106e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HAL_I2C_MspInit+0x94>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	201f      	movs	r0, #31
 8001086:	f000 fb38 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800108a:	201f      	movs	r0, #31
 800108c:	f000 fb51 	bl	8001732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2020      	movs	r0, #32
 8001096:	f000 fb30 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800109a:	2020      	movs	r0, #32
 800109c:	f000 fb49 	bl	8001732 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40005400 	.word	0x40005400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010c00 	.word	0x40010c00

080010b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <HAL_SPI_MspInit+0x98>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d137      	bne.n	8001144 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_SPI_MspInit+0x9c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001150 <HAL_SPI_MspInit+0x9c>)
 80010da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <HAL_SPI_MspInit+0x9c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_SPI_MspInit+0x9c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <HAL_SPI_MspInit+0x9c>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b15      	ldr	r3, [pc, #84]	@ (8001150 <HAL_SPI_MspInit+0x9c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001104:	23a0      	movs	r3, #160	@ 0xa0
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480f      	ldr	r0, [pc, #60]	@ (8001154 <HAL_SPI_MspInit+0xa0>)
 8001118:	f000 fbe6 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800111c:	2340      	movs	r3, #64	@ 0x40
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4809      	ldr	r0, [pc, #36]	@ (8001154 <HAL_SPI_MspInit+0xa0>)
 8001130:	f000 fbda 	bl	80018e8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2023      	movs	r0, #35	@ 0x23
 800113a:	f000 fade 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800113e:	2023      	movs	r0, #35	@ 0x23
 8001140:	f000 faf7 	bl	8001732 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001144:	bf00      	nop
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013000 	.word	0x40013000
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800

08001158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a20      	ldr	r2, [pc, #128]	@ (80011f4 <HAL_UART_MspInit+0x9c>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d139      	bne.n	80011ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <HAL_UART_MspInit+0xa0>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a1e      	ldr	r2, [pc, #120]	@ (80011f8 <HAL_UART_MspInit+0xa0>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <HAL_UART_MspInit+0xa0>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_UART_MspInit+0xa0>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <HAL_UART_MspInit+0xa0>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <HAL_UART_MspInit+0xa0>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480f      	ldr	r0, [pc, #60]	@ (80011fc <HAL_UART_MspInit+0xa4>)
 80011be:	f000 fb93 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4809      	ldr	r0, [pc, #36]	@ (80011fc <HAL_UART_MspInit+0xa4>)
 80011d8:	f000 fb86 	bl	80018e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2025      	movs	r0, #37	@ 0x25
 80011e2:	f000 fa8a 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011e6:	2025      	movs	r0, #37	@ 0x25
 80011e8:	f000 faa3 	bl	8001732 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013800 	.word	0x40013800
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <NMI_Handler+0x4>

08001208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <MemManage_Handler+0x4>

08001218 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <UsageFault_Handler+0x4>

08001228 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f93c 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <I2C1_EV_IRQHandler+0x10>)
 800125e:	f000 fe51 	bl	8001f04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000019c 	.word	0x2000019c

0800126c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001270:	4802      	ldr	r0, [pc, #8]	@ (800127c <I2C1_ER_IRQHandler+0x10>)
 8001272:	f000 ff9a 	bl	80021aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000019c 	.word	0x2000019c

08001280 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001284:	4802      	ldr	r0, [pc, #8]	@ (8001290 <SPI1_IRQHandler+0x10>)
 8001286:	f003 f94d 	bl	8004524 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f0 	.word	0x200001f0

08001294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <USART1_IRQHandler+0x10>)
 800129a:	f003 fbd3 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000248 	.word	0x20000248

080012a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f931 	bl	8000564 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
  }
  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001340:	605a      	str	r2, [r3, #4]
  return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <_isatty>:

int _isatty(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ac:	f004 fae4 	bl	8005978 <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20005000 	.word	0x20005000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	200002a8 	.word	0x200002a8
 80013e4:	20000400 	.word	0x20000400

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff fff8 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013fa:	490c      	ldr	r1, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001410:	4c09      	ldr	r4, [pc, #36]	@ (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f004 fab1 	bl	8005984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7fe fe93 	bl	800014c <main>
  bx lr
 8001426:	4770      	bx	lr
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001430:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8001434:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001438:	200003fc 	.word	0x200003fc

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f947 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fdaa 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f95f 	bl	800174e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f927 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a03      	ldr	r2, [pc, #12]	@ (80014ec <HAL_IncTick+0x20>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000008 	.word	0x20000008
 80014ec:	200002ac 	.word	0x200002ac

080014f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	@ (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	200002ac 	.word	0x200002ac

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fff0 	bl	80014f0 <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffe0 	bl	80014f0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4906      	ldr	r1, [pc, #24]	@ (80015e4 <__NVIC_EnableIRQ+0x34>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2d 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff42 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff35 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d008      	beq.n	8001790 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2204      	movs	r2, #4
 8001782:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e020      	b.n	80017d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 020e 	bic.w	r2, r2, #14
 800179e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d005      	beq.n	8001800 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2204      	movs	r2, #4
 80017f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e051      	b.n	80018a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020e 	bic.w	r2, r2, #14
 800180e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a22      	ldr	r2, [pc, #136]	@ (80018b0 <HAL_DMA_Abort_IT+0xd4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d029      	beq.n	800187e <HAL_DMA_Abort_IT+0xa2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a21      	ldr	r2, [pc, #132]	@ (80018b4 <HAL_DMA_Abort_IT+0xd8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d022      	beq.n	800187a <HAL_DMA_Abort_IT+0x9e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1f      	ldr	r2, [pc, #124]	@ (80018b8 <HAL_DMA_Abort_IT+0xdc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d01a      	beq.n	8001874 <HAL_DMA_Abort_IT+0x98>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_DMA_Abort_IT+0xe0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d012      	beq.n	800186e <HAL_DMA_Abort_IT+0x92>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <HAL_DMA_Abort_IT+0xe4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00a      	beq.n	8001868 <HAL_DMA_Abort_IT+0x8c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1b      	ldr	r2, [pc, #108]	@ (80018c4 <HAL_DMA_Abort_IT+0xe8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d102      	bne.n	8001862 <HAL_DMA_Abort_IT+0x86>
 800185c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001860:	e00e      	b.n	8001880 <HAL_DMA_Abort_IT+0xa4>
 8001862:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001866:	e00b      	b.n	8001880 <HAL_DMA_Abort_IT+0xa4>
 8001868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186c:	e008      	b.n	8001880 <HAL_DMA_Abort_IT+0xa4>
 800186e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001872:	e005      	b.n	8001880 <HAL_DMA_Abort_IT+0xa4>
 8001874:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001878:	e002      	b.n	8001880 <HAL_DMA_Abort_IT+0xa4>
 800187a:	2310      	movs	r3, #16
 800187c:	e000      	b.n	8001880 <HAL_DMA_Abort_IT+0xa4>
 800187e:	2301      	movs	r3, #1
 8001880:	4a11      	ldr	r2, [pc, #68]	@ (80018c8 <HAL_DMA_Abort_IT+0xec>)
 8001882:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
    } 
  }
  return status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020008 	.word	0x40020008
 80018b4:	4002001c 	.word	0x4002001c
 80018b8:	40020030 	.word	0x40020030
 80018bc:	40020044 	.word	0x40020044
 80018c0:	40020058 	.word	0x40020058
 80018c4:	4002006c 	.word	0x4002006c
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018da:	b2db      	uxtb	r3, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	@ 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fa:	e169      	b.n	8001bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8158 	bne.w	8001bca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a9a      	ldr	r2, [pc, #616]	@ (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d05e      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001924:	4a98      	ldr	r2, [pc, #608]	@ (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d875      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800192a:	4a98      	ldr	r2, [pc, #608]	@ (8001b8c <HAL_GPIO_Init+0x2a4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d058      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001930:	4a96      	ldr	r2, [pc, #600]	@ (8001b8c <HAL_GPIO_Init+0x2a4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d86f      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001936:	4a96      	ldr	r2, [pc, #600]	@ (8001b90 <HAL_GPIO_Init+0x2a8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d052      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 800193c:	4a94      	ldr	r2, [pc, #592]	@ (8001b90 <HAL_GPIO_Init+0x2a8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d869      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001942:	4a94      	ldr	r2, [pc, #592]	@ (8001b94 <HAL_GPIO_Init+0x2ac>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d04c      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001948:	4a92      	ldr	r2, [pc, #584]	@ (8001b94 <HAL_GPIO_Init+0x2ac>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d863      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800194e:	4a92      	ldr	r2, [pc, #584]	@ (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d046      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001954:	4a90      	ldr	r2, [pc, #576]	@ (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d85d      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800195a:	2b12      	cmp	r3, #18
 800195c:	d82a      	bhi.n	80019b4 <HAL_GPIO_Init+0xcc>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d859      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001962:	a201      	add	r2, pc, #4	@ (adr r2, 8001968 <HAL_GPIO_Init+0x80>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	080019e3 	.word	0x080019e3
 800196c:	080019bd 	.word	0x080019bd
 8001970:	080019cf 	.word	0x080019cf
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a17 	.word	0x08001a17
 800197c:	08001a17 	.word	0x08001a17
 8001980:	08001a17 	.word	0x08001a17
 8001984:	08001a17 	.word	0x08001a17
 8001988:	08001a17 	.word	0x08001a17
 800198c:	08001a17 	.word	0x08001a17
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a17 	.word	0x08001a17
 8001998:	08001a17 	.word	0x08001a17
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	08001a17 	.word	0x08001a17
 80019a4:	08001a17 	.word	0x08001a17
 80019a8:	08001a17 	.word	0x08001a17
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	4a79      	ldr	r2, [pc, #484]	@ (8001b9c <HAL_GPIO_Init+0x2b4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ba:	e02c      	b.n	8001a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e029      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	3304      	adds	r3, #4
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e024      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	3308      	adds	r3, #8
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e01f      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	330c      	adds	r3, #12
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e01a      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ea:	2304      	movs	r3, #4
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e013      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	611a      	str	r2, [r3, #16]
          break;
 8001a02:	e009      	b.n	8001a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	615a      	str	r2, [r3, #20]
          break;
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          break;
 8001a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	@ 0xff
 8001a1c:	d801      	bhi.n	8001a22 <HAL_GPIO_Init+0x13a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	@ 0xff
 8001a2c:	d802      	bhi.n	8001a34 <HAL_GPIO_Init+0x14c>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x152>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	3b08      	subs	r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	210f      	movs	r1, #15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80b1 	beq.w	8001bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a80:	4a48      	ldr	r2, [pc, #288]	@ (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d013      	beq.n	8001ad4 <HAL_GPIO_Init+0x1ec>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3f      	ldr	r2, [pc, #252]	@ (8001bac <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00d      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8001bb0 <HAL_GPIO_Init+0x2c8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <HAL_GPIO_Init+0x1e4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb4 <HAL_GPIO_Init+0x2cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_GPIO_Init+0x1e0>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e006      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ac8:	2304      	movs	r3, #4
 8001aca:	e004      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad8:	f002 0203 	and.w	r2, r2, #3
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ae6:	492f      	ldr	r1, [pc, #188]	@ (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b00:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	492c      	ldr	r1, [pc, #176]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4928      	ldr	r1, [pc, #160]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b28:	4b23      	ldr	r3, [pc, #140]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4922      	ldr	r1, [pc, #136]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b36:	4b20      	ldr	r3, [pc, #128]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	491e      	ldr	r1, [pc, #120]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b50:	4b19      	ldr	r3, [pc, #100]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4918      	ldr	r1, [pc, #96]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4914      	ldr	r1, [pc, #80]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d021      	beq.n	8001bbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	490e      	ldr	r1, [pc, #56]	@ (8001bb8 <HAL_GPIO_Init+0x2d0>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e021      	b.n	8001bca <HAL_GPIO_Init+0x2e2>
 8001b86:	bf00      	nop
 8001b88:	10320000 	.word	0x10320000
 8001b8c:	10310000 	.word	0x10310000
 8001b90:	10220000 	.word	0x10220000
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10120000 	.word	0x10120000
 8001b9c:	10110000 	.word	0x10110000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	40010800 	.word	0x40010800
 8001bac:	40010c00 	.word	0x40010c00
 8001bb0:	40011000 	.word	0x40011000
 8001bb4:	40011400 	.word	0x40011400
 8001bb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_GPIO_Init+0x304>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	4909      	ldr	r1, [pc, #36]	@ (8001bec <HAL_GPIO_Init+0x304>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	3301      	adds	r3, #1
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae8e 	bne.w	80018fc <HAL_GPIO_Init+0x14>
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	372c      	adds	r7, #44	@ 0x2c
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	041a      	lsls	r2, r3, #16
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43d9      	mvns	r1, r3
 8001c3e:	887b      	ldrh	r3, [r7, #2]
 8001c40:	400b      	ands	r3, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e12b      	b.n	8001ebe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff f9cc 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	@ 0x24
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cb8:	f002 f9c0 	bl	800403c <HAL_RCC_GetPCLK1Freq>
 8001cbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a81      	ldr	r2, [pc, #516]	@ (8001ec8 <HAL_I2C_Init+0x274>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d807      	bhi.n	8001cd8 <HAL_I2C_Init+0x84>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4a80      	ldr	r2, [pc, #512]	@ (8001ecc <HAL_I2C_Init+0x278>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bf94      	ite	ls
 8001cd0:	2301      	movls	r3, #1
 8001cd2:	2300      	movhi	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e006      	b.n	8001ce6 <HAL_I2C_Init+0x92>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a7d      	ldr	r2, [pc, #500]	@ (8001ed0 <HAL_I2C_Init+0x27c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0e7      	b.n	8001ebe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4a78      	ldr	r2, [pc, #480]	@ (8001ed4 <HAL_I2C_Init+0x280>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ec8 <HAL_I2C_Init+0x274>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d802      	bhi.n	8001d28 <HAL_I2C_Init+0xd4>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3301      	adds	r3, #1
 8001d26:	e009      	b.n	8001d3c <HAL_I2C_Init+0xe8>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	4a69      	ldr	r2, [pc, #420]	@ (8001ed8 <HAL_I2C_Init+0x284>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	495c      	ldr	r1, [pc, #368]	@ (8001ec8 <HAL_I2C_Init+0x274>)
 8001d58:	428b      	cmp	r3, r1
 8001d5a:	d819      	bhi.n	8001d90 <HAL_I2C_Init+0x13c>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e59      	subs	r1, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6a:	1c59      	adds	r1, r3, #1
 8001d6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d70:	400b      	ands	r3, r1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00a      	beq.n	8001d8c <HAL_I2C_Init+0x138>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1e59      	subs	r1, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d84:	3301      	adds	r3, #1
 8001d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8a:	e051      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	e04f      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d111      	bne.n	8001dbc <HAL_I2C_Init+0x168>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e58      	subs	r0, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	440b      	add	r3, r1
 8001da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001daa:	3301      	adds	r3, #1
 8001dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e012      	b.n	8001de2 <HAL_I2C_Init+0x18e>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	0099      	lsls	r1, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Init+0x196>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e022      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10e      	bne.n	8001e10 <HAL_I2C_Init+0x1bc>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1e58      	subs	r0, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6859      	ldr	r1, [r3, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	440b      	add	r3, r1
 8001e00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e0e:	e00f      	b.n	8001e30 <HAL_I2C_Init+0x1dc>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	1e58      	subs	r0, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	0099      	lsls	r1, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	6809      	ldr	r1, [r1, #0]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6911      	ldr	r1, [r2, #16]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68d2      	ldr	r2, [r2, #12]
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	000186a0 	.word	0x000186a0
 8001ecc:	001e847f 	.word	0x001e847f
 8001ed0:	003d08ff 	.word	0x003d08ff
 8001ed4:	431bde83 	.word	0x431bde83
 8001ed8:	10624dd3 	.word	0x10624dd3

08001edc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b80      	cmp	r3, #128	@ 0x80
 8001ef0:	d103      	bne.n	8001efa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d003      	beq.n	8001f3c <HAL_I2C_EV_IRQHandler+0x38>
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b40      	cmp	r3, #64	@ 0x40
 8001f38:	f040 80b1 	bne.w	800209e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001f5c:	d003      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0x62>
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_EV_IRQHandler+0x66>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_I2C_EV_IRQHandler+0x68>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	f000 8114 	beq.w	800219a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x90>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f001 fc74 	bl	8003874 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fd74 	bl	8002a7a <I2C_Master_SB>
 8001f92:	e083      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_I2C_EV_IRQHandler+0xac>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fdeb 	bl	8002b84 <I2C_Master_ADD10>
 8001fae:	e075      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0xc8>
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fe06 	bl	8002bd6 <I2C_Master_ADDR>
 8001fca:	e067      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d036      	beq.n	8002044 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fe4:	f000 80db 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_I2C_EV_IRQHandler+0x10a>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_I2C_EV_IRQHandler+0x10a>
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f9d4 	bl	80023b4 <I2C_MasterTransmit_TXE>
 800200c:	e046      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80c2 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80bc 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	2b21      	cmp	r3, #33	@ 0x21
 800202a:	d103      	bne.n	8002034 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fa5d 	bl	80024ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002032:	e0b4      	b.n	800219e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2b40      	cmp	r3, #64	@ 0x40
 8002038:	f040 80b1 	bne.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 facb 	bl	80025d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002042:	e0ac      	b.n	800219e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002052:	f000 80a4 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x178>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x178>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d103      	bne.n	800207c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fb47 	bl	8002708 <I2C_MasterReceive_RXNE>
 800207a:	e00f      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 808b 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8085 	beq.w	800219e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fbff 	bl	8002898 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800209a:	e080      	b.n	800219e <HAL_I2C_EV_IRQHandler+0x29a>
 800209c:	e07f      	b.n	800219e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e007      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d011      	beq.n	80020ee <HAL_I2C_EV_IRQHandler+0x1ea>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00c      	beq.n	80020ee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020e4:	69b9      	ldr	r1, [r7, #24]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 ffcc 	bl	8003084 <I2C_Slave_ADDR>
 80020ec:	e05a      	b.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_I2C_EV_IRQHandler+0x206>
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f001 f806 	bl	8003114 <I2C_Slave_STOPF>
 8002108:	e04c      	b.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	2b21      	cmp	r3, #33	@ 0x21
 800210e:	d002      	beq.n	8002116 <HAL_I2C_EV_IRQHandler+0x212>
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	2b29      	cmp	r3, #41	@ 0x29
 8002114:	d120      	bne.n	8002158 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <HAL_I2C_EV_IRQHandler+0x238>
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_I2C_EV_IRQHandler+0x238>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fee9 	bl	8002f0c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800213a:	e032      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02d      	beq.n	80021a2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d028      	beq.n	80021a2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 ff18 	bl	8002f86 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002156:	e024      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_I2C_EV_IRQHandler+0x27a>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_I2C_EV_IRQHandler+0x27a>
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 ff25 	bl	8002fc6 <I2C_SlaveReceive_RXNE>
 800217c:	e012      	b.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 ff55 	bl	8003042 <I2C_SlaveReceive_BTF>
 8002198:	e004      	b.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800219a:	bf00      	nop
 800219c:	e002      	b.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219e:	bf00      	nop
 80021a0:	e000      	b.n	80021a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b08a      	sub	sp, #40	@ 0x28
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_I2C_ER_IRQHandler+0x5a>
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80021f2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002202:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <HAL_I2C_ER_IRQHandler+0x80>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	f043 0302 	orr.w	r3, r3, #2
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002228:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d03e      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0x108>
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d039      	beq.n	80022b2 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800223e:	7efb      	ldrb	r3, [r7, #27]
 8002240:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002246:	b29b      	uxth	r3, r3
 8002248:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002258:	7ebb      	ldrb	r3, [r7, #26]
 800225a:	2b20      	cmp	r3, #32
 800225c:	d112      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xda>
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10f      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xda>
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b21      	cmp	r3, #33	@ 0x21
 8002268:	d008      	beq.n	800227c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b29      	cmp	r3, #41	@ 0x29
 800226e:	d005      	beq.n	800227c <HAL_I2C_ER_IRQHandler+0xd2>
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b28      	cmp	r3, #40	@ 0x28
 8002274:	d106      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b21      	cmp	r3, #33	@ 0x21
 800227a:	d103      	bne.n	8002284 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 f879 	bl	8003374 <I2C_Slave_AF>
 8002282:	e016      	b.n	80022b2 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800228c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002296:	7efb      	ldrb	r3, [r7, #27]
 8002298:	2b10      	cmp	r3, #16
 800229a:	d002      	beq.n	80022a2 <HAL_I2C_ER_IRQHandler+0xf8>
 800229c:	7efb      	ldrb	r3, [r7, #27]
 800229e:	2b40      	cmp	r3, #64	@ 0x40
 80022a0:	d107      	bne.n	80022b2 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80022d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f001 f8b6 	bl	800345c <I2C_ITError>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	@ 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
 800234c:	4613      	mov	r3, r2
 800234e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d150      	bne.n	800247c <I2C_MasterTransmit_TXE+0xc8>
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b21      	cmp	r3, #33	@ 0x21
 80023de:	d14d      	bne.n	800247c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d01d      	beq.n	8002422 <I2C_MasterTransmit_TXE+0x6e>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d01a      	beq.n	8002422 <I2C_MasterTransmit_TXE+0x6e>
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023f2:	d016      	beq.n	8002422 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002402:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2211      	movs	r2, #17
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff6c 	bl	80022f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002420:	e060      	b.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002430:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002440:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b40      	cmp	r3, #64	@ 0x40
 800245a:	d107      	bne.n	800246c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff81 	bl	800236c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800246a:	e03b      	b.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff3f 	bl	80022f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800247a:	e033      	b.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b21      	cmp	r3, #33	@ 0x21
 8002480:	d005      	beq.n	800248e <I2C_MasterTransmit_TXE+0xda>
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	2b40      	cmp	r3, #64	@ 0x40
 8002486:	d12d      	bne.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b22      	cmp	r3, #34	@ 0x22
 800248c:	d12a      	bne.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80024a8:	e01c      	b.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b40      	cmp	r3, #64	@ 0x40
 80024b4:	d103      	bne.n	80024be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f88e 	bl	80025d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80024bc:	e012      	b.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024e2:	e7ff      	b.n	80024e4 <I2C_MasterTransmit_TXE+0x130>
 80024e4:	bf00      	nop
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b21      	cmp	r3, #33	@ 0x21
 8002504:	d164      	bne.n	80025d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d012      	beq.n	8002536 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	781a      	ldrb	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002534:	e04c      	b.n	80025d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b08      	cmp	r3, #8
 800253a:	d01d      	beq.n	8002578 <I2C_MasterTransmit_BTF+0x8c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b20      	cmp	r3, #32
 8002540:	d01a      	beq.n	8002578 <I2C_MasterTransmit_BTF+0x8c>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002548:	d016      	beq.n	8002578 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002558:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2211      	movs	r2, #17
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fec1 	bl	80022f8 <HAL_I2C_MasterTxCpltCallback>
}
 8002576:	e02b      	b.n	80025d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002586:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002596:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b40      	cmp	r3, #64	@ 0x40
 80025b0:	d107      	bne.n	80025c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fed6 	bl	800236c <HAL_I2C_MemTxCpltCallback>
}
 80025c0:	e006      	b.n	80025d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fe94 	bl	80022f8 <HAL_I2C_MasterTxCpltCallback>
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11d      	bne.n	800262c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10b      	bne.n	8002610 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002608:	1c9a      	adds	r2, r3, #2
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800260e:	e077      	b.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002614:	b29b      	uxth	r3, r3
 8002616:	121b      	asrs	r3, r3, #8
 8002618:	b2da      	uxtb	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800262a:	e069      	b.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002630:	2b01      	cmp	r3, #1
 8002632:	d10b      	bne.n	800264c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002638:	b2da      	uxtb	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800264a:	e059      	b.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002650:	2b02      	cmp	r3, #2
 8002652:	d152      	bne.n	80026fa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b22      	cmp	r3, #34	@ 0x22
 8002658:	d10d      	bne.n	8002676 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002668:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002674:	e044      	b.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b21      	cmp	r3, #33	@ 0x21
 8002684:	d112      	bne.n	80026ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026aa:	e029      	b.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d124      	bne.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b21      	cmp	r3, #33	@ 0x21
 80026ba:	d121      	bne.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff fe3a 	bl	800236c <HAL_I2C_MemTxCpltCallback>
}
 80026f8:	e002      	b.n	8002700 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fbee 	bl	8001edc <I2C_Flush_DR>
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b22      	cmp	r3, #34	@ 0x22
 800271a:	f040 80b9 	bne.w	8002890 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002728:	b29b      	uxth	r3, r3
 800272a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d921      	bls.n	8002776 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b03      	cmp	r3, #3
 8002760:	f040 8096 	bne.w	8002890 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002772:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002774:	e08c      	b.n	8002890 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277a:	2b02      	cmp	r3, #2
 800277c:	d07f      	beq.n	800287e <I2C_MasterReceive_RXNE+0x176>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d002      	beq.n	800278a <I2C_MasterReceive_RXNE+0x82>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d179      	bne.n	800287e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f001 f840 	bl	8003810 <I2C_WaitOnSTOPRequestThroughIT>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d14c      	bne.n	8002830 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027b4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b40      	cmp	r3, #64	@ 0x40
 80027ee:	d10a      	bne.n	8002806 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fdbd 	bl	800237e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002804:	e044      	b.n	8002890 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d002      	beq.n	800281a <I2C_MasterReceive_RXNE+0x112>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b20      	cmp	r3, #32
 8002818:	d103      	bne.n	8002822 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002820:	e002      	b.n	8002828 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2212      	movs	r2, #18
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fd6e 	bl	800230a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800282e:	e02f      	b.n	8002890 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800283e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fd8a 	bl	8002390 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800287c:	e008      	b.n	8002890 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800288c:	605a      	str	r2, [r3, #4]
}
 800288e:	e7ff      	b.n	8002890 <I2C_MasterReceive_RXNE+0x188>
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d11b      	bne.n	80028e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028e6:	e0c4      	b.n	8002a72 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d129      	bne.n	8002946 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002900:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b04      	cmp	r3, #4
 8002906:	d00a      	beq.n	800291e <I2C_MasterReceive_BTF+0x86>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d007      	beq.n	800291e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800291c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002944:	e095      	b.n	8002a72 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d17d      	bne.n	8002a4c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d002      	beq.n	800295c <I2C_MasterReceive_BTF+0xc4>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b10      	cmp	r3, #16
 800295a:	d108      	bne.n	800296e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e016      	b.n	800299c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d002      	beq.n	800297a <I2C_MasterReceive_BTF+0xe2>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d108      	bne.n	800298c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b40      	cmp	r3, #64	@ 0x40
 8002a0a:	d10a      	bne.n	8002a22 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fcaf 	bl	800237e <HAL_I2C_MemRxCpltCallback>
}
 8002a20:	e027      	b.n	8002a72 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d002      	beq.n	8002a36 <I2C_MasterReceive_BTF+0x19e>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d103      	bne.n	8002a3e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a3c:	e002      	b.n	8002a44 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2212      	movs	r2, #18
 8002a42:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fc60 	bl	800230a <HAL_I2C_MasterRxCpltCallback>
}
 8002a4a:	e012      	b.n	8002a72 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b40      	cmp	r3, #64	@ 0x40
 8002a8c:	d117      	bne.n	8002abe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aa6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002aa8:	e067      	b.n	8002b7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	611a      	str	r2, [r3, #16]
}
 8002abc:	e05d      	b.n	8002b7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ac6:	d133      	bne.n	8002b30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b21      	cmp	r3, #33	@ 0x21
 8002ad2:	d109      	bne.n	8002ae8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	e008      	b.n	8002afa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <I2C_Master_SB+0x92>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d032      	beq.n	8002b7a <I2C_Master_SB+0x100>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02d      	beq.n	8002b7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b2c:	605a      	str	r2, [r3, #4]
}
 8002b2e:	e024      	b.n	8002b7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10e      	bne.n	8002b56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	11db      	asrs	r3, r3, #7
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0306 	and.w	r3, r3, #6
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f063 030f 	orn	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]
}
 8002b54:	e011      	b.n	8002b7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	11db      	asrs	r3, r3, #7
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f003 0306 	and.w	r3, r3, #6
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f063 030e 	orn	r3, r3, #14
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <I2C_Master_ADD10+0x26>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <I2C_Master_ADD10+0x48>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bca:	605a      	str	r2, [r3, #4]
  }
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr

08002bd6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b091      	sub	sp, #68	@ 0x44
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002be4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b22      	cmp	r3, #34	@ 0x22
 8002bfe:	f040 8174 	bne.w	8002eea <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <I2C_Master_ADDR+0x54>
 8002c0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002c0e:	2b40      	cmp	r3, #64	@ 0x40
 8002c10:	d10b      	bne.n	8002c2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	e16b      	b.n	8002f02 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11d      	bne.n	8002c6e <I2C_Master_ADDR+0x98>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c3a:	d118      	bne.n	8002c6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c6c:	e149      	b.n	8002f02 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d113      	bne.n	8002ca0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e120      	b.n	8002ee2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	f040 808a 	bne.w	8002dc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb2:	d137      	bne.n	8002d24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cd2:	d113      	bne.n	8002cfc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	e0f2      	b.n	8002ee2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e0de      	b.n	8002ee2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d02e      	beq.n	8002d88 <I2C_Master_ADDR+0x1b2>
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d02b      	beq.n	8002d88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d32:	2b12      	cmp	r3, #18
 8002d34:	d102      	bne.n	8002d3c <I2C_Master_ADDR+0x166>
 8002d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d125      	bne.n	8002d88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d00e      	beq.n	8002d60 <I2C_Master_ADDR+0x18a>
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d00b      	beq.n	8002d60 <I2C_Master_ADDR+0x18a>
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d008      	beq.n	8002d60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e007      	b.n	8002d70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	e0ac      	b.n	8002ee2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	61bb      	str	r3, [r7, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	e090      	b.n	8002ee2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d158      	bne.n	8002e7c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d021      	beq.n	8002e14 <I2C_Master_ADDR+0x23e>
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d01e      	beq.n	8002e14 <I2C_Master_ADDR+0x23e>
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d01b      	beq.n	8002e14 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e012      	b.n	8002e3a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e48:	d14b      	bne.n	8002ee2 <I2C_Master_ADDR+0x30c>
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e50:	d00b      	beq.n	8002e6a <I2C_Master_ADDR+0x294>
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d008      	beq.n	8002e6a <I2C_Master_ADDR+0x294>
 8002e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d005      	beq.n	8002e6a <I2C_Master_ADDR+0x294>
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d002      	beq.n	8002e6a <I2C_Master_ADDR+0x294>
 8002e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d13b      	bne.n	8002ee2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	e032      	b.n	8002ee2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e8a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e9a:	d117      	bne.n	8002ecc <I2C_Master_ADDR+0x2f6>
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ea2:	d00b      	beq.n	8002ebc <I2C_Master_ADDR+0x2e6>
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d008      	beq.n	8002ebc <I2C_Master_ADDR+0x2e6>
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d005      	beq.n	8002ebc <I2C_Master_ADDR+0x2e6>
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d002      	beq.n	8002ebc <I2C_Master_ADDR+0x2e6>
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d107      	bne.n	8002ecc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002eca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ee8:	e00b      	b.n	8002f02 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
}
 8002f00:	e7ff      	b.n	8002f02 <I2C_Master_ADDR+0x32c>
 8002f02:	bf00      	nop
 8002f04:	3744      	adds	r7, #68	@ 0x44
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02b      	beq.n	8002f7e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d114      	bne.n	8002f7e <I2C_SlaveTransmit_TXE+0x72>
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b29      	cmp	r3, #41	@ 0x29
 8002f58:	d111      	bne.n	8002f7e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2221      	movs	r2, #33	@ 0x21
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2228      	movs	r2, #40	@ 0x28
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff f9cf 	bl	800231c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d011      	beq.n	8002fbc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02c      	beq.n	800303a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691a      	ldr	r2, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d114      	bne.n	800303a <I2C_SlaveReceive_RXNE+0x74>
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b2a      	cmp	r3, #42	@ 0x2a
 8003014:	d111      	bne.n	800303a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003024:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2222      	movs	r2, #34	@ 0x22
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2228      	movs	r2, #40	@ 0x28
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff f97a 	bl	800232e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d012      	beq.n	800307a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800309e:	2b28      	cmp	r3, #40	@ 0x28
 80030a0:	d125      	bne.n	80030ee <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	81bb      	strh	r3, [r7, #12]
 80030d0:	e002      	b.n	80030d8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030e0:	89ba      	ldrh	r2, [r7, #12]
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff f92a 	bl	8002340 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030ec:	e00e      	b.n	800310c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003122:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003132:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003160:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003170:	d172      	bne.n	8003258 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b22      	cmp	r3, #34	@ 0x22
 8003176:	d002      	beq.n	800317e <I2C_Slave_STOPF+0x6a>
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b2a      	cmp	r3, #42	@ 0x2a
 800317c:	d135      	bne.n	80031ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fb88 	bl	80018cc <HAL_DMA_GetState>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d049      	beq.n	8003256 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c6:	4a69      	ldr	r2, [pc, #420]	@ (800336c <I2C_Slave_STOPF+0x258>)
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fb04 	bl	80017dc <HAL_DMA_Abort_IT>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03d      	beq.n	8003256 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031e4:	4610      	mov	r0, r2
 80031e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031e8:	e035      	b.n	8003256 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f043 0204 	orr.w	r2, r3, #4
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fb52 	bl	80018cc <HAL_DMA_GetState>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d014      	beq.n	8003258 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003232:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <I2C_Slave_STOPF+0x258>)
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe face 	bl	80017dc <HAL_DMA_Abort_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
 8003254:	e000      	b.n	8003258 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003256:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03e      	beq.n	80032e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b04      	cmp	r3, #4
 800326e:	d112      	bne.n	8003296 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a0:	2b40      	cmp	r3, #64	@ 0x40
 80032a2:	d112      	bne.n	80032ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f043 0204 	orr.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f8b7 	bl	800345c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032ee:	e039      	b.n	8003364 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80032f4:	d109      	bne.n	800330a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2228      	movs	r2, #40	@ 0x28
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff f812 	bl	800232e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b28      	cmp	r3, #40	@ 0x28
 8003314:	d111      	bne.n	800333a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a15      	ldr	r2, [pc, #84]	@ (8003370 <I2C_Slave_STOPF+0x25c>)
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff f811 	bl	800235a <HAL_I2C_ListenCpltCallback>
}
 8003338:	e014      	b.n	8003364 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	2b22      	cmp	r3, #34	@ 0x22
 8003340:	d002      	beq.n	8003348 <I2C_Slave_STOPF+0x234>
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	2b22      	cmp	r3, #34	@ 0x22
 8003346:	d10d      	bne.n	8003364 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe ffe5 	bl	800232e <HAL_I2C_SlaveRxCpltCallback>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	080036c1 	.word	0x080036c1
 8003370:	ffff0000 	.word	0xffff0000

08003374 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003382:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d002      	beq.n	8003396 <I2C_Slave_AF+0x22>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b20      	cmp	r3, #32
 8003394:	d129      	bne.n	80033ea <I2C_Slave_AF+0x76>
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b28      	cmp	r3, #40	@ 0x28
 800339a:	d126      	bne.n	80033ea <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a2e      	ldr	r2, [pc, #184]	@ (8003458 <I2C_Slave_AF+0xe4>)
 80033a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033b0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033ba:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ca:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe ffb9 	bl	800235a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033e8:	e031      	b.n	800344e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b21      	cmp	r3, #33	@ 0x21
 80033ee:	d129      	bne.n	8003444 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <I2C_Slave_AF+0xe4>)
 80033f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800341a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003424:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003434:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe fd50 	bl	8001edc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fe ff6d 	bl	800231c <HAL_I2C_SlaveTxCpltCallback>
}
 8003442:	e004      	b.n	800344e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	ffff0000 	.word	0xffff0000

0800345c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800346a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003472:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003474:	7bbb      	ldrb	r3, [r7, #14]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d002      	beq.n	8003480 <I2C_ITError+0x24>
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d10a      	bne.n	8003496 <I2C_ITError+0x3a>
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b22      	cmp	r3, #34	@ 0x22
 8003484:	d107      	bne.n	8003496 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003494:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800349c:	2b28      	cmp	r3, #40	@ 0x28
 800349e:	d107      	bne.n	80034b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2228      	movs	r2, #40	@ 0x28
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80034ae:	e015      	b.n	80034dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034be:	d00a      	beq.n	80034d6 <I2C_ITError+0x7a>
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	2b60      	cmp	r3, #96	@ 0x60
 80034c4:	d007      	beq.n	80034d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034ea:	d162      	bne.n	80035b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003500:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d020      	beq.n	800354c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	4a6a      	ldr	r2, [pc, #424]	@ (80036b8 <I2C_ITError+0x25c>)
 8003510:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe f960 	bl	80017dc <HAL_DMA_Abort_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8089 	beq.w	8003636 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003546:	4610      	mov	r0, r2
 8003548:	4798      	blx	r3
 800354a:	e074      	b.n	8003636 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	4a59      	ldr	r2, [pc, #356]	@ (80036b8 <I2C_ITError+0x25c>)
 8003552:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe f93f 	bl	80017dc <HAL_DMA_Abort_IT>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d068      	beq.n	8003636 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356e:	2b40      	cmp	r3, #64	@ 0x40
 8003570:	d10b      	bne.n	800358a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035ac:	4610      	mov	r0, r2
 80035ae:	4798      	blx	r3
 80035b0:	e041      	b.n	8003636 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b60      	cmp	r3, #96	@ 0x60
 80035bc:	d125      	bne.n	800360a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d6:	2b40      	cmp	r3, #64	@ 0x40
 80035d8:	d10b      	bne.n	80035f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fecd 	bl	80023a2 <HAL_I2C_AbortCpltCallback>
 8003608:	e015      	b.n	8003636 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d10b      	bne.n	8003630 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe fead 	bl	8002390 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d113      	bne.n	80036b0 <I2C_ITError+0x254>
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b28      	cmp	r3, #40	@ 0x28
 800368c:	d110      	bne.n	80036b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <I2C_ITError+0x260>)
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fe fe55 	bl	800235a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036b0:	bf00      	nop
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	080036c1 	.word	0x080036c1
 80036bc:	ffff0000 	.word	0xffff0000

080036c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036da:	4b4b      	ldr	r3, [pc, #300]	@ (8003808 <I2C_DMAAbort+0x148>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	08db      	lsrs	r3, r3, #3
 80036e0:	4a4a      	ldr	r2, [pc, #296]	@ (800380c <I2C_DMAAbort+0x14c>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	0a1a      	lsrs	r2, r3, #8
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00da      	lsls	r2, r3, #3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f043 0220 	orr.w	r2, r3, #32
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003706:	e00a      	b.n	800371e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3b01      	subs	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800371c:	d0ea      	beq.n	80036f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372a:	2200      	movs	r2, #0
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	2200      	movs	r2, #0
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800374c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003760:	2200      	movs	r2, #0
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	2200      	movs	r2, #0
 8003772:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b60      	cmp	r3, #96	@ 0x60
 800378e:	d10e      	bne.n	80037ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037a6:	6978      	ldr	r0, [r7, #20]
 80037a8:	f7fe fdfb 	bl	80023a2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037ac:	e027      	b.n	80037fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037b4:	2b28      	cmp	r3, #40	@ 0x28
 80037b6:	d117      	bne.n	80037e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2228      	movs	r2, #40	@ 0x28
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037e6:	e007      	b.n	80037f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7fe fdc9 	bl	8002390 <HAL_I2C_ErrorCallback>
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000000 	.word	0x20000000
 800380c:	14f8b589 	.word	0x14f8b589

08003810 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800381c:	4b13      	ldr	r3, [pc, #76]	@ (800386c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	4a13      	ldr	r2, [pc, #76]	@ (8003870 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	0a1a      	lsrs	r2, r3, #8
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3b01      	subs	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e008      	b.n	8003860 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d0e9      	beq.n	8003832 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000000 	.word	0x20000000
 8003870:	14f8b589 	.word	0x14f8b589

08003874 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003884:	d103      	bne.n	800388e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800388c:	e007      	b.n	800389e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003892:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003896:	d102      	bne.n	800389e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2208      	movs	r2, #8
 800389c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e272      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8087 	beq.w	80039d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038c8:	4b92      	ldr	r3, [pc, #584]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d00c      	beq.n	80038ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d112      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e>
 80038e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ec:	d10b      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ee:	4b89      	ldr	r3, [pc, #548]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x12c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d168      	bne.n	80039d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e24c      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x76>
 8003910:	4b80      	ldr	r3, [pc, #512]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7f      	ldr	r2, [pc, #508]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e02e      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x98>
 8003926:	4b7b      	ldr	r3, [pc, #492]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7a      	ldr	r2, [pc, #488]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b78      	ldr	r3, [pc, #480]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a77      	ldr	r2, [pc, #476]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003938:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0xbc>
 800394a:	4b72      	ldr	r3, [pc, #456]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a71      	ldr	r2, [pc, #452]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6f      	ldr	r3, [pc, #444]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 8003964:	4b6b      	ldr	r3, [pc, #428]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6a      	ldr	r2, [pc, #424]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b68      	ldr	r3, [pc, #416]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800397a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fd fdb4 	bl	80014f0 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fd fdb0 	bl	80014f0 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e200      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xe4>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fda0 	bl	80014f0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fd fd9c 	bl	80014f0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	@ 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1ec      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x10c>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ee:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x18c>
 80039fa:	4b46      	ldr	r3, [pc, #280]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c0      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4939      	ldr	r1, [pc, #228]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b36      	ldr	r3, [pc, #216]	@ (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fd fd55 	bl	80014f0 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fd fd51 	bl	80014f0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a1      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b2a      	ldr	r3, [pc, #168]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4927      	ldr	r1, [pc, #156]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b26      	ldr	r3, [pc, #152]	@ (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fd fd34 	bl	80014f0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd fd30 	bl	80014f0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e180      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d03a      	beq.n	8003b2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d019      	beq.n	8003af2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b17      	ldr	r3, [pc, #92]	@ (8003b1c <HAL_RCC_OscConfig+0x274>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fd fd14 	bl	80014f0 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fd fd10 	bl	80014f0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e160      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aea:	2001      	movs	r0, #1
 8003aec:	f000 face 	bl	800408c <RCC_Delay>
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <HAL_RCC_OscConfig+0x274>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af8:	f7fd fcfa 	bl	80014f0 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afe:	e00f      	b.n	8003b20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd fcf6 	bl	80014f0 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d908      	bls.n	8003b20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e146      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	42420000 	.word	0x42420000
 8003b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	4b92      	ldr	r3, [pc, #584]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e9      	bne.n	8003b00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a6 	beq.w	8003c86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b88      	ldr	r3, [pc, #544]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a87      	ldr	r2, [pc, #540]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b85      	ldr	r3, [pc, #532]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b82      	ldr	r3, [pc, #520]	@ (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d118      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b72:	4b7f      	ldr	r3, [pc, #508]	@ (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7e      	ldr	r2, [pc, #504]	@ (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7e:	f7fd fcb7 	bl	80014f0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fd fcb3 	bl	80014f0 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	@ 0x64
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e103      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x312>
 8003bac:	4b6f      	ldr	r3, [pc, #444]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	e02d      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x334>
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a69      	ldr	r2, [pc, #420]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	4b67      	ldr	r3, [pc, #412]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4a66      	ldr	r2, [pc, #408]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6213      	str	r3, [r2, #32]
 8003bda:	e01c      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x356>
 8003be4:	4b61      	ldr	r3, [pc, #388]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4a60      	ldr	r2, [pc, #384]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	6213      	str	r3, [r2, #32]
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	e00b      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a5a      	ldr	r2, [pc, #360]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6213      	str	r3, [r2, #32]
 8003c0a:	4b58      	ldr	r3, [pc, #352]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4a57      	ldr	r2, [pc, #348]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 0304 	bic.w	r3, r3, #4
 8003c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d015      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fc67 	bl	80014f0 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fd fc63 	bl	80014f0 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0b1      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ee      	beq.n	8003c26 <HAL_RCC_OscConfig+0x37e>
 8003c48:	e014      	b.n	8003c74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fc51 	bl	80014f0 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fd fc4d 	bl	80014f0 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e09b      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c68:	4b40      	ldr	r3, [pc, #256]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8087 	beq.w	8003d9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c90:	4b36      	ldr	r3, [pc, #216]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d061      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d146      	bne.n	8003d32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b33      	ldr	r3, [pc, #204]	@ (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fd fc21 	bl	80014f0 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fc1d 	bl	80014f0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e06d      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc4:	4b29      	ldr	r3, [pc, #164]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd8:	d108      	bne.n	8003cec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4921      	ldr	r1, [pc, #132]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cec:	4b1f      	ldr	r3, [pc, #124]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a19      	ldr	r1, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	491b      	ldr	r1, [pc, #108]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d04:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fbf1 	bl	80014f0 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fd fbed 	bl	80014f0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e03d      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	4b11      	ldr	r3, [pc, #68]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x46a>
 8003d30:	e035      	b.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fd fbda 	bl	80014f0 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd fbd6 	bl	80014f0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e026      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x498>
 8003d5e:	e01e      	b.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e019      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40007000 	.word	0x40007000
 8003d74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_OscConfig+0x500>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d0      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d910      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b67      	ldr	r3, [pc, #412]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 0207 	bic.w	r2, r3, #7
 8003dd6:	4965      	ldr	r1, [pc, #404]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a52      	ldr	r2, [pc, #328]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d040      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d115      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b41      	ldr	r3, [pc, #260]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e073      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06b      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4936      	ldr	r1, [pc, #216]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fd fb28 	bl	80014f0 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fd fb24 	bl	80014f0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e053      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2d      	ldr	r3, [pc, #180]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d210      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	4922      	ldr	r1, [pc, #136]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f26:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_RCC_ClockConfig+0x1cc>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x1d0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fa86 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	0800667c 	.word	0x0800667c
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fae:	e027      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fb2:	613b      	str	r3, [r7, #16]
      break;
 8003fb4:	e027      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0c9b      	lsrs	r3, r3, #18
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	4a17      	ldr	r2, [pc, #92]	@ (800401c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fce:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	0c5b      	lsrs	r3, r3, #17
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	4a11      	ldr	r2, [pc, #68]	@ (8004020 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fda:	5cd3      	ldrb	r3, [r2, r3]
 8003fdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fe2:	fb03 f202 	mul.w	r2, r3, r2
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e004      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8004024 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	613b      	str	r3, [r7, #16]
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8004002:	613b      	str	r3, [r7, #16]
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	693b      	ldr	r3, [r7, #16]
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	007a1200 	.word	0x007a1200
 800401c:	08006694 	.word	0x08006694
 8004020:	080066a4 	.word	0x080066a4
 8004024:	003d0900 	.word	0x003d0900

08004028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800402c:	4b02      	ldr	r3, [pc, #8]	@ (8004038 <HAL_RCC_GetHCLKFreq+0x10>)
 800402e:	681b      	ldr	r3, [r3, #0]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	20000000 	.word	0x20000000

0800403c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004040:	f7ff fff2 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b05      	ldr	r3, [pc, #20]	@ (800405c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4903      	ldr	r1, [pc, #12]	@ (8004060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000
 8004060:	0800668c 	.word	0x0800668c

08004064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004068:	f7ff ffde 	bl	8004028 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0adb      	lsrs	r3, r3, #11
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	@ (8004088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	0800668c 	.word	0x0800668c

0800408c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004094:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <RCC_Delay+0x34>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0a      	ldr	r2, [pc, #40]	@ (80040c4 <RCC_Delay+0x38>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040a8:	bf00      	nop
  }
  while (Delay --);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f9      	bne.n	80040a8 <RCC_Delay+0x1c>
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	20000000 	.word	0x20000000
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e076      	b.n	80041c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ea:	d009      	beq.n	8004100 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	61da      	str	r2, [r3, #28]
 80040f2:	e005      	b.n	8004100 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc ffca 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004136:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004184:	ea42 0103 	orr.w	r1, r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	0c1a      	lsrs	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f002 0204 	and.w	r2, r2, #4
 80041a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b08a      	sub	sp, #40	@ 0x28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041de:	2301      	movs	r3, #1
 80041e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e2:	f7fd f985 	bl	80014f0 <HAL_GetTick>
 80041e6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041ee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041fa:	7ffb      	ldrb	r3, [r7, #31]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d00c      	beq.n	800421a <HAL_SPI_TransmitReceive+0x4a>
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004206:	d106      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x46>
 8004210:	7ffb      	ldrb	r3, [r7, #31]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d001      	beq.n	800421a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
 8004218:	e17f      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_SPI_TransmitReceive+0x5c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_SPI_TransmitReceive+0x5c>
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e174      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <HAL_SPI_TransmitReceive+0x6e>
 800423a:	2302      	movs	r3, #2
 800423c:	e16d      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b04      	cmp	r3, #4
 8004250:	d003      	beq.n	800425a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2205      	movs	r2, #5
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	887a      	ldrh	r2, [r7, #2]
 800427c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429a:	2b40      	cmp	r3, #64	@ 0x40
 800429c:	d007      	beq.n	80042ae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042b6:	d17e      	bne.n	80043b6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0xf6>
 80042c0:	8afb      	ldrh	r3, [r7, #22]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d16c      	bne.n	80043a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ea:	e059      	b.n	80043a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d11b      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x162>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <HAL_SPI_TransmitReceive+0x162>
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2b01      	cmp	r3, #1
 8004308:	d113      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d119      	bne.n	8004374 <HAL_SPI_TransmitReceive+0x1a4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d014      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004354:	b292      	uxth	r2, r2
 8004356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	1c9a      	adds	r2, r3, #2
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004370:	2301      	movs	r3, #1
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004374:	f7fd f8bc 	bl	80014f0 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004380:	429a      	cmp	r2, r3
 8004382:	d80d      	bhi.n	80043a0 <HAL_SPI_TransmitReceive+0x1d0>
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d009      	beq.n	80043a0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e0bc      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1a0      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x11c>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d19b      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x11c>
 80043b4:	e082      	b.n	80044bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_SPI_TransmitReceive+0x1f4>
 80043be:	8afb      	ldrh	r3, [r7, #22]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d171      	bne.n	80044a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043ea:	e05d      	b.n	80044a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d11c      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x264>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <HAL_SPI_TransmitReceive+0x264>
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	2b01      	cmp	r3, #1
 8004408:	d114      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d119      	bne.n	8004476 <HAL_SPI_TransmitReceive+0x2a6>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d014      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004472:	2301      	movs	r3, #1
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004476:	f7fd f83b 	bl	80014f0 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004482:	429a      	cmp	r2, r3
 8004484:	d803      	bhi.n	800448e <HAL_SPI_TransmitReceive+0x2be>
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d102      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x2c4>
 800448e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e038      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d19c      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x21c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d197      	bne.n	80043ec <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044bc:	6a3a      	ldr	r2, [r7, #32]
 80044be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f9b3 	bl	800482c <SPI_EndRxTxTransaction>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e01d      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004518:	2300      	movs	r3, #0
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3728      	adds	r7, #40	@ 0x28
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10e      	bne.n	8004564 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
    return;
 8004562:	e0b7      	b.n	80046d4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_SPI_IRQHandler+0x5e>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
    return;
 8004580:	e0a8      	b.n	80046d4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0320 	and.w	r3, r3, #32
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_SPI_IRQHandler+0x74>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 809e 	beq.w	80046d4 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8098 	beq.w	80046d4 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d023      	beq.n	80045f6 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d011      	beq.n	80045de <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	f043 0204 	orr.w	r2, r3, #4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	e00b      	b.n	80045f6 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
        return;
 80045f4:	e06e      	b.n	80046d4 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d014      	beq.n	800462a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04f      	beq.n	80046d2 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004640:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <HAL_SPI_IRQHandler+0x13a>
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d034      	beq.n	80046c8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0203 	bic.w	r2, r2, #3
 800466c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d011      	beq.n	800469a <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467a:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <HAL_SPI_IRQHandler+0x1b8>)
 800467c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd f8aa 	bl	80017dc <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a6:	4a0d      	ldr	r2, [pc, #52]	@ (80046dc <HAL_SPI_IRQHandler+0x1b8>)
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fd f894 	bl	80017dc <HAL_DMA_Abort_IT>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80046c6:	e003      	b.n	80046d0 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f809 	bl	80046e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046ce:	e000      	b.n	80046d2 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80046d0:	bf00      	nop
    return;
 80046d2:	bf00      	nop
  }
}
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	080046f3 	.word	0x080046f3

080046e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff ffe7 	bl	80046e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800472c:	f7fc fee0 	bl	80014f0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	4413      	add	r3, r2
 800473a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800473c:	f7fc fed8 	bl	80014f0 <HAL_GetTick>
 8004740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004742:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	015b      	lsls	r3, r3, #5
 8004748:	0d1b      	lsrs	r3, r3, #20
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004752:	e054      	b.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d050      	beq.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800475c:	f7fc fec8 	bl	80014f0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	429a      	cmp	r2, r3
 800476a:	d902      	bls.n	8004772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d13d      	bne.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800478a:	d111      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004794:	d004      	beq.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479e:	d107      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047b8:	d10f      	bne.n	80047da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e017      	b.n	800481e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	429a      	cmp	r2, r3
 800481a:	d19b      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000000 	.word	0x20000000

0800482c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2201      	movs	r2, #1
 8004840:	2102      	movs	r1, #2
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff ff6a 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e013      	b.n	8004886 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	@ 0x80
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f7ff ff57 	bl	800471c <SPI_WaitFlagStateUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004878:	f043 0220 	orr.w	r2, r3, #32
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e000      	b.n	8004886 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e042      	b.n	8004926 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc fc4f 	bl	8001158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2224      	movs	r2, #36	@ 0x24
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fd62 	bl	800539c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b08a      	sub	sp, #40	@ 0x28
 8004932:	af02      	add	r7, sp, #8
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d175      	bne.n	8004a3a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_UART_Transmit+0x2c>
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e06e      	b.n	8004a3c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	@ 0x21
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800496c:	f7fc fdc0 	bl	80014f0 <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004986:	d108      	bne.n	800499a <HAL_UART_Transmit+0x6c>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61bb      	str	r3, [r7, #24]
 8004998:	e003      	b.n	80049a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049a2:	e02e      	b.n	8004a02 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	2200      	movs	r2, #0
 80049ac:	2180      	movs	r1, #128	@ 0x80
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fb00 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e03a      	b.n	8004a3c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	3302      	adds	r3, #2
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	e007      	b.n	80049f4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1cb      	bne.n	80049a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	2140      	movs	r1, #64	@ 0x40
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 facc 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e006      	b.n	8004a3c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
  }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3720      	adds	r7, #32
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0ba      	sub	sp, #232	@ 0xe8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10f      	bne.n	8004aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fbbc 	bl	8005220 <UART_Receive_IT>
      return;
 8004aa8:	e25b      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80de 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
 8004ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80d1 	beq.w	8004c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
 8004afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
 8004b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d011      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f043 0208 	orr.w	r2, r3, #8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 81f2 	beq.w	8004f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d008      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fb47 	bl	8005220 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <HAL_UART_IRQHandler+0x17a>
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d04f      	beq.n	8004c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa51 	bl	8005066 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d041      	beq.n	8004c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1d9      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d013      	beq.n	8004c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e24 <HAL_UART_IRQHandler+0x3e0>)
 8004c2c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fc fdd2 	bl	80017dc <HAL_DMA_Abort_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c48:	4610      	mov	r0, r2
 8004c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4c:	e00e      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f99c 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e00a      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f998 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	e006      	b.n	8004c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f994 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c6a:	e175      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	bf00      	nop
    return;
 8004c6e:	e173      	b.n	8004f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	f040 814f 	bne.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8148 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8141 	beq.w	8004f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80b6 	beq.w	8004e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8145 	beq.w	8004f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	f080 813e 	bcs.w	8004f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	f000 8088 	beq.w	8004e04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1d9      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3314      	adds	r3, #20
 8004d46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e1      	bne.n	8004d40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004da0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004da2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004da6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e3      	bne.n	8004d7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd4:	f023 0310 	bic.w	r3, r3, #16
 8004dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004de6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004de8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc fcb1 	bl	8001766 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8bf 	bl	8004f9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e20:	e09c      	b.n	8004f5c <HAL_UART_IRQHandler+0x518>
 8004e22:	bf00      	nop
 8004e24:	0800512b 	.word	0x0800512b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808e 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8089 	beq.w	8004f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e7a:	e841 2300 	strex	r3, r2, [r1]
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1e3      	bne.n	8004e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	623b      	str	r3, [r7, #32]
   return(result);
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3314      	adds	r3, #20
 8004ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e3      	bne.n	8004e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0310 	bic.w	r3, r3, #16
 8004ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	330c      	adds	r3, #12
 8004eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ef0:	61fa      	str	r2, [r7, #28]
 8004ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	69b9      	ldr	r1, [r7, #24]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	617b      	str	r3, [r7, #20]
   return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e3      	bne.n	8004ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f844 	bl	8004f9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f16:	e023      	b.n	8004f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
 8004f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f90e 	bl	8005152 <UART_Transmit_IT>
    return;
 8004f36:	e014      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f94d 	bl	80051f0 <UART_EndTransmit_IT>
    return;
 8004f56:	e004      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f58:	bf00      	nop
 8004f5a:	e002      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f60:	bf00      	nop
  }
}
 8004f62:	37e8      	adds	r7, #232	@ 0xe8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr

08004f9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	e03b      	b.n	800503e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d037      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fc fa8f 	bl	80014f0 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e03a      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d023      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b80      	cmp	r3, #128	@ 0x80
 8004ffa:	d020      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b40      	cmp	r3, #64	@ 0x40
 8005000:	d01d      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d116      	bne.n	800503e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f81d 	bl	8005066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2208      	movs	r2, #8
 8005030:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e00f      	b.n	800505e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4013      	ands	r3, r2
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	429a      	cmp	r2, r3
 800505a:	d0b4      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005066:	b480      	push	{r7}
 8005068:	b095      	sub	sp, #84	@ 0x54
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	330c      	adds	r3, #12
 8005074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800507e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	330c      	adds	r3, #12
 800508c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800508e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d119      	bne.n	8005112 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f023 0310 	bic.w	r3, r3, #16
 80050f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050fe:	61ba      	str	r2, [r7, #24]
 8005100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	6979      	ldr	r1, [r7, #20]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	613b      	str	r3, [r7, #16]
   return(result);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005120:	bf00      	nop
 8005122:	3754      	adds	r7, #84	@ 0x54
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ff21 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b21      	cmp	r3, #33	@ 0x21
 8005164:	d13e      	bne.n	80051e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516e:	d114      	bne.n	800519a <UART_Transmit_IT+0x48>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d110      	bne.n	800519a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800518c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	621a      	str	r2, [r3, #32]
 8005198:	e008      	b.n	80051ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	1c59      	adds	r1, r3, #1
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6211      	str	r1, [r2, #32]
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005206:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff fea9 	bl	8004f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	@ 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b22      	cmp	r3, #34	@ 0x22
 8005232:	f040 80ae 	bne.w	8005392 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523e:	d117      	bne.n	8005270 <UART_Receive_IT+0x50>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d113      	bne.n	8005270 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525e:	b29a      	uxth	r2, r3
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
 800526e:	e026      	b.n	80052be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005274:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005282:	d007      	beq.n	8005294 <UART_Receive_IT+0x74>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <UART_Receive_IT+0x82>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	e008      	b.n	80052b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4619      	mov	r1, r3
 80052cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d15d      	bne.n	800538e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0220 	bic.w	r2, r2, #32
 80052e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005314:	2b01      	cmp	r3, #1
 8005316:	d135      	bne.n	8005384 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	613b      	str	r3, [r7, #16]
   return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f023 0310 	bic.w	r3, r3, #16
 8005334:	627b      	str	r3, [r7, #36]	@ 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533e:	623a      	str	r2, [r7, #32]
 8005340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	69f9      	ldr	r1, [r7, #28]
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	61bb      	str	r3, [r7, #24]
   return(result);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d10a      	bne.n	8005376 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fe0e 	bl	8004f9e <HAL_UARTEx_RxEventCallback>
 8005382:	e002      	b.n	800538a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff fdf8 	bl	8004f7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	e002      	b.n	8005394 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e000      	b.n	8005394 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005392:	2302      	movs	r3, #2
  }
}
 8005394:	4618      	mov	r0, r3
 8005396:	3730      	adds	r7, #48	@ 0x30
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053d6:	f023 030c 	bic.w	r3, r3, #12
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2c      	ldr	r2, [pc, #176]	@ (80054b0 <UART_SetConfig+0x114>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d103      	bne.n	800540c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fe fe2e 	bl	8004064 <HAL_RCC_GetPCLK2Freq>
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	e002      	b.n	8005412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800540c:	f7fe fe16 	bl	800403c <HAL_RCC_GetPCLK1Freq>
 8005410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009a      	lsls	r2, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <UART_SetConfig+0x118>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	0119      	lsls	r1, r3, #4
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	009a      	lsls	r2, r3, #2
 800543c:	441a      	add	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	fbb2 f2f3 	udiv	r2, r2, r3
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <UART_SetConfig+0x118>)
 800544a:	fba3 0302 	umull	r0, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2064      	movs	r0, #100	@ 0x64
 8005452:	fb00 f303 	mul.w	r3, r0, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	3332      	adds	r3, #50	@ 0x32
 800545c:	4a15      	ldr	r2, [pc, #84]	@ (80054b4 <UART_SetConfig+0x118>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005468:	4419      	add	r1, r3
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009a      	lsls	r2, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005480:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <UART_SetConfig+0x118>)
 8005482:	fba3 0302 	umull	r0, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2064      	movs	r0, #100	@ 0x64
 800548a:	fb00 f303 	mul.w	r3, r0, r3
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	3332      	adds	r3, #50	@ 0x32
 8005494:	4a07      	ldr	r2, [pc, #28]	@ (80054b4 <UART_SetConfig+0x118>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	440a      	add	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40013800 	.word	0x40013800
 80054b4:	51eb851f 	.word	0x51eb851f

080054b8 <std>:
 80054b8:	2300      	movs	r3, #0
 80054ba:	b510      	push	{r4, lr}
 80054bc:	4604      	mov	r4, r0
 80054be:	e9c0 3300 	strd	r3, r3, [r0]
 80054c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054c6:	6083      	str	r3, [r0, #8]
 80054c8:	8181      	strh	r1, [r0, #12]
 80054ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80054cc:	81c2      	strh	r2, [r0, #14]
 80054ce:	6183      	str	r3, [r0, #24]
 80054d0:	4619      	mov	r1, r3
 80054d2:	2208      	movs	r2, #8
 80054d4:	305c      	adds	r0, #92	@ 0x5c
 80054d6:	f000 fa01 	bl	80058dc <memset>
 80054da:	4b0d      	ldr	r3, [pc, #52]	@ (8005510 <std+0x58>)
 80054dc:	6224      	str	r4, [r4, #32]
 80054de:	6263      	str	r3, [r4, #36]	@ 0x24
 80054e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <std+0x5c>)
 80054e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <std+0x60>)
 80054e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054e8:	4b0c      	ldr	r3, [pc, #48]	@ (800551c <std+0x64>)
 80054ea:	6323      	str	r3, [r4, #48]	@ 0x30
 80054ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <std+0x68>)
 80054ee:	429c      	cmp	r4, r3
 80054f0:	d006      	beq.n	8005500 <std+0x48>
 80054f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054f6:	4294      	cmp	r4, r2
 80054f8:	d002      	beq.n	8005500 <std+0x48>
 80054fa:	33d0      	adds	r3, #208	@ 0xd0
 80054fc:	429c      	cmp	r4, r3
 80054fe:	d105      	bne.n	800550c <std+0x54>
 8005500:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005508:	f000 ba60 	b.w	80059cc <__retarget_lock_init_recursive>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	0800572d 	.word	0x0800572d
 8005514:	0800574f 	.word	0x0800574f
 8005518:	08005787 	.word	0x08005787
 800551c:	080057ab 	.word	0x080057ab
 8005520:	200002b0 	.word	0x200002b0

08005524 <stdio_exit_handler>:
 8005524:	4a02      	ldr	r2, [pc, #8]	@ (8005530 <stdio_exit_handler+0xc>)
 8005526:	4903      	ldr	r1, [pc, #12]	@ (8005534 <stdio_exit_handler+0x10>)
 8005528:	4803      	ldr	r0, [pc, #12]	@ (8005538 <stdio_exit_handler+0x14>)
 800552a:	f000 b869 	b.w	8005600 <_fwalk_sglue>
 800552e:	bf00      	nop
 8005530:	2000000c 	.word	0x2000000c
 8005534:	08006265 	.word	0x08006265
 8005538:	2000001c 	.word	0x2000001c

0800553c <cleanup_stdio>:
 800553c:	6841      	ldr	r1, [r0, #4]
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <cleanup_stdio+0x34>)
 8005540:	b510      	push	{r4, lr}
 8005542:	4299      	cmp	r1, r3
 8005544:	4604      	mov	r4, r0
 8005546:	d001      	beq.n	800554c <cleanup_stdio+0x10>
 8005548:	f000 fe8c 	bl	8006264 <_fflush_r>
 800554c:	68a1      	ldr	r1, [r4, #8]
 800554e:	4b09      	ldr	r3, [pc, #36]	@ (8005574 <cleanup_stdio+0x38>)
 8005550:	4299      	cmp	r1, r3
 8005552:	d002      	beq.n	800555a <cleanup_stdio+0x1e>
 8005554:	4620      	mov	r0, r4
 8005556:	f000 fe85 	bl	8006264 <_fflush_r>
 800555a:	68e1      	ldr	r1, [r4, #12]
 800555c:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <cleanup_stdio+0x3c>)
 800555e:	4299      	cmp	r1, r3
 8005560:	d004      	beq.n	800556c <cleanup_stdio+0x30>
 8005562:	4620      	mov	r0, r4
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f000 be7c 	b.w	8006264 <_fflush_r>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	200002b0 	.word	0x200002b0
 8005574:	20000318 	.word	0x20000318
 8005578:	20000380 	.word	0x20000380

0800557c <global_stdio_init.part.0>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <global_stdio_init.part.0+0x30>)
 8005580:	4c0b      	ldr	r4, [pc, #44]	@ (80055b0 <global_stdio_init.part.0+0x34>)
 8005582:	4a0c      	ldr	r2, [pc, #48]	@ (80055b4 <global_stdio_init.part.0+0x38>)
 8005584:	4620      	mov	r0, r4
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	2104      	movs	r1, #4
 800558a:	2200      	movs	r2, #0
 800558c:	f7ff ff94 	bl	80054b8 <std>
 8005590:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005594:	2201      	movs	r2, #1
 8005596:	2109      	movs	r1, #9
 8005598:	f7ff ff8e 	bl	80054b8 <std>
 800559c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055a0:	2202      	movs	r2, #2
 80055a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a6:	2112      	movs	r1, #18
 80055a8:	f7ff bf86 	b.w	80054b8 <std>
 80055ac:	200003e8 	.word	0x200003e8
 80055b0:	200002b0 	.word	0x200002b0
 80055b4:	08005525 	.word	0x08005525

080055b8 <__sfp_lock_acquire>:
 80055b8:	4801      	ldr	r0, [pc, #4]	@ (80055c0 <__sfp_lock_acquire+0x8>)
 80055ba:	f000 ba08 	b.w	80059ce <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	200003f1 	.word	0x200003f1

080055c4 <__sfp_lock_release>:
 80055c4:	4801      	ldr	r0, [pc, #4]	@ (80055cc <__sfp_lock_release+0x8>)
 80055c6:	f000 ba03 	b.w	80059d0 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	200003f1 	.word	0x200003f1

080055d0 <__sinit>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	f7ff fff0 	bl	80055b8 <__sfp_lock_acquire>
 80055d8:	6a23      	ldr	r3, [r4, #32]
 80055da:	b11b      	cbz	r3, 80055e4 <__sinit+0x14>
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f7ff bff0 	b.w	80055c4 <__sfp_lock_release>
 80055e4:	4b04      	ldr	r3, [pc, #16]	@ (80055f8 <__sinit+0x28>)
 80055e6:	6223      	str	r3, [r4, #32]
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <__sinit+0x2c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f5      	bne.n	80055dc <__sinit+0xc>
 80055f0:	f7ff ffc4 	bl	800557c <global_stdio_init.part.0>
 80055f4:	e7f2      	b.n	80055dc <__sinit+0xc>
 80055f6:	bf00      	nop
 80055f8:	0800553d 	.word	0x0800553d
 80055fc:	200003e8 	.word	0x200003e8

08005600 <_fwalk_sglue>:
 8005600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005604:	4607      	mov	r7, r0
 8005606:	4688      	mov	r8, r1
 8005608:	4614      	mov	r4, r2
 800560a:	2600      	movs	r6, #0
 800560c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005610:	f1b9 0901 	subs.w	r9, r9, #1
 8005614:	d505      	bpl.n	8005622 <_fwalk_sglue+0x22>
 8005616:	6824      	ldr	r4, [r4, #0]
 8005618:	2c00      	cmp	r4, #0
 800561a:	d1f7      	bne.n	800560c <_fwalk_sglue+0xc>
 800561c:	4630      	mov	r0, r6
 800561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d907      	bls.n	8005638 <_fwalk_sglue+0x38>
 8005628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800562c:	3301      	adds	r3, #1
 800562e:	d003      	beq.n	8005638 <_fwalk_sglue+0x38>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	47c0      	blx	r8
 8005636:	4306      	orrs	r6, r0
 8005638:	3568      	adds	r5, #104	@ 0x68
 800563a:	e7e9      	b.n	8005610 <_fwalk_sglue+0x10>

0800563c <iprintf>:
 800563c:	b40f      	push	{r0, r1, r2, r3}
 800563e:	b507      	push	{r0, r1, r2, lr}
 8005640:	4906      	ldr	r1, [pc, #24]	@ (800565c <iprintf+0x20>)
 8005642:	ab04      	add	r3, sp, #16
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	f853 2b04 	ldr.w	r2, [r3], #4
 800564a:	6881      	ldr	r1, [r0, #8]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	f000 fadf 	bl	8005c10 <_vfiprintf_r>
 8005652:	b003      	add	sp, #12
 8005654:	f85d eb04 	ldr.w	lr, [sp], #4
 8005658:	b004      	add	sp, #16
 800565a:	4770      	bx	lr
 800565c:	20000018 	.word	0x20000018

08005660 <putchar>:
 8005660:	4b02      	ldr	r3, [pc, #8]	@ (800566c <putchar+0xc>)
 8005662:	4601      	mov	r1, r0
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	6882      	ldr	r2, [r0, #8]
 8005668:	f000 be85 	b.w	8006376 <_putc_r>
 800566c:	20000018 	.word	0x20000018

08005670 <_puts_r>:
 8005670:	6a03      	ldr	r3, [r0, #32]
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	4605      	mov	r5, r0
 8005676:	460e      	mov	r6, r1
 8005678:	6884      	ldr	r4, [r0, #8]
 800567a:	b90b      	cbnz	r3, 8005680 <_puts_r+0x10>
 800567c:	f7ff ffa8 	bl	80055d0 <__sinit>
 8005680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005682:	07db      	lsls	r3, r3, #31
 8005684:	d405      	bmi.n	8005692 <_puts_r+0x22>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	0598      	lsls	r0, r3, #22
 800568a:	d402      	bmi.n	8005692 <_puts_r+0x22>
 800568c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800568e:	f000 f99e 	bl	80059ce <__retarget_lock_acquire_recursive>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	0719      	lsls	r1, r3, #28
 8005696:	d502      	bpl.n	800569e <_puts_r+0x2e>
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d135      	bne.n	800570a <_puts_r+0x9a>
 800569e:	4621      	mov	r1, r4
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 f8c5 	bl	8005830 <__swsetup_r>
 80056a6:	b380      	cbz	r0, 800570a <_puts_r+0x9a>
 80056a8:	f04f 35ff 	mov.w	r5, #4294967295
 80056ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ae:	07da      	lsls	r2, r3, #31
 80056b0:	d405      	bmi.n	80056be <_puts_r+0x4e>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	059b      	lsls	r3, r3, #22
 80056b6:	d402      	bmi.n	80056be <_puts_r+0x4e>
 80056b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ba:	f000 f989 	bl	80059d0 <__retarget_lock_release_recursive>
 80056be:	4628      	mov	r0, r5
 80056c0:	bd70      	pop	{r4, r5, r6, pc}
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da04      	bge.n	80056d0 <_puts_r+0x60>
 80056c6:	69a2      	ldr	r2, [r4, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	dc17      	bgt.n	80056fc <_puts_r+0x8c>
 80056cc:	290a      	cmp	r1, #10
 80056ce:	d015      	beq.n	80056fc <_puts_r+0x8c>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	7019      	strb	r1, [r3, #0]
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056de:	3b01      	subs	r3, #1
 80056e0:	60a3      	str	r3, [r4, #8]
 80056e2:	2900      	cmp	r1, #0
 80056e4:	d1ed      	bne.n	80056c2 <_puts_r+0x52>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da11      	bge.n	800570e <_puts_r+0x9e>
 80056ea:	4622      	mov	r2, r4
 80056ec:	210a      	movs	r1, #10
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f85f 	bl	80057b2 <__swbuf_r>
 80056f4:	3001      	adds	r0, #1
 80056f6:	d0d7      	beq.n	80056a8 <_puts_r+0x38>
 80056f8:	250a      	movs	r5, #10
 80056fa:	e7d7      	b.n	80056ac <_puts_r+0x3c>
 80056fc:	4622      	mov	r2, r4
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 f857 	bl	80057b2 <__swbuf_r>
 8005704:	3001      	adds	r0, #1
 8005706:	d1e7      	bne.n	80056d8 <_puts_r+0x68>
 8005708:	e7ce      	b.n	80056a8 <_puts_r+0x38>
 800570a:	3e01      	subs	r6, #1
 800570c:	e7e4      	b.n	80056d8 <_puts_r+0x68>
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	6022      	str	r2, [r4, #0]
 8005714:	220a      	movs	r2, #10
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e7ee      	b.n	80056f8 <_puts_r+0x88>
	...

0800571c <puts>:
 800571c:	4b02      	ldr	r3, [pc, #8]	@ (8005728 <puts+0xc>)
 800571e:	4601      	mov	r1, r0
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	f7ff bfa5 	b.w	8005670 <_puts_r>
 8005726:	bf00      	nop
 8005728:	20000018 	.word	0x20000018

0800572c <__sread>:
 800572c:	b510      	push	{r4, lr}
 800572e:	460c      	mov	r4, r1
 8005730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005734:	f000 f8fc 	bl	8005930 <_read_r>
 8005738:	2800      	cmp	r0, #0
 800573a:	bfab      	itete	ge
 800573c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800573e:	89a3      	ldrhlt	r3, [r4, #12]
 8005740:	181b      	addge	r3, r3, r0
 8005742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005746:	bfac      	ite	ge
 8005748:	6563      	strge	r3, [r4, #84]	@ 0x54
 800574a:	81a3      	strhlt	r3, [r4, #12]
 800574c:	bd10      	pop	{r4, pc}

0800574e <__swrite>:
 800574e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005752:	461f      	mov	r7, r3
 8005754:	898b      	ldrh	r3, [r1, #12]
 8005756:	4605      	mov	r5, r0
 8005758:	05db      	lsls	r3, r3, #23
 800575a:	460c      	mov	r4, r1
 800575c:	4616      	mov	r6, r2
 800575e:	d505      	bpl.n	800576c <__swrite+0x1e>
 8005760:	2302      	movs	r3, #2
 8005762:	2200      	movs	r2, #0
 8005764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005768:	f000 f8d0 	bl	800590c <_lseek_r>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	4632      	mov	r2, r6
 8005770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	4628      	mov	r0, r5
 8005778:	463b      	mov	r3, r7
 800577a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800577e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005782:	f000 b8e7 	b.w	8005954 <_write_r>

08005786 <__sseek>:
 8005786:	b510      	push	{r4, lr}
 8005788:	460c      	mov	r4, r1
 800578a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578e:	f000 f8bd 	bl	800590c <_lseek_r>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	bf15      	itete	ne
 8005798:	6560      	strne	r0, [r4, #84]	@ 0x54
 800579a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800579e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057a2:	81a3      	strheq	r3, [r4, #12]
 80057a4:	bf18      	it	ne
 80057a6:	81a3      	strhne	r3, [r4, #12]
 80057a8:	bd10      	pop	{r4, pc}

080057aa <__sclose>:
 80057aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ae:	f000 b89d 	b.w	80058ec <_close_r>

080057b2 <__swbuf_r>:
 80057b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b4:	460e      	mov	r6, r1
 80057b6:	4614      	mov	r4, r2
 80057b8:	4605      	mov	r5, r0
 80057ba:	b118      	cbz	r0, 80057c4 <__swbuf_r+0x12>
 80057bc:	6a03      	ldr	r3, [r0, #32]
 80057be:	b90b      	cbnz	r3, 80057c4 <__swbuf_r+0x12>
 80057c0:	f7ff ff06 	bl	80055d0 <__sinit>
 80057c4:	69a3      	ldr	r3, [r4, #24]
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	071a      	lsls	r2, r3, #28
 80057cc:	d501      	bpl.n	80057d2 <__swbuf_r+0x20>
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	b943      	cbnz	r3, 80057e4 <__swbuf_r+0x32>
 80057d2:	4621      	mov	r1, r4
 80057d4:	4628      	mov	r0, r5
 80057d6:	f000 f82b 	bl	8005830 <__swsetup_r>
 80057da:	b118      	cbz	r0, 80057e4 <__swbuf_r+0x32>
 80057dc:	f04f 37ff 	mov.w	r7, #4294967295
 80057e0:	4638      	mov	r0, r7
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	6922      	ldr	r2, [r4, #16]
 80057e8:	b2f6      	uxtb	r6, r6
 80057ea:	1a98      	subs	r0, r3, r2
 80057ec:	6963      	ldr	r3, [r4, #20]
 80057ee:	4637      	mov	r7, r6
 80057f0:	4283      	cmp	r3, r0
 80057f2:	dc05      	bgt.n	8005800 <__swbuf_r+0x4e>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 fd34 	bl	8006264 <_fflush_r>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1ed      	bne.n	80057dc <__swbuf_r+0x2a>
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	3b01      	subs	r3, #1
 8005804:	60a3      	str	r3, [r4, #8]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	6022      	str	r2, [r4, #0]
 800580c:	701e      	strb	r6, [r3, #0]
 800580e:	6962      	ldr	r2, [r4, #20]
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	429a      	cmp	r2, r3
 8005814:	d004      	beq.n	8005820 <__swbuf_r+0x6e>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	07db      	lsls	r3, r3, #31
 800581a:	d5e1      	bpl.n	80057e0 <__swbuf_r+0x2e>
 800581c:	2e0a      	cmp	r6, #10
 800581e:	d1df      	bne.n	80057e0 <__swbuf_r+0x2e>
 8005820:	4621      	mov	r1, r4
 8005822:	4628      	mov	r0, r5
 8005824:	f000 fd1e 	bl	8006264 <_fflush_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	d0d9      	beq.n	80057e0 <__swbuf_r+0x2e>
 800582c:	e7d6      	b.n	80057dc <__swbuf_r+0x2a>
	...

08005830 <__swsetup_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <__swsetup_r+0xa8>)
 8005834:	4605      	mov	r5, r0
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	460c      	mov	r4, r1
 800583a:	b118      	cbz	r0, 8005844 <__swsetup_r+0x14>
 800583c:	6a03      	ldr	r3, [r0, #32]
 800583e:	b90b      	cbnz	r3, 8005844 <__swsetup_r+0x14>
 8005840:	f7ff fec6 	bl	80055d0 <__sinit>
 8005844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005848:	0719      	lsls	r1, r3, #28
 800584a:	d422      	bmi.n	8005892 <__swsetup_r+0x62>
 800584c:	06da      	lsls	r2, r3, #27
 800584e:	d407      	bmi.n	8005860 <__swsetup_r+0x30>
 8005850:	2209      	movs	r2, #9
 8005852:	602a      	str	r2, [r5, #0]
 8005854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	e033      	b.n	80058c8 <__swsetup_r+0x98>
 8005860:	0758      	lsls	r0, r3, #29
 8005862:	d512      	bpl.n	800588a <__swsetup_r+0x5a>
 8005864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005866:	b141      	cbz	r1, 800587a <__swsetup_r+0x4a>
 8005868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <__swsetup_r+0x46>
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f8af 	bl	80059d4 <_free_r>
 8005876:	2300      	movs	r3, #0
 8005878:	6363      	str	r3, [r4, #52]	@ 0x34
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005880:	81a3      	strh	r3, [r4, #12]
 8005882:	2300      	movs	r3, #0
 8005884:	6063      	str	r3, [r4, #4]
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	b94b      	cbnz	r3, 80058aa <__swsetup_r+0x7a>
 8005896:	89a3      	ldrh	r3, [r4, #12]
 8005898:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800589c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a0:	d003      	beq.n	80058aa <__swsetup_r+0x7a>
 80058a2:	4621      	mov	r1, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fd2a 	bl	80062fe <__smakebuf_r>
 80058aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ae:	f013 0201 	ands.w	r2, r3, #1
 80058b2:	d00a      	beq.n	80058ca <__swsetup_r+0x9a>
 80058b4:	2200      	movs	r2, #0
 80058b6:	60a2      	str	r2, [r4, #8]
 80058b8:	6962      	ldr	r2, [r4, #20]
 80058ba:	4252      	negs	r2, r2
 80058bc:	61a2      	str	r2, [r4, #24]
 80058be:	6922      	ldr	r2, [r4, #16]
 80058c0:	b942      	cbnz	r2, 80058d4 <__swsetup_r+0xa4>
 80058c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058c6:	d1c5      	bne.n	8005854 <__swsetup_r+0x24>
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	0799      	lsls	r1, r3, #30
 80058cc:	bf58      	it	pl
 80058ce:	6962      	ldrpl	r2, [r4, #20]
 80058d0:	60a2      	str	r2, [r4, #8]
 80058d2:	e7f4      	b.n	80058be <__swsetup_r+0x8e>
 80058d4:	2000      	movs	r0, #0
 80058d6:	e7f7      	b.n	80058c8 <__swsetup_r+0x98>
 80058d8:	20000018 	.word	0x20000018

080058dc <memset>:
 80058dc:	4603      	mov	r3, r0
 80058de:	4402      	add	r2, r0
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d100      	bne.n	80058e6 <memset+0xa>
 80058e4:	4770      	bx	lr
 80058e6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ea:	e7f9      	b.n	80058e0 <memset+0x4>

080058ec <_close_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	2300      	movs	r3, #0
 80058f0:	4d05      	ldr	r5, [pc, #20]	@ (8005908 <_close_r+0x1c>)
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fb fd0f 	bl	800131a <_close>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_close_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_close_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	200003ec 	.word	0x200003ec

0800590c <_lseek_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	2200      	movs	r2, #0
 8005916:	4d05      	ldr	r5, [pc, #20]	@ (800592c <_lseek_r+0x20>)
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fb fd21 	bl	8001362 <_lseek>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_lseek_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_lseek_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	200003ec 	.word	0x200003ec

08005930 <_read_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	2200      	movs	r2, #0
 800593a:	4d05      	ldr	r5, [pc, #20]	@ (8005950 <_read_r+0x20>)
 800593c:	602a      	str	r2, [r5, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	f7fb fcb2 	bl	80012a8 <_read>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_read_r+0x1e>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_read_r+0x1e>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	200003ec 	.word	0x200003ec

08005954 <_write_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4604      	mov	r4, r0
 8005958:	4608      	mov	r0, r1
 800595a:	4611      	mov	r1, r2
 800595c:	2200      	movs	r2, #0
 800595e:	4d05      	ldr	r5, [pc, #20]	@ (8005974 <_write_r+0x20>)
 8005960:	602a      	str	r2, [r5, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f7fb fcbd 	bl	80012e2 <_write>
 8005968:	1c43      	adds	r3, r0, #1
 800596a:	d102      	bne.n	8005972 <_write_r+0x1e>
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	b103      	cbz	r3, 8005972 <_write_r+0x1e>
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	200003ec 	.word	0x200003ec

08005978 <__errno>:
 8005978:	4b01      	ldr	r3, [pc, #4]	@ (8005980 <__errno+0x8>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000018 	.word	0x20000018

08005984 <__libc_init_array>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	2600      	movs	r6, #0
 8005988:	4d0c      	ldr	r5, [pc, #48]	@ (80059bc <__libc_init_array+0x38>)
 800598a:	4c0d      	ldr	r4, [pc, #52]	@ (80059c0 <__libc_init_array+0x3c>)
 800598c:	1b64      	subs	r4, r4, r5
 800598e:	10a4      	asrs	r4, r4, #2
 8005990:	42a6      	cmp	r6, r4
 8005992:	d109      	bne.n	80059a8 <__libc_init_array+0x24>
 8005994:	f000 fd64 	bl	8006460 <_init>
 8005998:	2600      	movs	r6, #0
 800599a:	4d0a      	ldr	r5, [pc, #40]	@ (80059c4 <__libc_init_array+0x40>)
 800599c:	4c0a      	ldr	r4, [pc, #40]	@ (80059c8 <__libc_init_array+0x44>)
 800599e:	1b64      	subs	r4, r4, r5
 80059a0:	10a4      	asrs	r4, r4, #2
 80059a2:	42a6      	cmp	r6, r4
 80059a4:	d105      	bne.n	80059b2 <__libc_init_array+0x2e>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ac:	4798      	blx	r3
 80059ae:	3601      	adds	r6, #1
 80059b0:	e7ee      	b.n	8005990 <__libc_init_array+0xc>
 80059b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b6:	4798      	blx	r3
 80059b8:	3601      	adds	r6, #1
 80059ba:	e7f2      	b.n	80059a2 <__libc_init_array+0x1e>
 80059bc:	080066dc 	.word	0x080066dc
 80059c0:	080066dc 	.word	0x080066dc
 80059c4:	080066dc 	.word	0x080066dc
 80059c8:	080066e0 	.word	0x080066e0

080059cc <__retarget_lock_init_recursive>:
 80059cc:	4770      	bx	lr

080059ce <__retarget_lock_acquire_recursive>:
 80059ce:	4770      	bx	lr

080059d0 <__retarget_lock_release_recursive>:
 80059d0:	4770      	bx	lr
	...

080059d4 <_free_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4605      	mov	r5, r0
 80059d8:	2900      	cmp	r1, #0
 80059da:	d040      	beq.n	8005a5e <_free_r+0x8a>
 80059dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e0:	1f0c      	subs	r4, r1, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	bfb8      	it	lt
 80059e6:	18e4      	addlt	r4, r4, r3
 80059e8:	f000 f8de 	bl	8005ba8 <__malloc_lock>
 80059ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <_free_r+0x8c>)
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	b933      	cbnz	r3, 8005a00 <_free_r+0x2c>
 80059f2:	6063      	str	r3, [r4, #4]
 80059f4:	6014      	str	r4, [r2, #0]
 80059f6:	4628      	mov	r0, r5
 80059f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fc:	f000 b8da 	b.w	8005bb4 <__malloc_unlock>
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	d908      	bls.n	8005a16 <_free_r+0x42>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	1821      	adds	r1, r4, r0
 8005a08:	428b      	cmp	r3, r1
 8005a0a:	bf01      	itttt	eq
 8005a0c:	6819      	ldreq	r1, [r3, #0]
 8005a0e:	685b      	ldreq	r3, [r3, #4]
 8005a10:	1809      	addeq	r1, r1, r0
 8005a12:	6021      	streq	r1, [r4, #0]
 8005a14:	e7ed      	b.n	80059f2 <_free_r+0x1e>
 8005a16:	461a      	mov	r2, r3
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	b10b      	cbz	r3, 8005a20 <_free_r+0x4c>
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d9fa      	bls.n	8005a16 <_free_r+0x42>
 8005a20:	6811      	ldr	r1, [r2, #0]
 8005a22:	1850      	adds	r0, r2, r1
 8005a24:	42a0      	cmp	r0, r4
 8005a26:	d10b      	bne.n	8005a40 <_free_r+0x6c>
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	4401      	add	r1, r0
 8005a2c:	1850      	adds	r0, r2, r1
 8005a2e:	4283      	cmp	r3, r0
 8005a30:	6011      	str	r1, [r2, #0]
 8005a32:	d1e0      	bne.n	80059f6 <_free_r+0x22>
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4408      	add	r0, r1
 8005a3a:	6010      	str	r0, [r2, #0]
 8005a3c:	6053      	str	r3, [r2, #4]
 8005a3e:	e7da      	b.n	80059f6 <_free_r+0x22>
 8005a40:	d902      	bls.n	8005a48 <_free_r+0x74>
 8005a42:	230c      	movs	r3, #12
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	e7d6      	b.n	80059f6 <_free_r+0x22>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	1821      	adds	r1, r4, r0
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	bf01      	itttt	eq
 8005a50:	6819      	ldreq	r1, [r3, #0]
 8005a52:	685b      	ldreq	r3, [r3, #4]
 8005a54:	1809      	addeq	r1, r1, r0
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	6063      	str	r3, [r4, #4]
 8005a5a:	6054      	str	r4, [r2, #4]
 8005a5c:	e7cb      	b.n	80059f6 <_free_r+0x22>
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200003f8 	.word	0x200003f8

08005a64 <sbrk_aligned>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4e0f      	ldr	r6, [pc, #60]	@ (8005aa4 <sbrk_aligned+0x40>)
 8005a68:	460c      	mov	r4, r1
 8005a6a:	6831      	ldr	r1, [r6, #0]
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	b911      	cbnz	r1, 8005a76 <sbrk_aligned+0x12>
 8005a70:	f000 fcd8 	bl	8006424 <_sbrk_r>
 8005a74:	6030      	str	r0, [r6, #0]
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 fcd3 	bl	8006424 <_sbrk_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d103      	bne.n	8005a8a <sbrk_aligned+0x26>
 8005a82:	f04f 34ff 	mov.w	r4, #4294967295
 8005a86:	4620      	mov	r0, r4
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	1cc4      	adds	r4, r0, #3
 8005a8c:	f024 0403 	bic.w	r4, r4, #3
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d0f8      	beq.n	8005a86 <sbrk_aligned+0x22>
 8005a94:	1a21      	subs	r1, r4, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 fcc4 	bl	8006424 <_sbrk_r>
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d1f2      	bne.n	8005a86 <sbrk_aligned+0x22>
 8005aa0:	e7ef      	b.n	8005a82 <sbrk_aligned+0x1e>
 8005aa2:	bf00      	nop
 8005aa4:	200003f4 	.word	0x200003f4

08005aa8 <_malloc_r>:
 8005aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aac:	1ccd      	adds	r5, r1, #3
 8005aae:	f025 0503 	bic.w	r5, r5, #3
 8005ab2:	3508      	adds	r5, #8
 8005ab4:	2d0c      	cmp	r5, #12
 8005ab6:	bf38      	it	cc
 8005ab8:	250c      	movcc	r5, #12
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	4606      	mov	r6, r0
 8005abe:	db01      	blt.n	8005ac4 <_malloc_r+0x1c>
 8005ac0:	42a9      	cmp	r1, r5
 8005ac2:	d904      	bls.n	8005ace <_malloc_r+0x26>
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ba4 <_malloc_r+0xfc>
 8005ad2:	f000 f869 	bl	8005ba8 <__malloc_lock>
 8005ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8005ada:	461c      	mov	r4, r3
 8005adc:	bb44      	cbnz	r4, 8005b30 <_malloc_r+0x88>
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f7ff ffbf 	bl	8005a64 <sbrk_aligned>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	4604      	mov	r4, r0
 8005aea:	d158      	bne.n	8005b9e <_malloc_r+0xf6>
 8005aec:	f8d8 4000 	ldr.w	r4, [r8]
 8005af0:	4627      	mov	r7, r4
 8005af2:	2f00      	cmp	r7, #0
 8005af4:	d143      	bne.n	8005b7e <_malloc_r+0xd6>
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	d04b      	beq.n	8005b92 <_malloc_r+0xea>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	4639      	mov	r1, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	eb04 0903 	add.w	r9, r4, r3
 8005b04:	f000 fc8e 	bl	8006424 <_sbrk_r>
 8005b08:	4581      	cmp	r9, r0
 8005b0a:	d142      	bne.n	8005b92 <_malloc_r+0xea>
 8005b0c:	6821      	ldr	r1, [r4, #0]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	1a6d      	subs	r5, r5, r1
 8005b12:	4629      	mov	r1, r5
 8005b14:	f7ff ffa6 	bl	8005a64 <sbrk_aligned>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d03a      	beq.n	8005b92 <_malloc_r+0xea>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	442b      	add	r3, r5
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	f8d8 3000 	ldr.w	r3, [r8]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	bb62      	cbnz	r2, 8005b84 <_malloc_r+0xdc>
 8005b2a:	f8c8 7000 	str.w	r7, [r8]
 8005b2e:	e00f      	b.n	8005b50 <_malloc_r+0xa8>
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	1b52      	subs	r2, r2, r5
 8005b34:	d420      	bmi.n	8005b78 <_malloc_r+0xd0>
 8005b36:	2a0b      	cmp	r2, #11
 8005b38:	d917      	bls.n	8005b6a <_malloc_r+0xc2>
 8005b3a:	1961      	adds	r1, r4, r5
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	6025      	str	r5, [r4, #0]
 8005b40:	bf18      	it	ne
 8005b42:	6059      	strne	r1, [r3, #4]
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	bf08      	it	eq
 8005b48:	f8c8 1000 	streq.w	r1, [r8]
 8005b4c:	5162      	str	r2, [r4, r5]
 8005b4e:	604b      	str	r3, [r1, #4]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f82f 	bl	8005bb4 <__malloc_unlock>
 8005b56:	f104 000b 	add.w	r0, r4, #11
 8005b5a:	1d23      	adds	r3, r4, #4
 8005b5c:	f020 0007 	bic.w	r0, r0, #7
 8005b60:	1ac2      	subs	r2, r0, r3
 8005b62:	bf1c      	itt	ne
 8005b64:	1a1b      	subne	r3, r3, r0
 8005b66:	50a3      	strne	r3, [r4, r2]
 8005b68:	e7af      	b.n	8005aca <_malloc_r+0x22>
 8005b6a:	6862      	ldr	r2, [r4, #4]
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	bf0c      	ite	eq
 8005b70:	f8c8 2000 	streq.w	r2, [r8]
 8005b74:	605a      	strne	r2, [r3, #4]
 8005b76:	e7eb      	b.n	8005b50 <_malloc_r+0xa8>
 8005b78:	4623      	mov	r3, r4
 8005b7a:	6864      	ldr	r4, [r4, #4]
 8005b7c:	e7ae      	b.n	8005adc <_malloc_r+0x34>
 8005b7e:	463c      	mov	r4, r7
 8005b80:	687f      	ldr	r7, [r7, #4]
 8005b82:	e7b6      	b.n	8005af2 <_malloc_r+0x4a>
 8005b84:	461a      	mov	r2, r3
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	d1fb      	bne.n	8005b84 <_malloc_r+0xdc>
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6053      	str	r3, [r2, #4]
 8005b90:	e7de      	b.n	8005b50 <_malloc_r+0xa8>
 8005b92:	230c      	movs	r3, #12
 8005b94:	4630      	mov	r0, r6
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f000 f80c 	bl	8005bb4 <__malloc_unlock>
 8005b9c:	e794      	b.n	8005ac8 <_malloc_r+0x20>
 8005b9e:	6005      	str	r5, [r0, #0]
 8005ba0:	e7d6      	b.n	8005b50 <_malloc_r+0xa8>
 8005ba2:	bf00      	nop
 8005ba4:	200003f8 	.word	0x200003f8

08005ba8 <__malloc_lock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	@ (8005bb0 <__malloc_lock+0x8>)
 8005baa:	f7ff bf10 	b.w	80059ce <__retarget_lock_acquire_recursive>
 8005bae:	bf00      	nop
 8005bb0:	200003f0 	.word	0x200003f0

08005bb4 <__malloc_unlock>:
 8005bb4:	4801      	ldr	r0, [pc, #4]	@ (8005bbc <__malloc_unlock+0x8>)
 8005bb6:	f7ff bf0b 	b.w	80059d0 <__retarget_lock_release_recursive>
 8005bba:	bf00      	nop
 8005bbc:	200003f0 	.word	0x200003f0

08005bc0 <__sfputc_r>:
 8005bc0:	6893      	ldr	r3, [r2, #8]
 8005bc2:	b410      	push	{r4}
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	6093      	str	r3, [r2, #8]
 8005bca:	da07      	bge.n	8005bdc <__sfputc_r+0x1c>
 8005bcc:	6994      	ldr	r4, [r2, #24]
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	db01      	blt.n	8005bd6 <__sfputc_r+0x16>
 8005bd2:	290a      	cmp	r1, #10
 8005bd4:	d102      	bne.n	8005bdc <__sfputc_r+0x1c>
 8005bd6:	bc10      	pop	{r4}
 8005bd8:	f7ff bdeb 	b.w	80057b2 <__swbuf_r>
 8005bdc:	6813      	ldr	r3, [r2, #0]
 8005bde:	1c58      	adds	r0, r3, #1
 8005be0:	6010      	str	r0, [r2, #0]
 8005be2:	7019      	strb	r1, [r3, #0]
 8005be4:	4608      	mov	r0, r1
 8005be6:	bc10      	pop	{r4}
 8005be8:	4770      	bx	lr

08005bea <__sfputs_r>:
 8005bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bec:	4606      	mov	r6, r0
 8005bee:	460f      	mov	r7, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	18d5      	adds	r5, r2, r3
 8005bf4:	42ac      	cmp	r4, r5
 8005bf6:	d101      	bne.n	8005bfc <__sfputs_r+0x12>
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e007      	b.n	8005c0c <__sfputs_r+0x22>
 8005bfc:	463a      	mov	r2, r7
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c04:	f7ff ffdc 	bl	8005bc0 <__sfputc_r>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d1f3      	bne.n	8005bf4 <__sfputs_r+0xa>
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c10 <_vfiprintf_r>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	460d      	mov	r5, r1
 8005c16:	4614      	mov	r4, r2
 8005c18:	4698      	mov	r8, r3
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	b09d      	sub	sp, #116	@ 0x74
 8005c1e:	b118      	cbz	r0, 8005c28 <_vfiprintf_r+0x18>
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	b90b      	cbnz	r3, 8005c28 <_vfiprintf_r+0x18>
 8005c24:	f7ff fcd4 	bl	80055d0 <__sinit>
 8005c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	d405      	bmi.n	8005c3a <_vfiprintf_r+0x2a>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d402      	bmi.n	8005c3a <_vfiprintf_r+0x2a>
 8005c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c36:	f7ff feca 	bl	80059ce <__retarget_lock_acquire_recursive>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	071b      	lsls	r3, r3, #28
 8005c3e:	d501      	bpl.n	8005c44 <_vfiprintf_r+0x34>
 8005c40:	692b      	ldr	r3, [r5, #16]
 8005c42:	b99b      	cbnz	r3, 8005c6c <_vfiprintf_r+0x5c>
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff fdf2 	bl	8005830 <__swsetup_r>
 8005c4c:	b170      	cbz	r0, 8005c6c <_vfiprintf_r+0x5c>
 8005c4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c50:	07dc      	lsls	r4, r3, #31
 8005c52:	d504      	bpl.n	8005c5e <_vfiprintf_r+0x4e>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295
 8005c58:	b01d      	add	sp, #116	@ 0x74
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	0598      	lsls	r0, r3, #22
 8005c62:	d4f7      	bmi.n	8005c54 <_vfiprintf_r+0x44>
 8005c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c66:	f7ff feb3 	bl	80059d0 <__retarget_lock_release_recursive>
 8005c6a:	e7f3      	b.n	8005c54 <_vfiprintf_r+0x44>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c70:	2320      	movs	r3, #32
 8005c72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c76:	2330      	movs	r3, #48	@ 0x30
 8005c78:	f04f 0901 	mov.w	r9, #1
 8005c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c80:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005e2c <_vfiprintf_r+0x21c>
 8005c84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c88:	4623      	mov	r3, r4
 8005c8a:	469a      	mov	sl, r3
 8005c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c90:	b10a      	cbz	r2, 8005c96 <_vfiprintf_r+0x86>
 8005c92:	2a25      	cmp	r2, #37	@ 0x25
 8005c94:	d1f9      	bne.n	8005c8a <_vfiprintf_r+0x7a>
 8005c96:	ebba 0b04 	subs.w	fp, sl, r4
 8005c9a:	d00b      	beq.n	8005cb4 <_vfiprintf_r+0xa4>
 8005c9c:	465b      	mov	r3, fp
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ffa1 	bl	8005bea <__sfputs_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f000 80a7 	beq.w	8005dfc <_vfiprintf_r+0x1ec>
 8005cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cb0:	445a      	add	r2, fp
 8005cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 809f 	beq.w	8005dfc <_vfiprintf_r+0x1ec>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc8:	f10a 0a01 	add.w	sl, sl, #1
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cd6:	4654      	mov	r4, sl
 8005cd8:	2205      	movs	r2, #5
 8005cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cde:	4853      	ldr	r0, [pc, #332]	@ (8005e2c <_vfiprintf_r+0x21c>)
 8005ce0:	f000 fbb0 	bl	8006444 <memchr>
 8005ce4:	9a04      	ldr	r2, [sp, #16]
 8005ce6:	b9d8      	cbnz	r0, 8005d20 <_vfiprintf_r+0x110>
 8005ce8:	06d1      	lsls	r1, r2, #27
 8005cea:	bf44      	itt	mi
 8005cec:	2320      	movmi	r3, #32
 8005cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cf2:	0713      	lsls	r3, r2, #28
 8005cf4:	bf44      	itt	mi
 8005cf6:	232b      	movmi	r3, #43	@ 0x2b
 8005cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d02:	d015      	beq.n	8005d30 <_vfiprintf_r+0x120>
 8005d04:	4654      	mov	r4, sl
 8005d06:	2000      	movs	r0, #0
 8005d08:	f04f 0c0a 	mov.w	ip, #10
 8005d0c:	9a07      	ldr	r2, [sp, #28]
 8005d0e:	4621      	mov	r1, r4
 8005d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d14:	3b30      	subs	r3, #48	@ 0x30
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d94b      	bls.n	8005db2 <_vfiprintf_r+0x1a2>
 8005d1a:	b1b0      	cbz	r0, 8005d4a <_vfiprintf_r+0x13a>
 8005d1c:	9207      	str	r2, [sp, #28]
 8005d1e:	e014      	b.n	8005d4a <_vfiprintf_r+0x13a>
 8005d20:	eba0 0308 	sub.w	r3, r0, r8
 8005d24:	fa09 f303 	lsl.w	r3, r9, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	46a2      	mov	sl, r4
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	e7d2      	b.n	8005cd6 <_vfiprintf_r+0xc6>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	1d19      	adds	r1, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	9103      	str	r1, [sp, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfbb      	ittet	lt
 8005d3c:	425b      	neglt	r3, r3
 8005d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d42:	9307      	strge	r3, [sp, #28]
 8005d44:	9307      	strlt	r3, [sp, #28]
 8005d46:	bfb8      	it	lt
 8005d48:	9204      	strlt	r2, [sp, #16]
 8005d4a:	7823      	ldrb	r3, [r4, #0]
 8005d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d4e:	d10a      	bne.n	8005d66 <_vfiprintf_r+0x156>
 8005d50:	7863      	ldrb	r3, [r4, #1]
 8005d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d54:	d132      	bne.n	8005dbc <_vfiprintf_r+0x1ac>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	3402      	adds	r4, #2
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	9203      	str	r2, [sp, #12]
 8005d60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005e30 <_vfiprintf_r+0x220>
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	7821      	ldrb	r1, [r4, #0]
 8005d70:	f000 fb68 	bl	8006444 <memchr>
 8005d74:	b138      	cbz	r0, 8005d86 <_vfiprintf_r+0x176>
 8005d76:	2240      	movs	r2, #64	@ 0x40
 8005d78:	9b04      	ldr	r3, [sp, #16]
 8005d7a:	eba0 000a 	sub.w	r0, r0, sl
 8005d7e:	4082      	lsls	r2, r0
 8005d80:	4313      	orrs	r3, r2
 8005d82:	3401      	adds	r4, #1
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	2206      	movs	r2, #6
 8005d8c:	4829      	ldr	r0, [pc, #164]	@ (8005e34 <_vfiprintf_r+0x224>)
 8005d8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d92:	f000 fb57 	bl	8006444 <memchr>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d03f      	beq.n	8005e1a <_vfiprintf_r+0x20a>
 8005d9a:	4b27      	ldr	r3, [pc, #156]	@ (8005e38 <_vfiprintf_r+0x228>)
 8005d9c:	bb1b      	cbnz	r3, 8005de6 <_vfiprintf_r+0x1d6>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	f023 0307 	bic.w	r3, r3, #7
 8005da6:	3308      	adds	r3, #8
 8005da8:	9303      	str	r3, [sp, #12]
 8005daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dac:	443b      	add	r3, r7
 8005dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db0:	e76a      	b.n	8005c88 <_vfiprintf_r+0x78>
 8005db2:	460c      	mov	r4, r1
 8005db4:	2001      	movs	r0, #1
 8005db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dba:	e7a8      	b.n	8005d0e <_vfiprintf_r+0xfe>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f04f 0c0a 	mov.w	ip, #10
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	3401      	adds	r4, #1
 8005dc6:	9305      	str	r3, [sp, #20]
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dce:	3a30      	subs	r2, #48	@ 0x30
 8005dd0:	2a09      	cmp	r2, #9
 8005dd2:	d903      	bls.n	8005ddc <_vfiprintf_r+0x1cc>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0c6      	beq.n	8005d66 <_vfiprintf_r+0x156>
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	e7c4      	b.n	8005d66 <_vfiprintf_r+0x156>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	2301      	movs	r3, #1
 8005de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005de4:	e7f0      	b.n	8005dc8 <_vfiprintf_r+0x1b8>
 8005de6:	ab03      	add	r3, sp, #12
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	462a      	mov	r2, r5
 8005dec:	4630      	mov	r0, r6
 8005dee:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <_vfiprintf_r+0x22c>)
 8005df0:	a904      	add	r1, sp, #16
 8005df2:	f3af 8000 	nop.w
 8005df6:	4607      	mov	r7, r0
 8005df8:	1c78      	adds	r0, r7, #1
 8005dfa:	d1d6      	bne.n	8005daa <_vfiprintf_r+0x19a>
 8005dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	d405      	bmi.n	8005e0e <_vfiprintf_r+0x1fe>
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	059a      	lsls	r2, r3, #22
 8005e06:	d402      	bmi.n	8005e0e <_vfiprintf_r+0x1fe>
 8005e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e0a:	f7ff fde1 	bl	80059d0 <__retarget_lock_release_recursive>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	065b      	lsls	r3, r3, #25
 8005e12:	f53f af1f 	bmi.w	8005c54 <_vfiprintf_r+0x44>
 8005e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e18:	e71e      	b.n	8005c58 <_vfiprintf_r+0x48>
 8005e1a:	ab03      	add	r3, sp, #12
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	462a      	mov	r2, r5
 8005e20:	4630      	mov	r0, r6
 8005e22:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <_vfiprintf_r+0x22c>)
 8005e24:	a904      	add	r1, sp, #16
 8005e26:	f000 f87d 	bl	8005f24 <_printf_i>
 8005e2a:	e7e4      	b.n	8005df6 <_vfiprintf_r+0x1e6>
 8005e2c:	080066a6 	.word	0x080066a6
 8005e30:	080066ac 	.word	0x080066ac
 8005e34:	080066b0 	.word	0x080066b0
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	08005beb 	.word	0x08005beb

08005e40 <_printf_common>:
 8005e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	4616      	mov	r6, r2
 8005e46:	4698      	mov	r8, r3
 8005e48:	688a      	ldr	r2, [r1, #8]
 8005e4a:	690b      	ldr	r3, [r1, #16]
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bfb8      	it	lt
 8005e52:	4613      	movlt	r3, r2
 8005e54:	6033      	str	r3, [r6, #0]
 8005e56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e60:	b10a      	cbz	r2, 8005e66 <_printf_common+0x26>
 8005e62:	3301      	adds	r3, #1
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	0699      	lsls	r1, r3, #26
 8005e6a:	bf42      	ittt	mi
 8005e6c:	6833      	ldrmi	r3, [r6, #0]
 8005e6e:	3302      	addmi	r3, #2
 8005e70:	6033      	strmi	r3, [r6, #0]
 8005e72:	6825      	ldr	r5, [r4, #0]
 8005e74:	f015 0506 	ands.w	r5, r5, #6
 8005e78:	d106      	bne.n	8005e88 <_printf_common+0x48>
 8005e7a:	f104 0a19 	add.w	sl, r4, #25
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	6832      	ldr	r2, [r6, #0]
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dc2b      	bgt.n	8005ee0 <_printf_common+0xa0>
 8005e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	3b00      	subs	r3, #0
 8005e90:	bf18      	it	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	0692      	lsls	r2, r2, #26
 8005e96:	d430      	bmi.n	8005efa <_printf_common+0xba>
 8005e98:	4641      	mov	r1, r8
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ea0:	47c8      	blx	r9
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d023      	beq.n	8005eee <_printf_common+0xae>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	6922      	ldr	r2, [r4, #16]
 8005eaa:	f003 0306 	and.w	r3, r3, #6
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	bf14      	ite	ne
 8005eb2:	2500      	movne	r5, #0
 8005eb4:	6833      	ldreq	r3, [r6, #0]
 8005eb6:	f04f 0600 	mov.w	r6, #0
 8005eba:	bf08      	it	eq
 8005ebc:	68e5      	ldreq	r5, [r4, #12]
 8005ebe:	f104 041a 	add.w	r4, r4, #26
 8005ec2:	bf08      	it	eq
 8005ec4:	1aed      	subeq	r5, r5, r3
 8005ec6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005eca:	bf08      	it	eq
 8005ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	bfc4      	itt	gt
 8005ed4:	1a9b      	subgt	r3, r3, r2
 8005ed6:	18ed      	addgt	r5, r5, r3
 8005ed8:	42b5      	cmp	r5, r6
 8005eda:	d11a      	bne.n	8005f12 <_printf_common+0xd2>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e008      	b.n	8005ef2 <_printf_common+0xb2>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4652      	mov	r2, sl
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	47c8      	blx	r9
 8005eea:	3001      	adds	r0, #1
 8005eec:	d103      	bne.n	8005ef6 <_printf_common+0xb6>
 8005eee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef6:	3501      	adds	r5, #1
 8005ef8:	e7c1      	b.n	8005e7e <_printf_common+0x3e>
 8005efa:	2030      	movs	r0, #48	@ 0x30
 8005efc:	18e1      	adds	r1, r4, r3
 8005efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f08:	4422      	add	r2, r4
 8005f0a:	3302      	adds	r3, #2
 8005f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f10:	e7c2      	b.n	8005e98 <_printf_common+0x58>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4622      	mov	r2, r4
 8005f16:	4641      	mov	r1, r8
 8005f18:	4638      	mov	r0, r7
 8005f1a:	47c8      	blx	r9
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d0e6      	beq.n	8005eee <_printf_common+0xae>
 8005f20:	3601      	adds	r6, #1
 8005f22:	e7d9      	b.n	8005ed8 <_printf_common+0x98>

08005f24 <_printf_i>:
 8005f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	7e0f      	ldrb	r7, [r1, #24]
 8005f2a:	4691      	mov	r9, r2
 8005f2c:	2f78      	cmp	r7, #120	@ 0x78
 8005f2e:	4680      	mov	r8, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	469a      	mov	sl, r3
 8005f34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f3a:	d807      	bhi.n	8005f4c <_printf_i+0x28>
 8005f3c:	2f62      	cmp	r7, #98	@ 0x62
 8005f3e:	d80a      	bhi.n	8005f56 <_printf_i+0x32>
 8005f40:	2f00      	cmp	r7, #0
 8005f42:	f000 80d3 	beq.w	80060ec <_printf_i+0x1c8>
 8005f46:	2f58      	cmp	r7, #88	@ 0x58
 8005f48:	f000 80ba 	beq.w	80060c0 <_printf_i+0x19c>
 8005f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f54:	e03a      	b.n	8005fcc <_printf_i+0xa8>
 8005f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f5a:	2b15      	cmp	r3, #21
 8005f5c:	d8f6      	bhi.n	8005f4c <_printf_i+0x28>
 8005f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f64 <_printf_i+0x40>)
 8005f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005f4d 	.word	0x08005f4d
 8005f70:	08005f4d 	.word	0x08005f4d
 8005f74:	08005f4d 	.word	0x08005f4d
 8005f78:	08005f4d 	.word	0x08005f4d
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08005f4d 	.word	0x08005f4d
 8005f84:	08005f4d 	.word	0x08005f4d
 8005f88:	08005f4d 	.word	0x08005f4d
 8005f8c:	08005f4d 	.word	0x08005f4d
 8005f90:	080060d3 	.word	0x080060d3
 8005f94:	08005ffb 	.word	0x08005ffb
 8005f98:	0800608d 	.word	0x0800608d
 8005f9c:	08005f4d 	.word	0x08005f4d
 8005fa0:	08005f4d 	.word	0x08005f4d
 8005fa4:	080060f5 	.word	0x080060f5
 8005fa8:	08005f4d 	.word	0x08005f4d
 8005fac:	08005ffb 	.word	0x08005ffb
 8005fb0:	08005f4d 	.word	0x08005f4d
 8005fb4:	08005f4d 	.word	0x08005f4d
 8005fb8:	08006095 	.word	0x08006095
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6032      	str	r2, [r6, #0]
 8005fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e09e      	b.n	800610e <_printf_i+0x1ea>
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	1d19      	adds	r1, r3, #4
 8005fd6:	6031      	str	r1, [r6, #0]
 8005fd8:	0606      	lsls	r6, r0, #24
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0xbc>
 8005fdc:	681d      	ldr	r5, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <_printf_i+0xc4>
 8005fe0:	0645      	lsls	r5, r0, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0xb8>
 8005fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	da03      	bge.n	8005ff4 <_printf_i+0xd0>
 8005fec:	232d      	movs	r3, #45	@ 0x2d
 8005fee:	426d      	negs	r5, r5
 8005ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ff4:	230a      	movs	r3, #10
 8005ff6:	4859      	ldr	r0, [pc, #356]	@ (800615c <_printf_i+0x238>)
 8005ff8:	e011      	b.n	800601e <_printf_i+0xfa>
 8005ffa:	6821      	ldr	r1, [r4, #0]
 8005ffc:	6833      	ldr	r3, [r6, #0]
 8005ffe:	0608      	lsls	r0, r1, #24
 8006000:	f853 5b04 	ldr.w	r5, [r3], #4
 8006004:	d402      	bmi.n	800600c <_printf_i+0xe8>
 8006006:	0649      	lsls	r1, r1, #25
 8006008:	bf48      	it	mi
 800600a:	b2ad      	uxthmi	r5, r5
 800600c:	2f6f      	cmp	r7, #111	@ 0x6f
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	bf14      	ite	ne
 8006012:	230a      	movne	r3, #10
 8006014:	2308      	moveq	r3, #8
 8006016:	4851      	ldr	r0, [pc, #324]	@ (800615c <_printf_i+0x238>)
 8006018:	2100      	movs	r1, #0
 800601a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800601e:	6866      	ldr	r6, [r4, #4]
 8006020:	2e00      	cmp	r6, #0
 8006022:	bfa8      	it	ge
 8006024:	6821      	ldrge	r1, [r4, #0]
 8006026:	60a6      	str	r6, [r4, #8]
 8006028:	bfa4      	itt	ge
 800602a:	f021 0104 	bicge.w	r1, r1, #4
 800602e:	6021      	strge	r1, [r4, #0]
 8006030:	b90d      	cbnz	r5, 8006036 <_printf_i+0x112>
 8006032:	2e00      	cmp	r6, #0
 8006034:	d04b      	beq.n	80060ce <_printf_i+0x1aa>
 8006036:	4616      	mov	r6, r2
 8006038:	fbb5 f1f3 	udiv	r1, r5, r3
 800603c:	fb03 5711 	mls	r7, r3, r1, r5
 8006040:	5dc7      	ldrb	r7, [r0, r7]
 8006042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006046:	462f      	mov	r7, r5
 8006048:	42bb      	cmp	r3, r7
 800604a:	460d      	mov	r5, r1
 800604c:	d9f4      	bls.n	8006038 <_printf_i+0x114>
 800604e:	2b08      	cmp	r3, #8
 8006050:	d10b      	bne.n	800606a <_printf_i+0x146>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	07df      	lsls	r7, r3, #31
 8006056:	d508      	bpl.n	800606a <_printf_i+0x146>
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	6861      	ldr	r1, [r4, #4]
 800605c:	4299      	cmp	r1, r3
 800605e:	bfde      	ittt	le
 8006060:	2330      	movle	r3, #48	@ 0x30
 8006062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800606a:	1b92      	subs	r2, r2, r6
 800606c:	6122      	str	r2, [r4, #16]
 800606e:	464b      	mov	r3, r9
 8006070:	4621      	mov	r1, r4
 8006072:	4640      	mov	r0, r8
 8006074:	f8cd a000 	str.w	sl, [sp]
 8006078:	aa03      	add	r2, sp, #12
 800607a:	f7ff fee1 	bl	8005e40 <_printf_common>
 800607e:	3001      	adds	r0, #1
 8006080:	d14a      	bne.n	8006118 <_printf_i+0x1f4>
 8006082:	f04f 30ff 	mov.w	r0, #4294967295
 8006086:	b004      	add	sp, #16
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	f043 0320 	orr.w	r3, r3, #32
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	2778      	movs	r7, #120	@ 0x78
 8006096:	4832      	ldr	r0, [pc, #200]	@ (8006160 <_printf_i+0x23c>)
 8006098:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	6831      	ldr	r1, [r6, #0]
 80060a0:	061f      	lsls	r7, r3, #24
 80060a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80060a6:	d402      	bmi.n	80060ae <_printf_i+0x18a>
 80060a8:	065f      	lsls	r7, r3, #25
 80060aa:	bf48      	it	mi
 80060ac:	b2ad      	uxthmi	r5, r5
 80060ae:	6031      	str	r1, [r6, #0]
 80060b0:	07d9      	lsls	r1, r3, #31
 80060b2:	bf44      	itt	mi
 80060b4:	f043 0320 	orrmi.w	r3, r3, #32
 80060b8:	6023      	strmi	r3, [r4, #0]
 80060ba:	b11d      	cbz	r5, 80060c4 <_printf_i+0x1a0>
 80060bc:	2310      	movs	r3, #16
 80060be:	e7ab      	b.n	8006018 <_printf_i+0xf4>
 80060c0:	4826      	ldr	r0, [pc, #152]	@ (800615c <_printf_i+0x238>)
 80060c2:	e7e9      	b.n	8006098 <_printf_i+0x174>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	f023 0320 	bic.w	r3, r3, #32
 80060ca:	6023      	str	r3, [r4, #0]
 80060cc:	e7f6      	b.n	80060bc <_printf_i+0x198>
 80060ce:	4616      	mov	r6, r2
 80060d0:	e7bd      	b.n	800604e <_printf_i+0x12a>
 80060d2:	6833      	ldr	r3, [r6, #0]
 80060d4:	6825      	ldr	r5, [r4, #0]
 80060d6:	1d18      	adds	r0, r3, #4
 80060d8:	6961      	ldr	r1, [r4, #20]
 80060da:	6030      	str	r0, [r6, #0]
 80060dc:	062e      	lsls	r6, r5, #24
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	d501      	bpl.n	80060e6 <_printf_i+0x1c2>
 80060e2:	6019      	str	r1, [r3, #0]
 80060e4:	e002      	b.n	80060ec <_printf_i+0x1c8>
 80060e6:	0668      	lsls	r0, r5, #25
 80060e8:	d5fb      	bpl.n	80060e2 <_printf_i+0x1be>
 80060ea:	8019      	strh	r1, [r3, #0]
 80060ec:	2300      	movs	r3, #0
 80060ee:	4616      	mov	r6, r2
 80060f0:	6123      	str	r3, [r4, #16]
 80060f2:	e7bc      	b.n	800606e <_printf_i+0x14a>
 80060f4:	6833      	ldr	r3, [r6, #0]
 80060f6:	2100      	movs	r1, #0
 80060f8:	1d1a      	adds	r2, r3, #4
 80060fa:	6032      	str	r2, [r6, #0]
 80060fc:	681e      	ldr	r6, [r3, #0]
 80060fe:	6862      	ldr	r2, [r4, #4]
 8006100:	4630      	mov	r0, r6
 8006102:	f000 f99f 	bl	8006444 <memchr>
 8006106:	b108      	cbz	r0, 800610c <_printf_i+0x1e8>
 8006108:	1b80      	subs	r0, r0, r6
 800610a:	6060      	str	r0, [r4, #4]
 800610c:	6863      	ldr	r3, [r4, #4]
 800610e:	6123      	str	r3, [r4, #16]
 8006110:	2300      	movs	r3, #0
 8006112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006116:	e7aa      	b.n	800606e <_printf_i+0x14a>
 8006118:	4632      	mov	r2, r6
 800611a:	4649      	mov	r1, r9
 800611c:	4640      	mov	r0, r8
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	47d0      	blx	sl
 8006122:	3001      	adds	r0, #1
 8006124:	d0ad      	beq.n	8006082 <_printf_i+0x15e>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	079b      	lsls	r3, r3, #30
 800612a:	d413      	bmi.n	8006154 <_printf_i+0x230>
 800612c:	68e0      	ldr	r0, [r4, #12]
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	4298      	cmp	r0, r3
 8006132:	bfb8      	it	lt
 8006134:	4618      	movlt	r0, r3
 8006136:	e7a6      	b.n	8006086 <_printf_i+0x162>
 8006138:	2301      	movs	r3, #1
 800613a:	4632      	mov	r2, r6
 800613c:	4649      	mov	r1, r9
 800613e:	4640      	mov	r0, r8
 8006140:	47d0      	blx	sl
 8006142:	3001      	adds	r0, #1
 8006144:	d09d      	beq.n	8006082 <_printf_i+0x15e>
 8006146:	3501      	adds	r5, #1
 8006148:	68e3      	ldr	r3, [r4, #12]
 800614a:	9903      	ldr	r1, [sp, #12]
 800614c:	1a5b      	subs	r3, r3, r1
 800614e:	42ab      	cmp	r3, r5
 8006150:	dcf2      	bgt.n	8006138 <_printf_i+0x214>
 8006152:	e7eb      	b.n	800612c <_printf_i+0x208>
 8006154:	2500      	movs	r5, #0
 8006156:	f104 0619 	add.w	r6, r4, #25
 800615a:	e7f5      	b.n	8006148 <_printf_i+0x224>
 800615c:	080066b7 	.word	0x080066b7
 8006160:	080066c8 	.word	0x080066c8

08006164 <__sflush_r>:
 8006164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	0716      	lsls	r6, r2, #28
 800616c:	4605      	mov	r5, r0
 800616e:	460c      	mov	r4, r1
 8006170:	d454      	bmi.n	800621c <__sflush_r+0xb8>
 8006172:	684b      	ldr	r3, [r1, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	dc02      	bgt.n	800617e <__sflush_r+0x1a>
 8006178:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	dd48      	ble.n	8006210 <__sflush_r+0xac>
 800617e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006180:	2e00      	cmp	r6, #0
 8006182:	d045      	beq.n	8006210 <__sflush_r+0xac>
 8006184:	2300      	movs	r3, #0
 8006186:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800618a:	682f      	ldr	r7, [r5, #0]
 800618c:	6a21      	ldr	r1, [r4, #32]
 800618e:	602b      	str	r3, [r5, #0]
 8006190:	d030      	beq.n	80061f4 <__sflush_r+0x90>
 8006192:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	0759      	lsls	r1, r3, #29
 8006198:	d505      	bpl.n	80061a6 <__sflush_r+0x42>
 800619a:	6863      	ldr	r3, [r4, #4]
 800619c:	1ad2      	subs	r2, r2, r3
 800619e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061a0:	b10b      	cbz	r3, 80061a6 <__sflush_r+0x42>
 80061a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	2300      	movs	r3, #0
 80061a8:	4628      	mov	r0, r5
 80061aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061ac:	6a21      	ldr	r1, [r4, #32]
 80061ae:	47b0      	blx	r6
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	d106      	bne.n	80061c4 <__sflush_r+0x60>
 80061b6:	6829      	ldr	r1, [r5, #0]
 80061b8:	291d      	cmp	r1, #29
 80061ba:	d82b      	bhi.n	8006214 <__sflush_r+0xb0>
 80061bc:	4a28      	ldr	r2, [pc, #160]	@ (8006260 <__sflush_r+0xfc>)
 80061be:	410a      	asrs	r2, r1
 80061c0:	07d6      	lsls	r6, r2, #31
 80061c2:	d427      	bmi.n	8006214 <__sflush_r+0xb0>
 80061c4:	2200      	movs	r2, #0
 80061c6:	6062      	str	r2, [r4, #4]
 80061c8:	6922      	ldr	r2, [r4, #16]
 80061ca:	04d9      	lsls	r1, r3, #19
 80061cc:	6022      	str	r2, [r4, #0]
 80061ce:	d504      	bpl.n	80061da <__sflush_r+0x76>
 80061d0:	1c42      	adds	r2, r0, #1
 80061d2:	d101      	bne.n	80061d8 <__sflush_r+0x74>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b903      	cbnz	r3, 80061da <__sflush_r+0x76>
 80061d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80061da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061dc:	602f      	str	r7, [r5, #0]
 80061de:	b1b9      	cbz	r1, 8006210 <__sflush_r+0xac>
 80061e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061e4:	4299      	cmp	r1, r3
 80061e6:	d002      	beq.n	80061ee <__sflush_r+0x8a>
 80061e8:	4628      	mov	r0, r5
 80061ea:	f7ff fbf3 	bl	80059d4 <_free_r>
 80061ee:	2300      	movs	r3, #0
 80061f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80061f2:	e00d      	b.n	8006210 <__sflush_r+0xac>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b0      	blx	r6
 80061fa:	4602      	mov	r2, r0
 80061fc:	1c50      	adds	r0, r2, #1
 80061fe:	d1c9      	bne.n	8006194 <__sflush_r+0x30>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c6      	beq.n	8006194 <__sflush_r+0x30>
 8006206:	2b1d      	cmp	r3, #29
 8006208:	d001      	beq.n	800620e <__sflush_r+0xaa>
 800620a:	2b16      	cmp	r3, #22
 800620c:	d11d      	bne.n	800624a <__sflush_r+0xe6>
 800620e:	602f      	str	r7, [r5, #0]
 8006210:	2000      	movs	r0, #0
 8006212:	e021      	b.n	8006258 <__sflush_r+0xf4>
 8006214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006218:	b21b      	sxth	r3, r3
 800621a:	e01a      	b.n	8006252 <__sflush_r+0xee>
 800621c:	690f      	ldr	r7, [r1, #16]
 800621e:	2f00      	cmp	r7, #0
 8006220:	d0f6      	beq.n	8006210 <__sflush_r+0xac>
 8006222:	0793      	lsls	r3, r2, #30
 8006224:	bf18      	it	ne
 8006226:	2300      	movne	r3, #0
 8006228:	680e      	ldr	r6, [r1, #0]
 800622a:	bf08      	it	eq
 800622c:	694b      	ldreq	r3, [r1, #20]
 800622e:	1bf6      	subs	r6, r6, r7
 8006230:	600f      	str	r7, [r1, #0]
 8006232:	608b      	str	r3, [r1, #8]
 8006234:	2e00      	cmp	r6, #0
 8006236:	ddeb      	ble.n	8006210 <__sflush_r+0xac>
 8006238:	4633      	mov	r3, r6
 800623a:	463a      	mov	r2, r7
 800623c:	4628      	mov	r0, r5
 800623e:	6a21      	ldr	r1, [r4, #32]
 8006240:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006244:	47e0      	blx	ip
 8006246:	2800      	cmp	r0, #0
 8006248:	dc07      	bgt.n	800625a <__sflush_r+0xf6>
 800624a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006252:	f04f 30ff 	mov.w	r0, #4294967295
 8006256:	81a3      	strh	r3, [r4, #12]
 8006258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800625a:	4407      	add	r7, r0
 800625c:	1a36      	subs	r6, r6, r0
 800625e:	e7e9      	b.n	8006234 <__sflush_r+0xd0>
 8006260:	dfbffffe 	.word	0xdfbffffe

08006264 <_fflush_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
 800626c:	b913      	cbnz	r3, 8006274 <_fflush_r+0x10>
 800626e:	2500      	movs	r5, #0
 8006270:	4628      	mov	r0, r5
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	b118      	cbz	r0, 800627e <_fflush_r+0x1a>
 8006276:	6a03      	ldr	r3, [r0, #32]
 8006278:	b90b      	cbnz	r3, 800627e <_fflush_r+0x1a>
 800627a:	f7ff f9a9 	bl	80055d0 <__sinit>
 800627e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f3      	beq.n	800626e <_fflush_r+0xa>
 8006286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006288:	07d0      	lsls	r0, r2, #31
 800628a:	d404      	bmi.n	8006296 <_fflush_r+0x32>
 800628c:	0599      	lsls	r1, r3, #22
 800628e:	d402      	bmi.n	8006296 <_fflush_r+0x32>
 8006290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006292:	f7ff fb9c 	bl	80059ce <__retarget_lock_acquire_recursive>
 8006296:	4628      	mov	r0, r5
 8006298:	4621      	mov	r1, r4
 800629a:	f7ff ff63 	bl	8006164 <__sflush_r>
 800629e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062a0:	4605      	mov	r5, r0
 80062a2:	07da      	lsls	r2, r3, #31
 80062a4:	d4e4      	bmi.n	8006270 <_fflush_r+0xc>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	059b      	lsls	r3, r3, #22
 80062aa:	d4e1      	bmi.n	8006270 <_fflush_r+0xc>
 80062ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ae:	f7ff fb8f 	bl	80059d0 <__retarget_lock_release_recursive>
 80062b2:	e7dd      	b.n	8006270 <_fflush_r+0xc>

080062b4 <__swhatbuf_r>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	460c      	mov	r4, r1
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	4615      	mov	r5, r2
 80062be:	2900      	cmp	r1, #0
 80062c0:	461e      	mov	r6, r3
 80062c2:	b096      	sub	sp, #88	@ 0x58
 80062c4:	da0c      	bge.n	80062e0 <__swhatbuf_r+0x2c>
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	2100      	movs	r1, #0
 80062ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062ce:	bf14      	ite	ne
 80062d0:	2340      	movne	r3, #64	@ 0x40
 80062d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062d6:	2000      	movs	r0, #0
 80062d8:	6031      	str	r1, [r6, #0]
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	b016      	add	sp, #88	@ 0x58
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	466a      	mov	r2, sp
 80062e2:	f000 f87d 	bl	80063e0 <_fstat_r>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	dbed      	blt.n	80062c6 <__swhatbuf_r+0x12>
 80062ea:	9901      	ldr	r1, [sp, #4]
 80062ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062f4:	4259      	negs	r1, r3
 80062f6:	4159      	adcs	r1, r3
 80062f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062fc:	e7eb      	b.n	80062d6 <__swhatbuf_r+0x22>

080062fe <__smakebuf_r>:
 80062fe:	898b      	ldrh	r3, [r1, #12]
 8006300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006302:	079d      	lsls	r5, r3, #30
 8006304:	4606      	mov	r6, r0
 8006306:	460c      	mov	r4, r1
 8006308:	d507      	bpl.n	800631a <__smakebuf_r+0x1c>
 800630a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800630e:	6023      	str	r3, [r4, #0]
 8006310:	6123      	str	r3, [r4, #16]
 8006312:	2301      	movs	r3, #1
 8006314:	6163      	str	r3, [r4, #20]
 8006316:	b003      	add	sp, #12
 8006318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631a:	466a      	mov	r2, sp
 800631c:	ab01      	add	r3, sp, #4
 800631e:	f7ff ffc9 	bl	80062b4 <__swhatbuf_r>
 8006322:	9f00      	ldr	r7, [sp, #0]
 8006324:	4605      	mov	r5, r0
 8006326:	4639      	mov	r1, r7
 8006328:	4630      	mov	r0, r6
 800632a:	f7ff fbbd 	bl	8005aa8 <_malloc_r>
 800632e:	b948      	cbnz	r0, 8006344 <__smakebuf_r+0x46>
 8006330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006334:	059a      	lsls	r2, r3, #22
 8006336:	d4ee      	bmi.n	8006316 <__smakebuf_r+0x18>
 8006338:	f023 0303 	bic.w	r3, r3, #3
 800633c:	f043 0302 	orr.w	r3, r3, #2
 8006340:	81a3      	strh	r3, [r4, #12]
 8006342:	e7e2      	b.n	800630a <__smakebuf_r+0xc>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800634a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	6020      	str	r0, [r4, #0]
 8006354:	b15b      	cbz	r3, 800636e <__smakebuf_r+0x70>
 8006356:	4630      	mov	r0, r6
 8006358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800635c:	f000 f852 	bl	8006404 <_isatty_r>
 8006360:	b128      	cbz	r0, 800636e <__smakebuf_r+0x70>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f023 0303 	bic.w	r3, r3, #3
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	81a3      	strh	r3, [r4, #12]
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	431d      	orrs	r5, r3
 8006372:	81a5      	strh	r5, [r4, #12]
 8006374:	e7cf      	b.n	8006316 <__smakebuf_r+0x18>

08006376 <_putc_r>:
 8006376:	b570      	push	{r4, r5, r6, lr}
 8006378:	460d      	mov	r5, r1
 800637a:	4614      	mov	r4, r2
 800637c:	4606      	mov	r6, r0
 800637e:	b118      	cbz	r0, 8006388 <_putc_r+0x12>
 8006380:	6a03      	ldr	r3, [r0, #32]
 8006382:	b90b      	cbnz	r3, 8006388 <_putc_r+0x12>
 8006384:	f7ff f924 	bl	80055d0 <__sinit>
 8006388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800638a:	07d8      	lsls	r0, r3, #31
 800638c:	d405      	bmi.n	800639a <_putc_r+0x24>
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	0599      	lsls	r1, r3, #22
 8006392:	d402      	bmi.n	800639a <_putc_r+0x24>
 8006394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006396:	f7ff fb1a 	bl	80059ce <__retarget_lock_acquire_recursive>
 800639a:	68a3      	ldr	r3, [r4, #8]
 800639c:	3b01      	subs	r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	60a3      	str	r3, [r4, #8]
 80063a2:	da05      	bge.n	80063b0 <_putc_r+0x3a>
 80063a4:	69a2      	ldr	r2, [r4, #24]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	db12      	blt.n	80063d0 <_putc_r+0x5a>
 80063aa:	b2eb      	uxtb	r3, r5
 80063ac:	2b0a      	cmp	r3, #10
 80063ae:	d00f      	beq.n	80063d0 <_putc_r+0x5a>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	6022      	str	r2, [r4, #0]
 80063b6:	701d      	strb	r5, [r3, #0]
 80063b8:	b2ed      	uxtb	r5, r5
 80063ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063bc:	07da      	lsls	r2, r3, #31
 80063be:	d405      	bmi.n	80063cc <_putc_r+0x56>
 80063c0:	89a3      	ldrh	r3, [r4, #12]
 80063c2:	059b      	lsls	r3, r3, #22
 80063c4:	d402      	bmi.n	80063cc <_putc_r+0x56>
 80063c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c8:	f7ff fb02 	bl	80059d0 <__retarget_lock_release_recursive>
 80063cc:	4628      	mov	r0, r5
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	4629      	mov	r1, r5
 80063d2:	4622      	mov	r2, r4
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff f9ec 	bl	80057b2 <__swbuf_r>
 80063da:	4605      	mov	r5, r0
 80063dc:	e7ed      	b.n	80063ba <_putc_r+0x44>
	...

080063e0 <_fstat_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	2300      	movs	r3, #0
 80063e4:	4d06      	ldr	r5, [pc, #24]	@ (8006400 <_fstat_r+0x20>)
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	f7fa ff9f 	bl	8001330 <_fstat>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d102      	bne.n	80063fc <_fstat_r+0x1c>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	b103      	cbz	r3, 80063fc <_fstat_r+0x1c>
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	200003ec 	.word	0x200003ec

08006404 <_isatty_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	2300      	movs	r3, #0
 8006408:	4d05      	ldr	r5, [pc, #20]	@ (8006420 <_isatty_r+0x1c>)
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	f7fa ff9d 	bl	800134e <_isatty>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_isatty_r+0x1a>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_isatty_r+0x1a>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200003ec 	.word	0x200003ec

08006424 <_sbrk_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	2300      	movs	r3, #0
 8006428:	4d05      	ldr	r5, [pc, #20]	@ (8006440 <_sbrk_r+0x1c>)
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fa ffa4 	bl	800137c <_sbrk>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_sbrk_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_sbrk_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200003ec 	.word	0x200003ec

08006444 <memchr>:
 8006444:	4603      	mov	r3, r0
 8006446:	b510      	push	{r4, lr}
 8006448:	b2c9      	uxtb	r1, r1
 800644a:	4402      	add	r2, r0
 800644c:	4293      	cmp	r3, r2
 800644e:	4618      	mov	r0, r3
 8006450:	d101      	bne.n	8006456 <memchr+0x12>
 8006452:	2000      	movs	r0, #0
 8006454:	e003      	b.n	800645e <memchr+0x1a>
 8006456:	7804      	ldrb	r4, [r0, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	428c      	cmp	r4, r1
 800645c:	d1f6      	bne.n	800644c <memchr+0x8>
 800645e:	bd10      	pop	{r4, pc}

08006460 <_init>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr

0800646c <_fini>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr
