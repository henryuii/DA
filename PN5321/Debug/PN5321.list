
PN5321.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006c58  08006c58  00007c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec4  08006ec4  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006ec4  08006ec4  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ec4  08006ec4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec4  08006ec4  00007ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ec8  08006ec8  00007ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006ecc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000068  08006f34  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08006f34  000083f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc56  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002235  00000000  00000000  00015ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00017f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a53  00000000  00000000  00018c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cc5  00000000  00000000  000196b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ed  00000000  00000000  00032378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893fe  00000000  00000000  00042865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbc63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f14  00000000  00000000  000cbca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000cfbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08006c40 	.word	0x08006c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08006c40 	.word	0x08006c40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f8f3 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f871 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f943 	bl	80003e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8b3 	bl	80002c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000162:	f000 f8df 	bl	8000324 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f913 	bl	8000390 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello!\r\n");
 800016a:	482a      	ldr	r0, [pc, #168]	@ (8000214 <main+0xc8>)
 800016c:	f005 fec6 	bl	8005efc <puts>

  // PN532_SPI_Init(&pn532);
  PN532_I2C_Init(&pn532);
 8000170:	4829      	ldr	r0, [pc, #164]	@ (8000218 <main+0xcc>)
 8000172:	f000 fe73 	bl	8000e5c <PN532_I2C_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 8000176:	4929      	ldr	r1, [pc, #164]	@ (800021c <main+0xd0>)
 8000178:	4827      	ldr	r0, [pc, #156]	@ (8000218 <main+0xcc>)
 800017a:	f000 fcc5 	bl	8000b08 <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK) {
 800017e:	4927      	ldr	r1, [pc, #156]	@ (800021c <main+0xd0>)
 8000180:	4825      	ldr	r0, [pc, #148]	@ (8000218 <main+0xcc>)
 8000182:	f000 fcc1 	bl	8000b08 <PN532_GetFirmwareVersion>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d10f      	bne.n	80001ac <main+0x60>
    printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 800018c:	4b23      	ldr	r3, [pc, #140]	@ (800021c <main+0xd0>)
 800018e:	785b      	ldrb	r3, [r3, #1]
 8000190:	4619      	mov	r1, r3
 8000192:	4b22      	ldr	r3, [pc, #136]	@ (800021c <main+0xd0>)
 8000194:	789b      	ldrb	r3, [r3, #2]
 8000196:	461a      	mov	r2, r3
 8000198:	4821      	ldr	r0, [pc, #132]	@ (8000220 <main+0xd4>)
 800019a:	f005 fe3f 	bl	8005e1c <iprintf>
  } else {
    return -1;
  }
  PN532_SamConfiguration(&pn532);
 800019e:	481e      	ldr	r0, [pc, #120]	@ (8000218 <main+0xcc>)
 80001a0:	f000 fcd6 	bl	8000b50 <PN532_SamConfiguration>
  printf("Waiting for RFID/NFC card...\r\n");
 80001a4:	481f      	ldr	r0, [pc, #124]	@ (8000224 <main+0xd8>)
 80001a6:	f005 fea9 	bl	8005efc <puts>
 80001aa:	e002      	b.n	80001b2 <main+0x66>
    return -1;
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295
 80001b0:	e02b      	b.n	800020a <main+0xbe>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 80001b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001b6:	2200      	movs	r2, #0
 80001b8:	491b      	ldr	r1, [pc, #108]	@ (8000228 <main+0xdc>)
 80001ba:	4817      	ldr	r0, [pc, #92]	@ (8000218 <main+0xcc>)
 80001bc:	f000 fcea 	bl	8000b94 <PN532_ReadPassiveTarget>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4a1a      	ldr	r2, [pc, #104]	@ (800022c <main+0xe0>)
 80001c4:	6013      	str	r3, [r2, #0]
	     if (uid_len == PN532_STATUS_ERROR) {
 80001c6:	4b19      	ldr	r3, [pc, #100]	@ (800022c <main+0xe0>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ce:	d103      	bne.n	80001d8 <main+0x8c>
	       printf(".");
 80001d0:	202e      	movs	r0, #46	@ 0x2e
 80001d2:	f005 fe35 	bl	8005e40 <putchar>
 80001d6:	e7ec      	b.n	80001b2 <main+0x66>
	     } else {
	       printf("Found card with UID: ");
 80001d8:	4815      	ldr	r0, [pc, #84]	@ (8000230 <main+0xe4>)
 80001da:	f005 fe1f 	bl	8005e1c <iprintf>
	       for (uint8_t i = 0; i < uid_len; i++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	e009      	b.n	80001f8 <main+0xac>
	         printf("%02x ", uid[i]);
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4a10      	ldr	r2, [pc, #64]	@ (8000228 <main+0xdc>)
 80001e8:	5cd3      	ldrb	r3, [r2, r3]
 80001ea:	4619      	mov	r1, r3
 80001ec:	4811      	ldr	r0, [pc, #68]	@ (8000234 <main+0xe8>)
 80001ee:	f005 fe15 	bl	8005e1c <iprintf>
	       for (uint8_t i = 0; i < uid_len; i++) {
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	3301      	adds	r3, #1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	79fa      	ldrb	r2, [r7, #7]
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <main+0xe0>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	429a      	cmp	r2, r3
 8000200:	dbf0      	blt.n	80001e4 <main+0x98>
	       }
	       printf("\r\n");
 8000202:	480d      	ldr	r0, [pc, #52]	@ (8000238 <main+0xec>)
 8000204:	f005 fe7a 	bl	8005efc <puts>
	  uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000208:	e7d3      	b.n	80001b2 <main+0x66>
	     }
  }
  /* USER CODE END 3 */
}
 800020a:	4618      	mov	r0, r3
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	08006c58 	.word	0x08006c58
 8000218:	20000288 	.word	0x20000288
 800021c:	20000084 	.word	0x20000084
 8000220:	08006c60 	.word	0x08006c60
 8000224:	08006c8c 	.word	0x08006c8c
 8000228:	20000184 	.word	0x20000184
 800022c:	20000190 	.word	0x20000190
 8000230:	08006cac 	.word	0x08006cac
 8000234:	08006cc4 	.word	0x08006cc4
 8000238:	08006ccc 	.word	0x08006ccc

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b090      	sub	sp, #64	@ 0x40
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f005 ff36 	bl	80060bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025e:	2301      	movs	r3, #1
 8000260:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000278:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800027e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0318 	add.w	r3, r7, #24
 8000284:	4618      	mov	r0, r3
 8000286:	f004 f963 	bl	8004550 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f93c 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000298:	2302      	movs	r3, #2
 800029a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2102      	movs	r1, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f004 fbd0 	bl	8004a54 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f927 	bl	800050c <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3740      	adds	r7, #64	@ 0x40
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002ce:	4a13      	ldr	r2, [pc, #76]	@ (800031c <MX_I2C1_Init+0x54>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002d2:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002d4:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <MX_I2C1_Init+0x58>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fe:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_I2C1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MX_I2C1_Init+0x50>)
 8000306:	f001 fc09 	bl	8001b1c <HAL_I2C_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 f8fc 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000194 	.word	0x20000194
 800031c:	40005400 	.word	0x40005400
 8000320:	000186a0 	.word	0x000186a0

08000324 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000328:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <MX_SPI1_Init+0x64>)
 800032a:	4a18      	ldr	r2, [pc, #96]	@ (800038c <MX_SPI1_Init+0x68>)
 800032c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800032e:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000330:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <MX_SPI1_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_SPI1_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000356:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000358:	2230      	movs	r2, #48	@ 0x30
 800035a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <MX_SPI1_Init+0x64>)
 800035e:	2280      	movs	r2, #128	@ 0x80
 8000360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000362:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <MX_SPI1_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000370:	220a      	movs	r2, #10
 8000372:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	@ (8000388 <MX_SPI1_Init+0x64>)
 8000376:	f004 fcfb 	bl	8004d70 <HAL_SPI_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000380:	f000 f8c4 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200001e8 	.word	0x200001e8
 800038c:	40013000 	.word	0x40013000

08000390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 8000396:	4a12      	ldr	r2, [pc, #72]	@ (80003e0 <MX_USART1_UART_Init+0x50>)
 8000398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800039a:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 800039c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_USART1_UART_Init+0x4c>)
 80003c8:	f004 fe51 	bl	800506e <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003d2:	f000 f89b 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000240 	.word	0x20000240
 80003e0:	40013800 	.word	0x40013800

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f8:	4b37      	ldr	r3, [pc, #220]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a36      	ldr	r2, [pc, #216]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b34      	ldr	r3, [pc, #208]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000410:	4b31      	ldr	r3, [pc, #196]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a30      	ldr	r2, [pc, #192]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b2e      	ldr	r3, [pc, #184]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0320 	and.w	r3, r3, #32
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b2b      	ldr	r3, [pc, #172]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a2a      	ldr	r2, [pc, #168]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b28      	ldr	r3, [pc, #160]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b25      	ldr	r3, [pc, #148]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a24      	ldr	r2, [pc, #144]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <MX_GPIO_Init+0xf4>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045e:	481f      	ldr	r0, [pc, #124]	@ (80004dc <MX_GPIO_Init+0xf8>)
 8000460:	f001 fb44 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2110      	movs	r1, #16
 8000468:	481d      	ldr	r0, [pc, #116]	@ (80004e0 <MX_GPIO_Init+0xfc>)
 800046a:	f001 fb3f 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PN532_RST_Pin|PN532_REQ_Pin, GPIO_PIN_SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2103      	movs	r1, #3
 8000472:	481c      	ldr	r0, [pc, #112]	@ (80004e4 <MX_GPIO_Init+0x100>)
 8000474:	f001 fb3a 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000478:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000486:	2303      	movs	r3, #3
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4812      	ldr	r0, [pc, #72]	@ (80004dc <MX_GPIO_Init+0xf8>)
 8000492:	f001 f9a7 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8000496:	2310      	movs	r3, #16
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	2301      	movs	r3, #1
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	480c      	ldr	r0, [pc, #48]	@ (80004e0 <MX_GPIO_Init+0xfc>)
 80004ae:	f001 f999 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PN532_RST_Pin PN532_REQ_Pin */
  GPIO_InitStruct.Pin = PN532_RST_Pin|PN532_REQ_Pin;
 80004b2:	2303      	movs	r3, #3
 80004b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <MX_GPIO_Init+0x100>)
 80004ca:	f001 f98b 	bl	80017e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ce:	bf00      	nop
 80004d0:	3720      	adds	r7, #32
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40011000 	.word	0x40011000
 80004e0:	40010800 	.word	0x40010800
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80004f0:	1d39      	adds	r1, r7, #4
 80004f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004f6:	2201      	movs	r2, #1
 80004f8:	4803      	ldr	r0, [pc, #12]	@ (8000508 <__io_putchar+0x20>)
 80004fa:	f004 fe08 	bl	800510e <HAL_UART_Transmit>

  return ch;
 80004fe:	687b      	ldr	r3, [r7, #4]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000240 	.word	0x20000240

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <Error_Handler+0x8>

08000518 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b0c8      	sub	sp, #288	@ 0x120
 800051c:	af00      	add	r7, sp, #0
 800051e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000522:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000526:	6018      	str	r0, [r3, #0]
 8000528:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800052c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000530:	6019      	str	r1, [r3, #0]
 8000532:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000536:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 800053a:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800053c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000540:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	2bff      	cmp	r3, #255	@ 0xff
 8000548:	d806      	bhi.n	8000558 <PN532_WriteFrame+0x40>
 800054a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800054e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	e0aa      	b.n	80006b4 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8000564:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000568:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000570:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000574:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000578:	2200      	movs	r2, #0
 800057a:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 800057c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000580:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000584:	22ff      	movs	r2, #255	@ 0xff
 8000586:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800058e:	e010      	b.n	80005b2 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000590:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000594:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000598:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800059c:	5cd2      	ldrb	r2, [r2, r3]
 800059e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80005a2:	4413      	add	r3, r2
 80005a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80005a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80005ac:	3301      	adds	r3, #1
 80005ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80005b2:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d9ea      	bls.n	8000590 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 80005ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005be:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005ce:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80005d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005d4:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	425b      	negs	r3, r3
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005e8:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80005ea:	2300      	movs	r3, #0
 80005ec:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 80005f0:	e023      	b.n	800063a <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 80005f2:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80005f6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80005fa:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	441a      	add	r2, r3
 8000602:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000606:	3305      	adds	r3, #5
 8000608:	7811      	ldrb	r1, [r2, #0]
 800060a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800060e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000612:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000614:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000618:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800061c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	4413      	add	r3, r2
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800062a:	4413      	add	r3, r2
 800062c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000630:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000634:	3301      	adds	r3, #1
 8000636:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800063a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800063e:	b29b      	uxth	r3, r3
 8000640:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000644:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000648:	8812      	ldrh	r2, [r2, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d8d1      	bhi.n	80005f2 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 800064e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000652:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	3305      	adds	r3, #5
 800065a:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 800065e:	43d2      	mvns	r2, r2
 8000660:	b2d1      	uxtb	r1, r2
 8000662:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000666:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800066a:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800066c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000670:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	3306      	adds	r3, #6
 8000678:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800067c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000680:	2100      	movs	r1, #0
 8000682:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000684:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000688:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000694:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000698:	8812      	ldrh	r2, [r2, #0]
 800069a:	3207      	adds	r2, #7
 800069c:	b291      	uxth	r1, r2
 800069e:	f107 0214 	add.w	r2, r7, #20
 80006a2:	4610      	mov	r0, r2
 80006a4:	4798      	blx	r3
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	e000      	b.n	80006b4 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0c8      	sub	sp, #288	@ 0x120
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006ce:	6018      	str	r0, [r3, #0]
 80006d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80006d8:	6019      	str	r1, [r3, #0]
 80006da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006de:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 80006e2:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80006ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80006ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80006fa:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 80006fe:	8812      	ldrh	r2, [r2, #0]
 8000700:	3207      	adds	r2, #7
 8000702:	b291      	uxth	r1, r2
 8000704:	f107 0214 	add.w	r2, r7, #20
 8000708:	4610      	mov	r0, r2
 800070a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000712:	e019      	b.n	8000748 <PN532_ReadFrame+0x88>
        offset += 1;
 8000714:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000718:	3301      	adds	r3, #1
 800071a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 800071e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000722:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	1dda      	adds	r2, r3, #7
 800072a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800072e:	429a      	cmp	r2, r3
 8000730:	da0a      	bge.n	8000748 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000732:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000736:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	485b      	ldr	r0, [pc, #364]	@ (80008ac <PN532_ReadFrame+0x1ec>)
 8000740:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	e0ab      	b.n	80008a0 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000748:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800074c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000750:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000754:	5cd3      	ldrb	r3, [r2, r3]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d0dc      	beq.n	8000714 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 800075a:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800075e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000762:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	2bff      	cmp	r3, #255	@ 0xff
 800076a:	d00a      	beq.n	8000782 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 800076c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000770:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	484c      	ldr	r0, [pc, #304]	@ (80008ac <PN532_ReadFrame+0x1ec>)
 800077a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	e08e      	b.n	80008a0 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000782:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000786:	3301      	adds	r3, #1
 8000788:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 800078c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000790:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	1dda      	adds	r2, r3, #7
 8000798:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800079c:	429a      	cmp	r2, r3
 800079e:	da0a      	bge.n	80007b6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 80007a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007a4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4840      	ldr	r0, [pc, #256]	@ (80008b0 <PN532_ReadFrame+0x1f0>)
 80007ae:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	e074      	b.n	80008a0 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80007b6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007ba:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007be:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80007c8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80007cc:	3301      	adds	r3, #1
 80007ce:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80007d2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80007d6:	5cd2      	ldrb	r2, [r2, r3]
 80007d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80007dc:	4413      	add	r3, r2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00a      	beq.n	80007fa <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 80007e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80007e8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4830      	ldr	r0, [pc, #192]	@ (80008b4 <PN532_ReadFrame+0x1f4>)
 80007f2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	e052      	b.n	80008a0 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000800:	e014      	b.n	800082c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000802:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000806:	1c9a      	adds	r2, r3, #2
 8000808:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800080c:	4413      	add	r3, r2
 800080e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000812:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000816:	5cd2      	ldrb	r2, [r2, r3]
 8000818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800081c:	4413      	add	r3, r2
 800081e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000822:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000826:	3301      	adds	r3, #1
 8000828:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 800082c:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000830:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000834:	429a      	cmp	r2, r3
 8000836:	d2e4      	bcs.n	8000802 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00a      	beq.n	8000856 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000840:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000844:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	481a      	ldr	r0, [pc, #104]	@ (80008b8 <PN532_ReadFrame+0x1f8>)
 800084e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	e024      	b.n	80008a0 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000856:	2300      	movs	r3, #0
 8000858:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 800085c:	e018      	b.n	8000890 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 800085e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000862:	1c9a      	adds	r2, r3, #2
 8000864:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8000868:	441a      	add	r2, r3
 800086a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800086e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000872:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8000876:	6809      	ldr	r1, [r1, #0]
 8000878:	440b      	add	r3, r1
 800087a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800087e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000882:	5c8a      	ldrb	r2, [r1, r2]
 8000884:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000886:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800088a:	3301      	adds	r3, #1
 800088c:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000890:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8000894:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000898:	429a      	cmp	r2, r3
 800089a:	d3e0      	bcc.n	800085e <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 800089c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08006cd0 	.word	0x08006cd0
 80008b0:	08006d04 	.word	0x08006d04
 80008b4:	08006d20 	.word	0x08006d20
 80008b8:	08006d50 	.word	0x08006d50

080008bc <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b0c7      	sub	sp, #284	@ 0x11c
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 80008c6:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 80008ca:	6020      	str	r0, [r4, #0]
 80008cc:	4608      	mov	r0, r1
 80008ce:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80008d2:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 80008d6:	600a      	str	r2, [r1, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008de:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 80008e2:	4602      	mov	r2, r0
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008ee:	460a      	mov	r2, r1
 80008f0:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 80008f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80008fa:	22d4      	movs	r2, #212	@ 0xd4
 80008fc:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 80008fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000906:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800090a:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 800090e:	7812      	ldrb	r2, [r2, #0]
 8000910:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000918:	e012      	b.n	8000940 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 800091a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800091e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000922:	441a      	add	r2, r3
 8000924:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000928:	3302      	adds	r3, #2
 800092a:	7811      	ldrb	r1, [r2, #0]
 800092c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000930:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000934:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800093a:	3301      	adds	r3, #1
 800093c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8000940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8000944:	b29b      	uxth	r3, r3
 8000946:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 800094a:	429a      	cmp	r2, r3
 800094c:	d8e5      	bhi.n	800091a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 800094e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8000952:	3302      	adds	r3, #2
 8000954:	b29a      	uxth	r2, r3
 8000956:	f107 0110 	add.w	r1, r7, #16
 800095a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800095e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	f7ff fdd8 	bl	8000518 <PN532_WriteFrame>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d011      	beq.n	8000992 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 800096e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000972:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 800097c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000980:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	485b      	ldr	r0, [pc, #364]	@ (8000af8 <PN532_CallFunction+0x23c>)
 800098a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	e0ac      	b.n	8000aec <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000992:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000996:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80009a2:	4798      	blx	r3
 80009a4:	4603      	mov	r3, r0
 80009a6:	f083 0301 	eor.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	e09a      	b.n	8000aec <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 80009b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f107 0210 	add.w	r2, r7, #16
 80009c6:	2106      	movs	r1, #6
 80009c8:	4610      	mov	r0, r2
 80009ca:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80009d2:	e01c      	b.n	8000a0e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 80009d4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80009d8:	4a48      	ldr	r2, [pc, #288]	@ (8000afc <PN532_CallFunction+0x240>)
 80009da:	5cd2      	ldrb	r2, [r2, r3]
 80009dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80009e0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80009e4:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 80009e8:	5ccb      	ldrb	r3, [r1, r3]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d00a      	beq.n	8000a04 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 80009ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	4841      	ldr	r0, [pc, #260]	@ (8000b00 <PN532_CallFunction+0x244>)
 80009fc:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e073      	b.n	8000aec <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000a04:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a08:	3301      	adds	r3, #1
 8000a0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8000a0e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d9de      	bls.n	80009d4 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000a16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8000a26:	4798      	blx	r3
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f083 0301 	eor.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	e058      	b.n	8000aec <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000a3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	3302      	adds	r3, #2
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f107 0110 	add.w	r1, r7, #16
 8000a4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	f7ff fe33 	bl	80006c0 <PN532_ReadFrame>
 8000a5a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000a5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2bd5      	cmp	r3, #213	@ 0xd5
 8000a6a:	d10d      	bne.n	8000a88 <PN532_CallFunction+0x1cc>
 8000a6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a74:	785b      	ldrb	r3, [r3, #1]
 8000a76:	461a      	mov	r2, r3
 8000a78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a7c:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d00a      	beq.n	8000a9e <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000a88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	481b      	ldr	r0, [pc, #108]	@ (8000b04 <PN532_CallFunction+0x248>)
 8000a96:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e026      	b.n	8000aec <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000aa4:	e015      	b.n	8000ad2 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000aa6:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000aaa:	1c9a      	adds	r2, r3, #2
 8000aac:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ab0:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000ab4:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000ab8:	6809      	ldr	r1, [r1, #0]
 8000aba:	440b      	add	r3, r1
 8000abc:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000ac0:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8000ac4:	5c8a      	ldrb	r2, [r1, r2]
 8000ac6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000ac8:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000acc:	3301      	adds	r3, #1
 8000ace:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8000ad2:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000adc:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000ae0:	8812      	ldrh	r2, [r2, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d8df      	bhi.n	8000aa6 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000ae6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000aea:	3b02      	subs	r3, #2
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08006d84 	.word	0x08006d84
 8000afc:	08006e5c 	.word	0x08006e5c
 8000b00:	08006d98 	.word	0x08006d98
 8000b04:	08006dc4 	.word	0x08006dc4

08000b08 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af04      	add	r7, sp, #16
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000b12:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2304      	movs	r3, #4
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	2102      	movs	r1, #2
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fec8 	bl	80008bc <PN532_CallFunction>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b32:	d106      	bne.n	8000b42 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <PN532_GetFirmwareVersion+0x44>)
 8000b3a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	e000      	b.n	8000b44 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	08006dec 	.word	0x08006dec

08000b50 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af04      	add	r7, sp, #16
 8000b56:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <PN532_SamConfiguration+0x40>)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	6812      	ldr	r2, [r2, #0]
 8000b60:	4611      	mov	r1, r2
 8000b62:	8019      	strh	r1, [r3, #0]
 8000b64:	3302      	adds	r3, #2
 8000b66:	0c12      	lsrs	r2, r2, #16
 8000b68:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2303      	movs	r3, #3
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2114      	movs	r1, #20
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fe9b 	bl	80008bc <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	08006e08 	.word	0x08006e08

08000b94 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b090      	sub	sp, #64	@ 0x40
 8000b98:	af04      	add	r7, sp, #16
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2313      	movs	r3, #19
 8000bc4:	214a      	movs	r1, #74	@ 0x4a
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff fe78 	bl	80008bc <PN532_CallFunction>
 8000bcc:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	da02      	bge.n	8000bda <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	e02e      	b.n	8000c38 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000bda:	7c3b      	ldrb	r3, [r7, #16]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d006      	beq.n	8000bee <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4816      	ldr	r0, [pc, #88]	@ (8000c40 <PN532_ReadPassiveTarget+0xac>)
 8000be6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bec:	e024      	b.n	8000c38 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 8000bee:	7d7b      	ldrb	r3, [r7, #21]
 8000bf0:	2b07      	cmp	r3, #7
 8000bf2:	d906      	bls.n	8000c02 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4812      	ldr	r0, [pc, #72]	@ (8000c44 <PN532_ReadPassiveTarget+0xb0>)
 8000bfa:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	e01a      	b.n	8000c38 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c08:	e010      	b.n	8000c2c <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 8000c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c0e:	1d9a      	adds	r2, r3, #6
 8000c10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	440b      	add	r3, r1
 8000c18:	3230      	adds	r2, #48	@ 0x30
 8000c1a:	443a      	add	r2, r7
 8000c1c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000c20:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c26:	3301      	adds	r3, #1
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000c2c:	7d7b      	ldrb	r3, [r7, #21]
 8000c2e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3e9      	bcc.n	8000c0a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000c36:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3730      	adds	r7, #48	@ 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	08006e0c 	.word	0x08006e0c
 8000c44:	08006e2c 	.word	0x08006e2c

08000c48 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2101      	movs	r1, #1
 8000c50:	480c      	ldr	r0, [pc, #48]	@ (8000c84 <PN532_Reset+0x3c>)
 8000c52:	f000 ff4b 	bl	8001aec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c56:	2064      	movs	r0, #100	@ 0x64
 8000c58:	f000 fbd2 	bl	8001400 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <PN532_Reset+0x3c>)
 8000c62:	f000 ff43 	bl	8001aec <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000c66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c6a:	f000 fbc9 	bl	8001400 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2101      	movs	r1, #1
 8000c72:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <PN532_Reset+0x3c>)
 8000c74:	f000 ff3a 	bl	8001aec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000c78:	2064      	movs	r0, #100	@ 0x64
 8000c7a:	f000 fbc1 	bl	8001400 <HAL_Delay>
    return PN532_STATUS_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40010c00 	.word	0x40010c00

08000c88 <PN532_Log>:

void PN532_Log(const char* log) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000c90:	6879      	ldr	r1, [r7, #4]
 8000c92:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <PN532_Log+0x18>)
 8000c94:	f005 f8c2 	bl	8005e1c <iprintf>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	08006e54 	.word	0x08006e54

08000ca4 <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	9200      	str	r2, [sp, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	2148      	movs	r1, #72	@ 0x48
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <i2c_read+0x24>)
 8000cbc:	f001 f984 	bl	8001fc8 <HAL_I2C_Master_Receive>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000194 	.word	0x20000194

08000ccc <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	220a      	movs	r2, #10
 8000cdc:	9200      	str	r2, [sp, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	2148      	movs	r1, #72	@ 0x48
 8000ce2:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <i2c_write+0x24>)
 8000ce4:	f001 f872 	bl	8001dcc <HAL_I2C_Master_Transmit>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000194 	.word	0x20000194

08000cf4 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8000cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cf8:	b087      	sub	sp, #28
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	807b      	strh	r3, [r7, #2]
 8000d02:	466b      	mov	r3, sp
 8000d04:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 8000d06:	2300      	movs	r3, #0
 8000d08:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	1c59      	adds	r1, r3, #1
 8000d0e:	1e4b      	subs	r3, r1, #1
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	460a      	mov	r2, r1
 8000d14:	2300      	movs	r3, #0
 8000d16:	4690      	mov	r8, r2
 8000d18:	4699      	mov	r9, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 0300 	mov.w	r3, #0
 8000d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d2e:	460a      	mov	r2, r1
 8000d30:	2300      	movs	r3, #0
 8000d32:	4614      	mov	r4, r2
 8000d34:	461d      	mov	r5, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	00eb      	lsls	r3, r5, #3
 8000d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d44:	00e2      	lsls	r2, r4, #3
 8000d46:	460b      	mov	r3, r1
 8000d48:	3307      	adds	r3, #7
 8000d4a:	08db      	lsrs	r3, r3, #3
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d52:	466b      	mov	r3, sp
 8000d54:	3300      	adds	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffa0 	bl	8000ca4 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8000d64:	7a3b      	ldrb	r3, [r7, #8]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d002      	beq.n	8000d70 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e01a      	b.n	8000da6 <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8000d70:	887b      	ldrh	r3, [r7, #2]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	4619      	mov	r1, r3
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff ff93 	bl	8000ca4 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
 8000d82:	e00a      	b.n	8000d9a <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	7dfb      	ldrb	r3, [r7, #23]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	440b      	add	r3, r1
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	5c8a      	ldrb	r2, [r1, r2]
 8000d92:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	3301      	adds	r3, #1
 8000d98:	75fb      	strb	r3, [r7, #23]
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8ef      	bhi.n	8000d84 <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	46b5      	mov	sp, r6
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000db2 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff82 	bl	8000ccc <i2c_write>
    return PN532_STATUS_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8000dda:	2300      	movs	r3, #0
 8000ddc:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 8000dde:	f000 fb05 	bl	80013ec <HAL_GetTick>
 8000de2:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000de4:	e00d      	b.n	8000e02 <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2101      	movs	r1, #1
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff59 	bl	8000ca4 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8000df2:	7a3b      	ldrb	r3, [r7, #8]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d101      	bne.n	8000dfc <PN532_I2C_WaitReady+0x2a>
            return true;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e00b      	b.n	8000e14 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f000 faff 	bl	8001400 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000e02:	f000 faf3 	bl	80013ec <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d8e9      	bhi.n	8000de6 <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
    // TODO
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2102      	movs	r1, #2
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <PN532_I2C_Wakeup+0x3c>)
 8000e26:	f000 fe61 	bl	8001aec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	@ 0x64
 8000e2c:	f000 fae8 	bl	8001400 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2102      	movs	r1, #2
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <PN532_I2C_Wakeup+0x3c>)
 8000e36:	f000 fe59 	bl	8001aec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000e3a:	2064      	movs	r0, #100	@ 0x64
 8000e3c:	f000 fae0 	bl	8001400 <HAL_Delay>
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2102      	movs	r1, #2
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <PN532_I2C_Wakeup+0x3c>)
 8000e46:	f000 fe51 	bl	8001aec <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000e4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e4e:	f000 fad7 	bl	8001400 <HAL_Delay>
    return PN532_STATUS_OK;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010c00 	.word	0x40010c00

08000e5c <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <PN532_I2C_Init+0x3c>)
 8000e68:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <PN532_I2C_Init+0x40>)
 8000e6e:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <PN532_I2C_Init+0x44>)
 8000e74:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <PN532_I2C_Init+0x48>)
 8000e7a:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <PN532_I2C_Init+0x4c>)
 8000e80:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <PN532_I2C_Init+0x50>)
 8000e86:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	4798      	blx	r3
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08000c49 	.word	0x08000c49
 8000e9c:	08000cf5 	.word	0x08000cf5
 8000ea0:	08000db3 	.word	0x08000db3
 8000ea4:	08000dd3 	.word	0x08000dd3
 8000ea8:	08000e1d 	.word	0x08000e1d
 8000eac:	08000c89 	.word	0x08000c89

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa4 <HAL_I2C_MspInit+0x90>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d133      	bne.n	8000f9c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <HAL_I2C_MspInit+0x94>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa8 <HAL_I2C_MspInit+0x94>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_I2C_MspInit+0x94>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4c:	23c0      	movs	r3, #192	@ 0xc0
 8000f4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f50:	2312      	movs	r3, #18
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4813      	ldr	r0, [pc, #76]	@ (8000fac <HAL_I2C_MspInit+0x98>)
 8000f60:	f000 fc40 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_I2C_MspInit+0x94>)
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa8 <HAL_I2C_MspInit+0x94>)
 8000f6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f6e:	61d3      	str	r3, [r2, #28]
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_I2C_MspInit+0x94>)
 8000f72:	69db      	ldr	r3, [r3, #28]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	201f      	movs	r0, #31
 8000f82:	f000 fb38 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f86:	201f      	movs	r0, #31
 8000f88:	f000 fb51 	bl	800162e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2020      	movs	r0, #32
 8000f92:	f000 fb30 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f96:	2020      	movs	r0, #32
 8000f98:	f000 fb49 	bl	800162e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	3720      	adds	r7, #32
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <HAL_SPI_MspInit+0x98>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d137      	bne.n	8001040 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <HAL_SPI_MspInit+0x9c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800104c <HAL_SPI_MspInit+0x9c>)
 8000fd6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <HAL_SPI_MspInit+0x9c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_SPI_MspInit+0x9c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <HAL_SPI_MspInit+0x9c>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_SPI_MspInit+0x9c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001000:	23a0      	movs	r3, #160	@ 0xa0
 8001002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	480f      	ldr	r0, [pc, #60]	@ (8001050 <HAL_SPI_MspInit+0xa0>)
 8001014:	f000 fbe6 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001018:	2340      	movs	r3, #64	@ 0x40
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	@ (8001050 <HAL_SPI_MspInit+0xa0>)
 800102c:	f000 fbda 	bl	80017e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2023      	movs	r0, #35	@ 0x23
 8001036:	f000 fade 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800103a:	2023      	movs	r0, #35	@ 0x23
 800103c:	f000 faf7 	bl	800162e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013000 	.word	0x40013000
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a20      	ldr	r2, [pc, #128]	@ (80010f0 <HAL_UART_MspInit+0x9c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d139      	bne.n	80010e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001074:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <HAL_UART_MspInit+0xa0>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a1e      	ldr	r2, [pc, #120]	@ (80010f4 <HAL_UART_MspInit+0xa0>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <HAL_UART_MspInit+0xa0>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_UART_MspInit+0xa0>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a18      	ldr	r2, [pc, #96]	@ (80010f4 <HAL_UART_MspInit+0xa0>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_UART_MspInit+0xa0>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	480f      	ldr	r0, [pc, #60]	@ (80010f8 <HAL_UART_MspInit+0xa4>)
 80010ba:	f000 fb93 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <HAL_UART_MspInit+0xa4>)
 80010d4:	f000 fb86 	bl	80017e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2025      	movs	r0, #37	@ 0x25
 80010de:	f000 fa8a 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e2:	2025      	movs	r0, #37	@ 0x25
 80010e4:	f000 faa3 	bl	800162e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010800 	.word	0x40010800

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f93c 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001158:	4802      	ldr	r0, [pc, #8]	@ (8001164 <I2C1_EV_IRQHandler+0x10>)
 800115a:	f001 f9a1 	bl	80024a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000194 	.word	0x20000194

08001168 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <I2C1_ER_IRQHandler+0x10>)
 800116e:	f001 faea 	bl	8002746 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000194 	.word	0x20000194

0800117c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <SPI1_IRQHandler+0x10>)
 8001182:	f003 fe79 	bl	8004e78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001e8 	.word	0x200001e8

08001190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <USART1_IRQHandler+0x10>)
 8001196:	f004 f845 	bl	8005224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000240 	.word	0x20000240

080011a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e00a      	b.n	80011cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b6:	f3af 8000 	nop.w
 80011ba:	4601      	mov	r1, r0
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60ba      	str	r2, [r7, #8]
 80011c2:	b2ca      	uxtb	r2, r1
 80011c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbf0      	blt.n	80011b6 <_read+0x12>
  }

  return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	e009      	b.n	8001204 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	60ba      	str	r2, [r7, #8]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f975 	bl	80004e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	dbf1      	blt.n	80011f0 <_write+0x12>
  }
  return len;
 800120c:	687b      	ldr	r3, [r7, #4]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_close>:

int _close(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800123c:	605a      	str	r2, [r3, #4]
  return 0;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <_isatty>:

int _isatty(int file)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800125e:	b480      	push	{r7}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
	...

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f004 ff56 	bl	8006158 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20005000 	.word	0x20005000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200002a0 	.word	0x200002a0
 80012e0:	200003f8 	.word	0x200003f8

080012e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff fff8 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480b      	ldr	r0, [pc, #44]	@ (8001324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012f6:	490c      	ldr	r1, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800130c:	4c09      	ldr	r4, [pc, #36]	@ (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f004 ff23 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7fe ff15 	bl	800014c <main>
  bx lr
 8001322:	4770      	bx	lr
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800132c:	08006ecc 	.word	0x08006ecc
  ldr r2, =_sbss
 8001330:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001334:	200003f4 	.word	0x200003f4

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f947 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fdaa 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f95f 	bl	800164a <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 f927 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	@ (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	20000008 	.word	0x20000008
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_IncTick+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_IncTick+0x20>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <HAL_IncTick+0x20>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	20000008 	.word	0x20000008
 80013e8:	200002a4 	.word	0x200002a4

080013ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <HAL_GetTick+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	200002a4 	.word	0x200002a4

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff fff0 	bl	80013ec <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_Delay+0x44>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffe0 	bl	80013ec <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000008 	.word	0x20000008

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4906      	ldr	r1, [pc, #24]	@ (80014e0 <__NVIC_EnableIRQ+0x34>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff90 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff2d 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff42 	bl	8001490 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff90 	bl	8001538 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5f 	bl	80014e4 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff35 	bl	80014ac <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa2 	bl	800159c <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001662:	b480      	push	{r7}
 8001664:	b085      	sub	sp, #20
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d008      	beq.n	800168c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2204      	movs	r2, #4
 800167e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e020      	b.n	80016ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020e 	bic.w	r2, r2, #14
 800169a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d005      	beq.n	80016fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2204      	movs	r2, #4
 80016f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73fb      	strb	r3, [r7, #15]
 80016fa:	e051      	b.n	80017a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 020e 	bic.w	r2, r2, #14
 800170a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <HAL_DMA_Abort_IT+0xd4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d029      	beq.n	800177a <HAL_DMA_Abort_IT+0xa2>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <HAL_DMA_Abort_IT+0xd8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d022      	beq.n	8001776 <HAL_DMA_Abort_IT+0x9e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1f      	ldr	r2, [pc, #124]	@ (80017b4 <HAL_DMA_Abort_IT+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01a      	beq.n	8001770 <HAL_DMA_Abort_IT+0x98>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1e      	ldr	r2, [pc, #120]	@ (80017b8 <HAL_DMA_Abort_IT+0xe0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d012      	beq.n	800176a <HAL_DMA_Abort_IT+0x92>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <HAL_DMA_Abort_IT+0xe4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00a      	beq.n	8001764 <HAL_DMA_Abort_IT+0x8c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1b      	ldr	r2, [pc, #108]	@ (80017c0 <HAL_DMA_Abort_IT+0xe8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d102      	bne.n	800175e <HAL_DMA_Abort_IT+0x86>
 8001758:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800175c:	e00e      	b.n	800177c <HAL_DMA_Abort_IT+0xa4>
 800175e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001762:	e00b      	b.n	800177c <HAL_DMA_Abort_IT+0xa4>
 8001764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001768:	e008      	b.n	800177c <HAL_DMA_Abort_IT+0xa4>
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	e005      	b.n	800177c <HAL_DMA_Abort_IT+0xa4>
 8001770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001774:	e002      	b.n	800177c <HAL_DMA_Abort_IT+0xa4>
 8001776:	2310      	movs	r3, #16
 8001778:	e000      	b.n	800177c <HAL_DMA_Abort_IT+0xa4>
 800177a:	2301      	movs	r3, #1
 800177c:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_DMA_Abort_IT+0xec>)
 800177e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
    } 
  }
  return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40020008 	.word	0x40020008
 80017b0:	4002001c 	.word	0x4002001c
 80017b4:	40020030 	.word	0x40020030
 80017b8:	40020044 	.word	0x40020044
 80017bc:	40020058 	.word	0x40020058
 80017c0:	4002006c 	.word	0x4002006c
 80017c4:	40020000 	.word	0x40020000

080017c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017d6:	b2db      	uxtb	r3, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b08b      	sub	sp, #44	@ 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e169      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8158 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a9a      	ldr	r2, [pc, #616]	@ (8001a84 <HAL_GPIO_Init+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05e      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001820:	4a98      	ldr	r2, [pc, #608]	@ (8001a84 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d875      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001826:	4a98      	ldr	r2, [pc, #608]	@ (8001a88 <HAL_GPIO_Init+0x2a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d058      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 800182c:	4a96      	ldr	r2, [pc, #600]	@ (8001a88 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d86f      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001832:	4a96      	ldr	r2, [pc, #600]	@ (8001a8c <HAL_GPIO_Init+0x2a8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d052      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001838:	4a94      	ldr	r2, [pc, #592]	@ (8001a8c <HAL_GPIO_Init+0x2a8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d869      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800183e:	4a94      	ldr	r2, [pc, #592]	@ (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d04c      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001844:	4a92      	ldr	r2, [pc, #584]	@ (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d863      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800184a:	4a92      	ldr	r2, [pc, #584]	@ (8001a94 <HAL_GPIO_Init+0x2b0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d046      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001850:	4a90      	ldr	r2, [pc, #576]	@ (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d85d      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d82a      	bhi.n	80018b0 <HAL_GPIO_Init+0xcc>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d859      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800185e:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <HAL_GPIO_Init+0x80>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080018df 	.word	0x080018df
 8001868:	080018b9 	.word	0x080018b9
 800186c:	080018cb 	.word	0x080018cb
 8001870:	0800190d 	.word	0x0800190d
 8001874:	08001913 	.word	0x08001913
 8001878:	08001913 	.word	0x08001913
 800187c:	08001913 	.word	0x08001913
 8001880:	08001913 	.word	0x08001913
 8001884:	08001913 	.word	0x08001913
 8001888:	08001913 	.word	0x08001913
 800188c:	08001913 	.word	0x08001913
 8001890:	08001913 	.word	0x08001913
 8001894:	08001913 	.word	0x08001913
 8001898:	08001913 	.word	0x08001913
 800189c:	08001913 	.word	0x08001913
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001913 	.word	0x08001913
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	4a79      	ldr	r2, [pc, #484]	@ (8001a98 <HAL_GPIO_Init+0x2b4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b6:	e02c      	b.n	8001912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e029      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	3304      	adds	r3, #4
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e024      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	3308      	adds	r3, #8
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e01f      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	330c      	adds	r3, #12
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e01a      	b.n	8001914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e6:	2304      	movs	r3, #4
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e013      	b.n	8001914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	611a      	str	r2, [r3, #16]
          break;
 80018fe:	e009      	b.n	8001914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	615a      	str	r2, [r3, #20]
          break;
 800190a:	e003      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x130>
          break;
 8001912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	@ 0xff
 8001918:	d801      	bhi.n	800191e <HAL_GPIO_Init+0x13a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_Init+0x13e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	@ 0xff
 8001928:	d802      	bhi.n	8001930 <HAL_GPIO_Init+0x14c>
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x152>
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	3b08      	subs	r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	210f      	movs	r1, #15
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80b1 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	4b4d      	ldr	r3, [pc, #308]	@ (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a4c      	ldr	r2, [pc, #304]	@ (8001a9c <HAL_GPIO_Init+0x2b8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b4a      	ldr	r3, [pc, #296]	@ (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800197c:	4a48      	ldr	r2, [pc, #288]	@ (8001aa0 <HAL_GPIO_Init+0x2bc>)
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a40      	ldr	r2, [pc, #256]	@ (8001aa4 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3f      	ldr	r2, [pc, #252]	@ (8001aa8 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3e      	ldr	r2, [pc, #248]	@ (8001aac <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1e4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	@ (8001ab0 <HAL_GPIO_Init+0x2cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1e0>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	492f      	ldr	r1, [pc, #188]	@ (8001aa0 <HAL_GPIO_Init+0x2bc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	492c      	ldr	r1, [pc, #176]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4928      	ldr	r1, [pc, #160]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a24:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4922      	ldr	r1, [pc, #136]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	491e      	ldr	r1, [pc, #120]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4918      	ldr	r1, [pc, #96]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4914      	ldr	r1, [pc, #80]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d021      	beq.n	8001ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	490e      	ldr	r1, [pc, #56]	@ (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e021      	b.n	8001ac6 <HAL_GPIO_Init+0x2e2>
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4909      	ldr	r1, [pc, #36]	@ (8001ae8 <HAL_GPIO_Init+0x304>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae8e 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	372c      	adds	r7, #44	@ 0x2c
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e12b      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff f9e6 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	@ 0x24
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b80:	f003 f8b0 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a81      	ldr	r2, [pc, #516]	@ (8001d90 <HAL_I2C_Init+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d807      	bhi.n	8001ba0 <HAL_I2C_Init+0x84>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4a80      	ldr	r2, [pc, #512]	@ (8001d94 <HAL_I2C_Init+0x278>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	bf94      	ite	ls
 8001b98:	2301      	movls	r3, #1
 8001b9a:	2300      	movhi	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x92>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8001d98 <HAL_I2C_Init+0x27c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0e7      	b.n	8001d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a78      	ldr	r2, [pc, #480]	@ (8001d9c <HAL_I2C_Init+0x280>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0c9b      	lsrs	r3, r3, #18
 8001bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a6a      	ldr	r2, [pc, #424]	@ (8001d90 <HAL_I2C_Init+0x274>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d802      	bhi.n	8001bf0 <HAL_I2C_Init+0xd4>
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_I2C_Init+0xe8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	4a69      	ldr	r2, [pc, #420]	@ (8001da0 <HAL_I2C_Init+0x284>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	3301      	adds	r3, #1
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	495c      	ldr	r1, [pc, #368]	@ (8001d90 <HAL_I2C_Init+0x274>)
 8001c20:	428b      	cmp	r3, r1
 8001c22:	d819      	bhi.n	8001c58 <HAL_I2C_Init+0x13c>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e59      	subs	r1, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c38:	400b      	ands	r3, r1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00a      	beq.n	8001c54 <HAL_I2C_Init+0x138>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e59      	subs	r1, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c52:	e051      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e04f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d111      	bne.n	8001c84 <HAL_I2C_Init+0x168>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e58      	subs	r0, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	e012      	b.n	8001caa <HAL_I2C_Init+0x18e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1e58      	subs	r0, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	0099      	lsls	r1, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x196>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e022      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_I2C_Init+0x1bc>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1e58      	subs	r0, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cd6:	e00f      	b.n	8001cf8 <HAL_I2C_Init+0x1dc>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	6809      	ldr	r1, [r1, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6911      	ldr	r1, [r2, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	4311      	orrs	r1, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	000186a0 	.word	0x000186a0
 8001d94:	001e847f 	.word	0x001e847f
 8001d98:	003d08ff 	.word	0x003d08ff
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	10624dd3 	.word	0x10624dd3

08001da4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db6:	2b80      	cmp	r3, #128	@ 0x80
 8001db8:	d103      	bne.n	8001dc2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	460b      	mov	r3, r1
 8001dda:	817b      	strh	r3, [r7, #10]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fb04 	bl	80013ec <HAL_GetTick>
 8001de4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	f040 80e0 	bne.w	8001fb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2319      	movs	r3, #25
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4970      	ldr	r1, [pc, #448]	@ (8001fc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f002 f924 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e0d3      	b.n	8001fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_I2C_Master_Transmit+0x50>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e0cc      	b.n	8001fb6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d007      	beq.n	8001e42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2221      	movs	r2, #33	@ 0x21
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	893a      	ldrh	r2, [r7, #8]
 8001e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4a50      	ldr	r2, [pc, #320]	@ (8001fc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e84:	8979      	ldrh	r1, [r7, #10]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f001 fee6 	bl	8003c5c <I2C_MasterRequestWrite>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e08d      	b.n	8001fb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001eb0:	e066      	b.n	8001f80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	6a39      	ldr	r1, [r7, #32]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f002 f9e2 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d107      	bne.n	8001eda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06b      	b.n	8001fb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d11b      	bne.n	8001f54 <HAL_I2C_Master_Transmit+0x188>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d017      	beq.n	8001f54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	6a39      	ldr	r1, [r7, #32]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f002 f9d9 	bl	8004310 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d107      	bne.n	8001f7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e01a      	b.n	8001fb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d194      	bne.n	8001eb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	e000      	b.n	8001fb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fb4:	2302      	movs	r3, #2
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00100002 	.word	0x00100002
 8001fc4:	ffff0000 	.word	0xffff0000

08001fc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	@ 0x30
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	817b      	strh	r3, [r7, #10]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff fa04 	bl	80013ec <HAL_GetTick>
 8001fe4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	f040 824b 	bne.w	800248a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2319      	movs	r3, #25
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	497f      	ldr	r1, [pc, #508]	@ (80021fc <HAL_I2C_Master_Receive+0x234>)
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f002 f824 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
 800200c:	e23e      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_I2C_Master_Receive+0x54>
 8002018:	2302      	movs	r3, #2
 800201a:	e237      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b01      	cmp	r3, #1
 8002030:	d007      	beq.n	8002042 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002050:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2222      	movs	r2, #34	@ 0x22
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2210      	movs	r2, #16
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	893a      	ldrh	r2, [r7, #8]
 8002072:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4a5f      	ldr	r2, [pc, #380]	@ (8002200 <HAL_I2C_Master_Receive+0x238>)
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f001 fe68 	bl	8003d60 <I2C_MasterRequestRead>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e1f8      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d113      	bne.n	80020ca <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e1cc      	b.n	8002464 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d11e      	bne.n	8002110 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020e2:	b672      	cpsid	i
}
 80020e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800210a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800210c:	b662      	cpsie	i
}
 800210e:	e035      	b.n	800217c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002114:	2b02      	cmp	r3, #2
 8002116:	d11e      	bne.n	8002156 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002126:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002150:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002152:	b662      	cpsie	i
}
 8002154:	e012      	b.n	800217c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800217c:	e172      	b.n	8002464 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002182:	2b03      	cmp	r3, #3
 8002184:	f200 811f 	bhi.w	80023c6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218c:	2b01      	cmp	r3, #1
 800218e:	d123      	bne.n	80021d8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002192:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f002 f935 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e173      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021d6:	e145      	b.n	8002464 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d152      	bne.n	8002286 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e6:	2200      	movs	r2, #0
 80021e8:	4906      	ldr	r1, [pc, #24]	@ (8002204 <HAL_I2C_Master_Receive+0x23c>)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f001 ff2e 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d008      	beq.n	8002208 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e148      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
 80021fa:	bf00      	nop
 80021fc:	00100002 	.word	0x00100002
 8002200:	ffff0000 	.word	0xffff0000
 8002204:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800224e:	b662      	cpsie	i
}
 8002250:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002284:	e0ee      	b.n	8002464 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228c:	2200      	movs	r2, #0
 800228e:	4981      	ldr	r1, [pc, #516]	@ (8002494 <HAL_I2C_Master_Receive+0x4cc>)
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f001 fedb 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0f5      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022b0:	b672      	cpsid	i
}
 80022b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <HAL_I2C_Master_Receive+0x4d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	08db      	lsrs	r3, r3, #3
 80022ec:	4a6b      	ldr	r2, [pc, #428]	@ (800249c <HAL_I2C_Master_Receive+0x4d4>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0a1a      	lsrs	r2, r3, #8
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00da      	lsls	r2, r3, #3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	3b01      	subs	r3, #1
 8002304:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d118      	bne.n	800233e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800232e:	b662      	cpsie	i
}
 8002330:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0a6      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d1d9      	bne.n	8002300 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800238e:	b662      	cpsie	i
}
 8002390:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023c4:	e04e      	b.n	8002464 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f002 f81a 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e058      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d124      	bne.n	8002464 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002430:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	f47f ae88 	bne.w	800217e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	00010004 	.word	0x00010004
 8002498:	20000000 	.word	0x20000000
 800249c:	14f8b589 	.word	0x14f8b589

080024a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d003      	beq.n	80024d8 <HAL_I2C_EV_IRQHandler+0x38>
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b40      	cmp	r3, #64	@ 0x40
 80024d4:	f040 80b1 	bne.w	800263a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <HAL_I2C_EV_IRQHandler+0x6e>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80024f8:	d003      	beq.n	8002502 <HAL_I2C_EV_IRQHandler+0x62>
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002500:	d101      	bne.n	8002506 <HAL_I2C_EV_IRQHandler+0x66>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_I2C_EV_IRQHandler+0x68>
 8002506:	2300      	movs	r3, #0
 8002508:	2b01      	cmp	r3, #1
 800250a:	f000 8114 	beq.w	8002736 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00b      	beq.n	8002530 <HAL_I2C_EV_IRQHandler+0x90>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f001 fff9 	bl	800451a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fd74 	bl	8003016 <I2C_Master_SB>
 800252e:	e083      	b.n	8002638 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0xac>
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fdeb 	bl	8003120 <I2C_Master_ADD10>
 800254a:	e075      	b.n	8002638 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0xc8>
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fe06 	bl	8003172 <I2C_Master_ADDR>
 8002566:	e067      	b.n	8002638 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d036      	beq.n	80025e0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800257c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002580:	f000 80db 	beq.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_I2C_EV_IRQHandler+0x10a>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_I2C_EV_IRQHandler+0x10a>
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9d4 	bl	8002950 <I2C_MasterTransmit_TXE>
 80025a8:	e046      	b.n	8002638 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80c2 	beq.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80bc 	beq.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	2b21      	cmp	r3, #33	@ 0x21
 80025c6:	d103      	bne.n	80025d0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fa5d 	bl	8002a88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ce:	e0b4      	b.n	800273a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b40      	cmp	r3, #64	@ 0x40
 80025d4:	f040 80b1 	bne.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 facb 	bl	8002b74 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025de:	e0ac      	b.n	800273a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ee:	f000 80a4 	beq.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00d      	beq.n	8002618 <HAL_I2C_EV_IRQHandler+0x178>
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_I2C_EV_IRQHandler+0x178>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb47 	bl	8002ca4 <I2C_MasterReceive_RXNE>
 8002616:	e00f      	b.n	8002638 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 808b 	beq.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8085 	beq.w	800273a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 fbff 	bl	8002e34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002636:	e080      	b.n	800273a <HAL_I2C_EV_IRQHandler+0x29a>
 8002638:	e07f      	b.n	800273a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	e007      	b.n	800265c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d011      	beq.n	800268a <HAL_I2C_EV_IRQHandler+0x1ea>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00c      	beq.n	800268a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002680:	69b9      	ldr	r1, [r7, #24]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 ffcc 	bl	8003620 <I2C_Slave_ADDR>
 8002688:	e05a      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_I2C_EV_IRQHandler+0x206>
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f001 f806 	bl	80036b0 <I2C_Slave_STOPF>
 80026a4:	e04c      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026a6:	7bbb      	ldrb	r3, [r7, #14]
 80026a8:	2b21      	cmp	r3, #33	@ 0x21
 80026aa:	d002      	beq.n	80026b2 <HAL_I2C_EV_IRQHandler+0x212>
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	2b29      	cmp	r3, #41	@ 0x29
 80026b0:	d120      	bne.n	80026f4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x238>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_I2C_EV_IRQHandler+0x238>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fee9 	bl	80034a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026d6:	e032      	b.n	800273e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d02d      	beq.n	800273e <HAL_I2C_EV_IRQHandler+0x29e>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d028      	beq.n	800273e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 ff18 	bl	8003522 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026f2:	e024      	b.n	800273e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <HAL_I2C_EV_IRQHandler+0x27a>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_I2C_EV_IRQHandler+0x27a>
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 ff25 	bl	8003562 <I2C_SlaveReceive_RXNE>
 8002718:	e012      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 ff55 	bl	80035de <I2C_SlaveReceive_BTF>
 8002734:	e004      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002736:	bf00      	nop
 8002738:	e002      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800273e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08a      	sub	sp, #40	@ 0x28
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002768:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_I2C_ER_IRQHandler+0x5a>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800278e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_I2C_ER_IRQHandler+0x80>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80027c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d03e      	beq.n	800284e <HAL_I2C_ER_IRQHandler+0x108>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d039      	beq.n	800284e <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80027da:	7efb      	ldrb	r3, [r7, #27]
 80027dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027f4:	7ebb      	ldrb	r3, [r7, #26]
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d112      	bne.n	8002820 <HAL_I2C_ER_IRQHandler+0xda>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10f      	bne.n	8002820 <HAL_I2C_ER_IRQHandler+0xda>
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	2b21      	cmp	r3, #33	@ 0x21
 8002804:	d008      	beq.n	8002818 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b29      	cmp	r3, #41	@ 0x29
 800280a:	d005      	beq.n	8002818 <HAL_I2C_ER_IRQHandler+0xd2>
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b28      	cmp	r3, #40	@ 0x28
 8002810:	d106      	bne.n	8002820 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b21      	cmp	r3, #33	@ 0x21
 8002816:	d103      	bne.n	8002820 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f001 f879 	bl	8003910 <I2C_Slave_AF>
 800281e:	e016      	b.n	800284e <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002828:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002832:	7efb      	ldrb	r3, [r7, #27]
 8002834:	2b10      	cmp	r3, #16
 8002836:	d002      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0xf8>
 8002838:	7efb      	ldrb	r3, [r7, #27]
 800283a:	2b40      	cmp	r3, #64	@ 0x40
 800283c:	d107      	bne.n	800284e <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x12e>
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	f043 0308 	orr.w	r3, r3, #8
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002872:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f001 f8b6 	bl	80039f8 <I2C_ITError>
  }
}
 800288c:	bf00      	nop
 800288e:	3728      	adds	r7, #40	@ 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
 80028e8:	4613      	mov	r3, r2
 80028ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800295e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002966:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	d150      	bne.n	8002a18 <I2C_MasterTransmit_TXE+0xc8>
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b21      	cmp	r3, #33	@ 0x21
 800297a:	d14d      	bne.n	8002a18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d01d      	beq.n	80029be <I2C_MasterTransmit_TXE+0x6e>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b20      	cmp	r3, #32
 8002986:	d01a      	beq.n	80029be <I2C_MasterTransmit_TXE+0x6e>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800298e:	d016      	beq.n	80029be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800299e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2211      	movs	r2, #17
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff6c 	bl	8002894 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029bc:	e060      	b.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b40      	cmp	r3, #64	@ 0x40
 80029f6:	d107      	bne.n	8002a08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff81 	bl	8002908 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a06:	e03b      	b.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff3f 	bl	8002894 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a16:	e033      	b.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b21      	cmp	r3, #33	@ 0x21
 8002a1c:	d005      	beq.n	8002a2a <I2C_MasterTransmit_TXE+0xda>
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d12d      	bne.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b22      	cmp	r3, #34	@ 0x22
 8002a28:	d12a      	bne.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d108      	bne.n	8002a46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a44:	e01c      	b.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d103      	bne.n	8002a5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f88e 	bl	8002b74 <I2C_MemoryTransmit_TXE_BTF>
}
 8002a58:	e012      	b.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	781a      	ldrb	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a7e:	e7ff      	b.n	8002a80 <I2C_MasterTransmit_TXE+0x130>
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b21      	cmp	r3, #33	@ 0x21
 8002aa0:	d164      	bne.n	8002b6c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ad0:	e04c      	b.n	8002b6c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d01d      	beq.n	8002b14 <I2C_MasterTransmit_BTF+0x8c>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d01a      	beq.n	8002b14 <I2C_MasterTransmit_BTF+0x8c>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ae4:	d016      	beq.n	8002b14 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002af4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2211      	movs	r2, #17
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fec1 	bl	8002894 <HAL_I2C_MasterTxCpltCallback>
}
 8002b12:	e02b      	b.n	8002b6c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b22:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d107      	bne.n	8002b5e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff fed6 	bl	8002908 <HAL_I2C_MemTxCpltCallback>
}
 8002b5c:	e006      	b.n	8002b6c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fe94 	bl	8002894 <HAL_I2C_MasterTxCpltCallback>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11d      	bne.n	8002bc8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10b      	bne.n	8002bac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba4:	1c9a      	adds	r2, r3, #2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002baa:	e077      	b.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	121b      	asrs	r3, r3, #8
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bc6:	e069      	b.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10b      	bne.n	8002be8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002be6:	e059      	b.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d152      	bne.n	8002c96 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b22      	cmp	r3, #34	@ 0x22
 8002bf4:	d10d      	bne.n	8002c12 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c04:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c10:	e044      	b.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b21      	cmp	r3, #33	@ 0x21
 8002c20:	d112      	bne.n	8002c48 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c46:	e029      	b.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d124      	bne.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b21      	cmp	r3, #33	@ 0x21
 8002c56:	d121      	bne.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c66:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fe3a 	bl	8002908 <HAL_I2C_MemTxCpltCallback>
}
 8002c94:	e002      	b.n	8002c9c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff f884 	bl	8001da4 <I2C_Flush_DR>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b22      	cmp	r3, #34	@ 0x22
 8002cb6:	f040 80b9 	bne.w	8002e2c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d921      	bls.n	8002d12 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	f040 8096 	bne.w	8002e2c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002d10:	e08c      	b.n	8002e2c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d07f      	beq.n	8002e1a <I2C_MasterReceive_RXNE+0x176>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d002      	beq.n	8002d26 <I2C_MasterReceive_RXNE+0x82>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d179      	bne.n	8002e1a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f001 fb3a 	bl	80043a0 <I2C_WaitOnSTOPRequestThroughIT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d14c      	bne.n	8002dcc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d40:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d50:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b40      	cmp	r3, #64	@ 0x40
 8002d8a:	d10a      	bne.n	8002da2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fdbd 	bl	800291a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002da0:	e044      	b.n	8002e2c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d002      	beq.n	8002db6 <I2C_MasterReceive_RXNE+0x112>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d103      	bne.n	8002dbe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dbc:	e002      	b.n	8002dc4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2212      	movs	r2, #18
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fd6e 	bl	80028a6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dca:	e02f      	b.n	8002e2c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dda:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff fd8a 	bl	800292c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e18:	e008      	b.n	8002e2c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e28:	605a      	str	r2, [r3, #4]
}
 8002e2a:	e7ff      	b.n	8002e2c <I2C_MasterReceive_RXNE+0x188>
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d11b      	bne.n	8002e84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e82:	e0c4      	b.n	800300e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d129      	bne.n	8002ee2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d00a      	beq.n	8002eba <I2C_MasterReceive_BTF+0x86>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d007      	beq.n	8002eba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ee0:	e095      	b.n	800300e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d17d      	bne.n	8002fe8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d002      	beq.n	8002ef8 <I2C_MasterReceive_BTF+0xc4>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d108      	bne.n	8002f0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e016      	b.n	8002f38 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d002      	beq.n	8002f16 <I2C_MasterReceive_BTF+0xe2>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d108      	bne.n	8002f28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e007      	b.n	8002f38 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002f92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d10a      	bne.n	8002fbe <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff fcaf 	bl	800291a <HAL_I2C_MemRxCpltCallback>
}
 8002fbc:	e027      	b.n	800300e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d002      	beq.n	8002fd2 <I2C_MasterReceive_BTF+0x19e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d103      	bne.n	8002fda <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fd8:	e002      	b.n	8002fe0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2212      	movs	r2, #18
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fc60 	bl	80028a6 <HAL_I2C_MasterRxCpltCallback>
}
 8002fe6:	e012      	b.n	800300e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d117      	bne.n	800305a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003042:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003044:	e067      	b.n	8003116 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	b2da      	uxtb	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]
}
 8003058:	e05d      	b.n	8003116 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003062:	d133      	bne.n	80030cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b21      	cmp	r3, #33	@ 0x21
 800306e:	d109      	bne.n	8003084 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e008      	b.n	8003096 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <I2C_Master_SB+0x92>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d032      	beq.n	8003116 <I2C_Master_SB+0x100>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d02d      	beq.n	8003116 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030c8:	605a      	str	r2, [r3, #4]
}
 80030ca:	e024      	b.n	8003116 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10e      	bne.n	80030f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	b29b      	uxth	r3, r3
 80030da:	11db      	asrs	r3, r3, #7
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 0306 	and.w	r3, r3, #6
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f063 030f 	orn	r3, r3, #15
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]
}
 80030f0:	e011      	b.n	8003116 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d10d      	bne.n	8003116 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	b29b      	uxth	r3, r3
 8003100:	11db      	asrs	r3, r3, #7
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f003 0306 	and.w	r3, r3, #6
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f063 030e 	orn	r3, r3, #14
 800310e:	b2da      	uxtb	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312c:	b2da      	uxtb	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <I2C_Master_ADD10+0x26>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d108      	bne.n	8003158 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <I2C_Master_ADD10+0x48>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003166:	605a      	str	r2, [r3, #4]
  }
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003172:	b480      	push	{r7}
 8003174:	b091      	sub	sp, #68	@ 0x44
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003180:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b22      	cmp	r3, #34	@ 0x22
 800319a:	f040 8174 	bne.w	8003486 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <I2C_Master_ADDR+0x54>
 80031a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d10b      	bne.n	80031c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c4:	e16b      	b.n	800349e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11d      	bne.n	800320a <I2C_Master_ADDR+0x98>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80031d6:	d118      	bne.n	800320a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d8:	2300      	movs	r3, #0
 80031da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	651a      	str	r2, [r3, #80]	@ 0x50
 8003208:	e149      	b.n	800349e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d113      	bne.n	800323c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003228:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e120      	b.n	800347e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 808a 	bne.w	800335c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800324e:	d137      	bne.n	80032c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800325e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800326e:	d113      	bne.n	8003298 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	e0f2      	b.n	800347e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003298:	2300      	movs	r3, #0
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	623b      	str	r3, [r7, #32]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	623b      	str	r3, [r7, #32]
 80032ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e0de      	b.n	800347e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d02e      	beq.n	8003324 <I2C_Master_ADDR+0x1b2>
 80032c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d02b      	beq.n	8003324 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	2b12      	cmp	r3, #18
 80032d0:	d102      	bne.n	80032d8 <I2C_Master_ADDR+0x166>
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d125      	bne.n	8003324 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d00e      	beq.n	80032fc <I2C_Master_ADDR+0x18a>
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d00b      	beq.n	80032fc <I2C_Master_ADDR+0x18a>
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d008      	beq.n	80032fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e007      	b.n	800330c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800330a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	e0ac      	b.n	800347e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003332:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e090      	b.n	800347e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d158      	bne.n	8003418 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	2b04      	cmp	r3, #4
 800336a:	d021      	beq.n	80033b0 <I2C_Master_ADDR+0x23e>
 800336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336e:	2b02      	cmp	r3, #2
 8003370:	d01e      	beq.n	80033b0 <I2C_Master_ADDR+0x23e>
 8003372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003374:	2b10      	cmp	r3, #16
 8003376:	d01b      	beq.n	80033b0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003386:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e012      	b.n	80033d6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e4:	d14b      	bne.n	800347e <I2C_Master_ADDR+0x30c>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ec:	d00b      	beq.n	8003406 <I2C_Master_ADDR+0x294>
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d008      	beq.n	8003406 <I2C_Master_ADDR+0x294>
 80033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d005      	beq.n	8003406 <I2C_Master_ADDR+0x294>
 80033fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d002      	beq.n	8003406 <I2C_Master_ADDR+0x294>
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	2b20      	cmp	r3, #32
 8003404:	d13b      	bne.n	800347e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	e032      	b.n	800347e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003426:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003436:	d117      	bne.n	8003468 <I2C_Master_ADDR+0x2f6>
 8003438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800343e:	d00b      	beq.n	8003458 <I2C_Master_ADDR+0x2e6>
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	2b01      	cmp	r3, #1
 8003444:	d008      	beq.n	8003458 <I2C_Master_ADDR+0x2e6>
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	2b08      	cmp	r3, #8
 800344a:	d005      	beq.n	8003458 <I2C_Master_ADDR+0x2e6>
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	2b10      	cmp	r3, #16
 8003450:	d002      	beq.n	8003458 <I2C_Master_ADDR+0x2e6>
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	2b20      	cmp	r3, #32
 8003456:	d107      	bne.n	8003468 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003466:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003484:	e00b      	b.n	800349e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
}
 800349c:	e7ff      	b.n	800349e <I2C_Master_ADDR+0x32c>
 800349e:	bf00      	nop
 80034a0:	3744      	adds	r7, #68	@ 0x44
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02b      	beq.n	800351a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d114      	bne.n	800351a <I2C_SlaveTransmit_TXE+0x72>
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b29      	cmp	r3, #41	@ 0x29
 80034f4:	d111      	bne.n	800351a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003504:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2221      	movs	r2, #33	@ 0x21
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2228      	movs	r2, #40	@ 0x28
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff f9cf 	bl	80028b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d011      	beq.n	8003558 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003570:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02c      	beq.n	80035d6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d114      	bne.n	80035d6 <I2C_SlaveReceive_RXNE+0x74>
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80035b0:	d111      	bne.n	80035d6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2222      	movs	r2, #34	@ 0x22
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2228      	movs	r2, #40	@ 0x28
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff f97a 	bl	80028ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800363a:	2b28      	cmp	r3, #40	@ 0x28
 800363c:	d125      	bne.n	800368a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800364c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	81bb      	strh	r3, [r7, #12]
 800366c:	e002      	b.n	8003674 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800367c:	89ba      	ldrh	r2, [r7, #12]
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff f92a 	bl	80028dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003688:	e00e      	b.n	80036a8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80036d0:	2300      	movs	r3, #0
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800370c:	d172      	bne.n	80037f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b22      	cmp	r3, #34	@ 0x22
 8003712:	d002      	beq.n	800371a <I2C_Slave_STOPF+0x6a>
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b2a      	cmp	r3, #42	@ 0x2a
 8003718:	d135      	bne.n	8003786 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800374c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe f838 	bl	80017c8 <HAL_DMA_GetState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d049      	beq.n	80037f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003762:	4a69      	ldr	r2, [pc, #420]	@ (8003908 <I2C_Slave_STOPF+0x258>)
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd ffb4 	bl	80016d8 <HAL_DMA_Abort_IT>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03d      	beq.n	80037f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003780:	4610      	mov	r0, r2
 8003782:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003784:	e035      	b.n	80037f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f043 0204 	orr.w	r2, r3, #4
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe f802 	bl	80017c8 <HAL_DMA_GetState>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d014      	beq.n	80037f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003908 <I2C_Slave_STOPF+0x258>)
 80037d0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd ff7e 	bl	80016d8 <HAL_DMA_Abort_IT>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037ec:	4610      	mov	r0, r2
 80037ee:	4798      	blx	r3
 80037f0:	e000      	b.n	80037f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03e      	beq.n	800387c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d112      	bne.n	8003832 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b40      	cmp	r3, #64	@ 0x40
 800383e:	d112      	bne.n	8003866 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0204 	orr.w	r2, r3, #4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f8b7 	bl	80039f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800388a:	e039      	b.n	8003900 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003890:	d109      	bne.n	80038a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2228      	movs	r2, #40	@ 0x28
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff f812 	bl	80028ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b28      	cmp	r3, #40	@ 0x28
 80038b0:	d111      	bne.n	80038d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a15      	ldr	r2, [pc, #84]	@ (800390c <I2C_Slave_STOPF+0x25c>)
 80038b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff f811 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
}
 80038d4:	e014      	b.n	8003900 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	2b22      	cmp	r3, #34	@ 0x22
 80038dc:	d002      	beq.n	80038e4 <I2C_Slave_STOPF+0x234>
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b22      	cmp	r3, #34	@ 0x22
 80038e2:	d10d      	bne.n	8003900 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fe ffe5 	bl	80028ca <HAL_I2C_SlaveRxCpltCallback>
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	08003efd 	.word	0x08003efd
 800390c:	ffff0000 	.word	0xffff0000

08003910 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003924:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d002      	beq.n	8003932 <I2C_Slave_AF+0x22>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b20      	cmp	r3, #32
 8003930:	d129      	bne.n	8003986 <I2C_Slave_AF+0x76>
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b28      	cmp	r3, #40	@ 0x28
 8003936:	d126      	bne.n	8003986 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a2e      	ldr	r2, [pc, #184]	@ (80039f4 <I2C_Slave_AF+0xe4>)
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800394c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003956:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003966:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe ffb9 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003984:	e031      	b.n	80039ea <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b21      	cmp	r3, #33	@ 0x21
 800398a:	d129      	bne.n	80039e0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a19      	ldr	r2, [pc, #100]	@ (80039f4 <I2C_Slave_AF+0xe4>)
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2221      	movs	r2, #33	@ 0x21
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fe f9e6 	bl	8001da4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fe ff6d 	bl	80028b8 <HAL_I2C_SlaveTxCpltCallback>
}
 80039de:	e004      	b.n	80039ea <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039e8:	615a      	str	r2, [r3, #20]
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a10:	7bbb      	ldrb	r3, [r7, #14]
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d002      	beq.n	8003a1c <I2C_ITError+0x24>
 8003a16:	7bbb      	ldrb	r3, [r7, #14]
 8003a18:	2b40      	cmp	r3, #64	@ 0x40
 8003a1a:	d10a      	bne.n	8003a32 <I2C_ITError+0x3a>
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b22      	cmp	r3, #34	@ 0x22
 8003a20:	d107      	bne.n	8003a32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a38:	2b28      	cmp	r3, #40	@ 0x28
 8003a3a:	d107      	bne.n	8003a4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2228      	movs	r2, #40	@ 0x28
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a4a:	e015      	b.n	8003a78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5a:	d00a      	beq.n	8003a72 <I2C_ITError+0x7a>
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b60      	cmp	r3, #96	@ 0x60
 8003a60:	d007      	beq.n	8003a72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a86:	d162      	bne.n	8003b4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d020      	beq.n	8003ae8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aaa:	4a6a      	ldr	r2, [pc, #424]	@ (8003c54 <I2C_ITError+0x25c>)
 8003aac:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fe10 	bl	80016d8 <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8089 	beq.w	8003bd2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4798      	blx	r3
 8003ae6:	e074      	b.n	8003bd2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	4a59      	ldr	r2, [pc, #356]	@ (8003c54 <I2C_ITError+0x25c>)
 8003aee:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd fdef 	bl	80016d8 <HAL_DMA_Abort_IT>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d068      	beq.n	8003bd2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0a:	2b40      	cmp	r3, #64	@ 0x40
 8003b0c:	d10b      	bne.n	8003b26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4798      	blx	r3
 8003b4c:	e041      	b.n	8003bd2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b60      	cmp	r3, #96	@ 0x60
 8003b58:	d125      	bne.n	8003ba6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d10b      	bne.n	8003b8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fe fecd 	bl	800293e <HAL_I2C_AbortCpltCallback>
 8003ba4:	e015      	b.n	8003bd2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b40      	cmp	r3, #64	@ 0x40
 8003bb2:	d10b      	bne.n	8003bcc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fe fead 	bl	800292c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10e      	bne.n	8003c00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d113      	bne.n	8003c4c <I2C_ITError+0x254>
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b28      	cmp	r3, #40	@ 0x28
 8003c28:	d110      	bne.n	8003c4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c58 <I2C_ITError+0x260>)
 8003c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe fe55 	bl	80028f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08003efd 	.word	0x08003efd
 8003c58:	ffff0000 	.word	0xffff0000

08003c5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	607a      	str	r2, [r7, #4]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d006      	beq.n	8003c86 <I2C_MasterRequestWrite+0x2a>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d003      	beq.n	8003c86 <I2C_MasterRequestWrite+0x2a>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c84:	d108      	bne.n	8003c98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e00b      	b.n	8003cb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	2b12      	cmp	r3, #18
 8003c9e:	d107      	bne.n	8003cb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f9c5 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd6:	d103      	bne.n	8003ce0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e035      	b.n	8003d50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cec:	d108      	bne.n	8003d00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cfc:	611a      	str	r2, [r3, #16]
 8003cfe:	e01b      	b.n	8003d38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d00:	897b      	ldrh	r3, [r7, #10]
 8003d02:	11db      	asrs	r3, r3, #7
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0306 	and.w	r3, r3, #6
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f063 030f 	orn	r3, r3, #15
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	490e      	ldr	r1, [pc, #56]	@ (8003d58 <I2C_MasterRequestWrite+0xfc>)
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fa0e 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e010      	b.n	8003d50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4907      	ldr	r1, [pc, #28]	@ (8003d5c <I2C_MasterRequestWrite+0x100>)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f9fe 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	00010008 	.word	0x00010008
 8003d5c:	00010002 	.word	0x00010002

08003d60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d006      	beq.n	8003d9a <I2C_MasterRequestRead+0x3a>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d003      	beq.n	8003d9a <I2C_MasterRequestRead+0x3a>
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d98:	d108      	bne.n	8003dac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e00b      	b.n	8003dc4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	2b11      	cmp	r3, #17
 8003db2:	d107      	bne.n	8003dc4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f93b 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	d103      	bne.n	8003df4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e079      	b.n	8003eec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e00:	d108      	bne.n	8003e14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]
 8003e12:	e05f      	b.n	8003ed4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e14:	897b      	ldrh	r3, [r7, #10]
 8003e16:	11db      	asrs	r3, r3, #7
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0306 	and.w	r3, r3, #6
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f063 030f 	orn	r3, r3, #15
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4930      	ldr	r1, [pc, #192]	@ (8003ef4 <I2C_MasterRequestRead+0x194>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f984 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e054      	b.n	8003eec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4929      	ldr	r1, [pc, #164]	@ (8003ef8 <I2C_MasterRequestRead+0x198>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f974 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e044      	b.n	8003eec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f8d9 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eae:	d103      	bne.n	8003eb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e017      	b.n	8003eec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ebc:	897b      	ldrh	r3, [r7, #10]
 8003ebe:	11db      	asrs	r3, r3, #7
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0306 	and.w	r3, r3, #6
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f063 030e 	orn	r3, r3, #14
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4907      	ldr	r1, [pc, #28]	@ (8003ef8 <I2C_MasterRequestRead+0x198>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f930 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00010008 	.word	0x00010008
 8003ef8:	00010002 	.word	0x00010002

08003efc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f16:	4b4b      	ldr	r3, [pc, #300]	@ (8004044 <I2C_DMAAbort+0x148>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	08db      	lsrs	r3, r3, #3
 8003f1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004048 <I2C_DMAAbort+0x14c>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0a1a      	lsrs	r2, r3, #8
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00da      	lsls	r2, r3, #3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003f42:	e00a      	b.n	8003f5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f58:	d0ea      	beq.n	8003f30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	2200      	movs	r2, #0
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	2200      	movs	r2, #0
 8003fae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b60      	cmp	r3, #96	@ 0x60
 8003fca:	d10e      	bne.n	8003fea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7fe fcab 	bl	800293e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fe8:	e027      	b.n	800403a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ff0:	2b28      	cmp	r3, #40	@ 0x28
 8003ff2:	d117      	bne.n	8004024 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004012:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2228      	movs	r2, #40	@ 0x28
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004022:	e007      	b.n	8004034 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004034:	6978      	ldr	r0, [r7, #20]
 8004036:	f7fe fc79 	bl	800292c <HAL_I2C_ErrorCallback>
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000000 	.word	0x20000000
 8004048:	14f8b589 	.word	0x14f8b589

0800404c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405c:	e048      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d044      	beq.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fd f9c1 	bl	80013ec <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d139      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10d      	bne.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	43da      	mvns	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	e00c      	b.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	43da      	mvns	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d116      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e023      	b.n	8004138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10d      	bne.n	8004116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	43da      	mvns	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	e00c      	b.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	43da      	mvns	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	429a      	cmp	r2, r3
 8004134:	d093      	beq.n	800405e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800414e:	e071      	b.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d123      	bne.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	f043 0204 	orr.w	r2, r3, #4
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e067      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d041      	beq.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fd f91c 	bl	80013ec <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d136      	bne.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10c      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	43da      	mvns	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e00b      	b.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	43da      	mvns	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e021      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10c      	bne.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	43da      	mvns	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e00b      	b.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f af6d 	bne.w	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428c:	e034      	b.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f915 	bl	80044be <I2C_IsAcknowledgeFailed>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e034      	b.n	8004308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d028      	beq.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fd f8a1 	bl	80013ec <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11d      	bne.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b80      	cmp	r3, #128	@ 0x80
 80042c8:	d016      	beq.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e007      	b.n	8004308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004302:	2b80      	cmp	r3, #128	@ 0x80
 8004304:	d1c3      	bne.n	800428e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800431c:	e034      	b.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f8cd 	bl	80044be <I2C_IsAcknowledgeFailed>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e034      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d028      	beq.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fd f859 	bl	80013ec <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11d      	bne.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d016      	beq.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e007      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d1c3      	bne.n	800431e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ac:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	0a1a      	lsrs	r2, r3, #8
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e008      	b.n	80043f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ec:	d0e9      	beq.n	80043c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000
 8004400:	14f8b589 	.word	0x14f8b589

08004404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004410:	e049      	b.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d119      	bne.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0210 	mvn.w	r2, #16
 8004428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e030      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7fc ffca 	bl	80013ec <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11d      	bne.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004474:	2b40      	cmp	r3, #64	@ 0x40
 8004476:	d016      	beq.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d1ae      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044d4:	d11b      	bne.n	800450e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800452a:	d103      	bne.n	8004534 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004532:	e007      	b.n	8004544 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800453c:	d102      	bne.n	8004544 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
	...

08004550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e272      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004570:	4b92      	ldr	r3, [pc, #584]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00c      	beq.n	8004596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800457c:	4b8f      	ldr	r3, [pc, #572]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d112      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
 8004588:	4b8c      	ldr	r3, [pc, #560]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004594:	d10b      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004596:	4b89      	ldr	r3, [pc, #548]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d06c      	beq.n	800467c <HAL_RCC_OscConfig+0x12c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d168      	bne.n	800467c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e24c      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x76>
 80045b8:	4b80      	ldr	r3, [pc, #512]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7f      	ldr	r2, [pc, #508]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e02e      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b7b      	ldr	r3, [pc, #492]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7a      	ldr	r2, [pc, #488]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b78      	ldr	r3, [pc, #480]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a77      	ldr	r2, [pc, #476]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0xbc>
 80045f2:	4b72      	ldr	r3, [pc, #456]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a71      	ldr	r2, [pc, #452]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b6f      	ldr	r3, [pc, #444]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6e      	ldr	r2, [pc, #440]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 800460c:	4b6b      	ldr	r3, [pc, #428]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6a      	ldr	r2, [pc, #424]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b68      	ldr	r3, [pc, #416]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a67      	ldr	r2, [pc, #412]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fc fede 	bl	80013ec <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fc feda 	bl	80013ec <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	@ 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e200      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b5d      	ldr	r3, [pc, #372]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xe4>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fc feca 	bl	80013ec <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fc fec6 	bl	80013ec <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	@ 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1ec      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	4b53      	ldr	r3, [pc, #332]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x10c>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800468a:	4b4c      	ldr	r3, [pc, #304]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004696:	4b49      	ldr	r3, [pc, #292]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d11c      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
 80046a2:	4b46      	ldr	r3, [pc, #280]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1c0      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b3d      	ldr	r3, [pc, #244]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4939      	ldr	r1, [pc, #228]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	e03a      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fe7f 	bl	80013ec <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fc fe7b 	bl	80013ec <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1a1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	4b2d      	ldr	r3, [pc, #180]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4927      	ldr	r1, [pc, #156]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b26      	ldr	r3, [pc, #152]	@ (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fc fe5e 	bl	80013ec <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fc fe5a 	bl	80013ec <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e180      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	4b1d      	ldr	r3, [pc, #116]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03a      	beq.n	80047d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	4b17      	ldr	r3, [pc, #92]	@ (80047c4 <HAL_RCC_OscConfig+0x274>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fc fe3e 	bl	80013ec <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fc fe3a 	bl	80013ec <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e160      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004792:	2001      	movs	r0, #1
 8004794:	f000 face 	bl	8004d34 <RCC_Delay>
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <HAL_RCC_OscConfig+0x274>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a0:	f7fc fe24 	bl	80013ec <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a6:	e00f      	b.n	80047c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fc fe20 	bl	80013ec <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d908      	bls.n	80047c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e146      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	42420000 	.word	0x42420000
 80047c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b92      	ldr	r3, [pc, #584]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e9      	bne.n	80047a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80a6 	beq.w	800492e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4a87      	ldr	r2, [pc, #540]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fc:	61d3      	str	r3, [r2, #28]
 80047fe:	4b85      	ldr	r3, [pc, #532]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480e:	4b82      	ldr	r3, [pc, #520]	@ (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004826:	f7fc fde1 	bl	80013ec <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fc fddd 	bl	80013ec <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	@ 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e103      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4b75      	ldr	r3, [pc, #468]	@ (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x312>
 8004854:	4b6f      	ldr	r3, [pc, #444]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a6e      	ldr	r2, [pc, #440]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6213      	str	r3, [r2, #32]
 8004860:	e02d      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x334>
 800486a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4a69      	ldr	r2, [pc, #420]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6213      	str	r3, [r2, #32]
 8004876:	4b67      	ldr	r3, [pc, #412]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4a66      	ldr	r2, [pc, #408]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6213      	str	r3, [r2, #32]
 8004882:	e01c      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b05      	cmp	r3, #5
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x356>
 800488c:	4b61      	ldr	r3, [pc, #388]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a60      	ldr	r2, [pc, #384]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	4b5e      	ldr	r3, [pc, #376]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6213      	str	r3, [r2, #32]
 80048a4:	e00b      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 80048a6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a5a      	ldr	r2, [pc, #360]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	4b58      	ldr	r3, [pc, #352]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a57      	ldr	r2, [pc, #348]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fc fd91 	bl	80013ec <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fc fd8d 	bl	80013ec <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0b1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ee      	beq.n	80048ce <HAL_RCC_OscConfig+0x37e>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fd7b 	bl	80013ec <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fc fd77 	bl	80013ec <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e09b      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	4b40      	ldr	r3, [pc, #256]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ee      	bne.n	80048fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b3c      	ldr	r3, [pc, #240]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a3b      	ldr	r2, [pc, #236]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d061      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d146      	bne.n	80049da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b33      	ldr	r3, [pc, #204]	@ (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fc fd4b 	bl	80013ec <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fc fd47 	bl	80013ec <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e06d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496c:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004980:	d108      	bne.n	8004994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004982:	4b24      	ldr	r3, [pc, #144]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4921      	ldr	r1, [pc, #132]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004994:	4b1f      	ldr	r3, [pc, #124]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a19      	ldr	r1, [r3, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	430b      	orrs	r3, r1
 80049a6:	491b      	ldr	r1, [pc, #108]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fc fd1b 	bl	80013ec <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fc fd17 	bl	80013ec <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e03d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x46a>
 80049d8:	e035      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	@ (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fc fd04 	bl	80013ec <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fc fd00 	bl	80013ec <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e026      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x498>
 8004a06:	e01e      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e019      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <HAL_RCC_OscConfig+0x500>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d0      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b67      	ldr	r3, [pc, #412]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4965      	ldr	r1, [pc, #404]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a52      	ldr	r2, [pc, #328]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d040      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d115      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b41      	ldr	r3, [pc, #260]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e073      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3d      	ldr	r3, [pc, #244]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e06b      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4936      	ldr	r1, [pc, #216]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fc fc52 	bl	80013ec <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fc fc4e 	bl	80013ec <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e053      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2d      	ldr	r3, [pc, #180]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b27      	ldr	r3, [pc, #156]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d210      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b24      	ldr	r3, [pc, #144]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 0207 	bic.w	r2, r3, #7
 8004b8a:	4922      	ldr	r1, [pc, #136]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bce:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 f821 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490a      	ldr	r1, [pc, #40]	@ (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	@ (8004c20 <HAL_RCC_ClockConfig+0x1cc>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <HAL_RCC_ClockConfig+0x1d0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc fbb0 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	08006e64 	.word	0x08006e64
 8004c20:	20000000 	.word	0x20000000
 8004c24:	20000004 	.word	0x20000004

08004c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c42:	4b1e      	ldr	r3, [pc, #120]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x30>
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x36>
 8004c56:	e027      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5a:	613b      	str	r3, [r7, #16]
      break;
 8004c5c:	e027      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	4a17      	ldr	r2, [pc, #92]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c76:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0c5b      	lsrs	r3, r3, #17
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	4a11      	ldr	r2, [pc, #68]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	fb03 f202 	mul.w	r2, r3, r2
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e004      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	613b      	str	r3, [r7, #16]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004caa:	613b      	str	r3, [r7, #16]
      break;
 8004cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cae:	693b      	ldr	r3, [r7, #16]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	08006e7c 	.word	0x08006e7c
 8004cc8:	08006e8c 	.word	0x08006e8c
 8004ccc:	003d0900 	.word	0x003d0900

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b02      	ldr	r3, [pc, #8]	@ (8004ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	20000000 	.word	0x20000000

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce8:	f7ff fff2 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4903      	ldr	r1, [pc, #12]	@ (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	08006e74 	.word	0x08006e74

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d10:	f7ff ffde 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0adb      	lsrs	r3, r3, #11
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	08006e74 	.word	0x08006e74

08004d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <RCC_Delay+0x34>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <RCC_Delay+0x38>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	0a5b      	lsrs	r3, r3, #9
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d50:	bf00      	nop
  }
  while (Delay --);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	60fa      	str	r2, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f9      	bne.n	8004d50 <RCC_Delay+0x1c>
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	10624dd3 	.word	0x10624dd3

08004d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e076      	b.n	8004e70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d92:	d009      	beq.n	8004da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	61da      	str	r2, [r3, #28]
 8004d9a:	e005      	b.n	8004da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc f8f4 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2c:	ea42 0103 	orr.w	r1, r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	0c1a      	lsrs	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f002 0204 	and.w	r2, r2, #4
 8004e4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10e      	bne.n	8004eb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d009      	beq.n	8004eb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
    return;
 8004eb6:	e0b7      	b.n	8005028 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_SPI_IRQHandler+0x5e>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
    return;
 8004ed4:	e0a8      	b.n	8005028 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <HAL_SPI_IRQHandler+0x74>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 809e 	beq.w	8005028 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8098 	beq.w	8005028 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d023      	beq.n	8004f4a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d011      	beq.n	8004f32 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e00b      	b.n	8004f4a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	693b      	ldr	r3, [r7, #16]
        return;
 8004f48:	e06e      	b.n	8005028 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d014      	beq.n	8004f7e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f58:	f043 0201 	orr.w	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04f      	beq.n	8005026 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <HAL_SPI_IRQHandler+0x13a>
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d034      	beq.n	800501c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0203 	bic.w	r2, r2, #3
 8004fc0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d011      	beq.n	8004fee <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fce:	4a18      	ldr	r2, [pc, #96]	@ (8005030 <HAL_SPI_IRQHandler+0x1b8>)
 8004fd0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc fb7e 	bl	80016d8 <HAL_DMA_Abort_IT>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d016      	beq.n	8005024 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8005030 <HAL_SPI_IRQHandler+0x1b8>)
 8004ffc:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005002:	4618      	mov	r0, r3
 8005004:	f7fc fb68 	bl	80016d8 <HAL_DMA_Abort_IT>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800501a:	e003      	b.n	8005024 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f809 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005022:	e000      	b.n	8005026 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8005024:	bf00      	nop
    return;
 8005026:	bf00      	nop
  }
}
 8005028:	3720      	adds	r7, #32
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	08005047 	.word	0x08005047

08005034 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff ffe7 	bl	8005034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005066:	bf00      	nop
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e042      	b.n	8005106 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fb ffdd 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2224      	movs	r2, #36	@ 0x24
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fd62 	bl	8005b7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08a      	sub	sp, #40	@ 0x28
 8005112:	af02      	add	r7, sp, #8
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b20      	cmp	r3, #32
 800512c:	d175      	bne.n	800521a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <HAL_UART_Transmit+0x2c>
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e06e      	b.n	800521c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2221      	movs	r2, #33	@ 0x21
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800514c:	f7fc f94e 	bl	80013ec <HAL_GetTick>
 8005150:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005166:	d108      	bne.n	800517a <HAL_UART_Transmit+0x6c>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e003      	b.n	8005182 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005182:	e02e      	b.n	80051e2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	2180      	movs	r1, #128	@ 0x80
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 fb00 	bl	8005794 <UART_WaitOnFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e03a      	b.n	800521c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	3302      	adds	r3, #2
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e007      	b.n	80051d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	781a      	ldrb	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3301      	adds	r3, #1
 80051d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1cb      	bne.n	8005184 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2200      	movs	r2, #0
 80051f4:	2140      	movs	r1, #64	@ 0x40
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 facc 	bl	8005794 <UART_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e006      	b.n	800521c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800521a:	2302      	movs	r3, #2
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0ba      	sub	sp, #232	@ 0xe8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d009      	beq.n	800528a <HAL_UART_IRQHandler+0x66>
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fbbc 	bl	8005a00 <UART_Receive_IT>
      return;
 8005288:	e25b      	b.n	8005742 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800528a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80de 	beq.w	8005450 <HAL_UART_IRQHandler+0x22c>
 8005294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80d1 	beq.w	8005450 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <HAL_UART_IRQHandler+0xae>
 80052ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d005      	beq.n	80052d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_UART_IRQHandler+0xd2>
 80052de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d005      	beq.n	80052f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	f043 0202 	orr.w	r2, r3, #2
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_UART_IRQHandler+0xf6>
 8005302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	f043 0204 	orr.w	r2, r3, #4
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d011      	beq.n	800534a <HAL_UART_IRQHandler+0x126>
 8005326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d105      	bne.n	800533e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005342:	f043 0208 	orr.w	r2, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 81f2 	beq.w	8005738 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_UART_IRQHandler+0x14e>
 8005360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb47 	bl	8005a00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <HAL_UART_IRQHandler+0x17a>
 8005396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04f      	beq.n	800543e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa51 	bl	8005846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d041      	beq.n	8005436 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3314      	adds	r3, #20
 80053b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3314      	adds	r3, #20
 80053da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1d9      	bne.n	80053b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d013      	beq.n	800542e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540a:	4a7e      	ldr	r2, [pc, #504]	@ (8005604 <HAL_UART_IRQHandler+0x3e0>)
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005412:	4618      	mov	r0, r3
 8005414:	f7fc f960 	bl	80016d8 <HAL_DMA_Abort_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005428:	4610      	mov	r0, r2
 800542a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800542c:	e00e      	b.n	800544c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f99c 	bl	800576c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00a      	b.n	800544c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f998 	bl	800576c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e006      	b.n	800544c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f994 	bl	800576c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800544a:	e175      	b.n	8005738 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	bf00      	nop
    return;
 800544e:	e173      	b.n	8005738 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	2b01      	cmp	r3, #1
 8005456:	f040 814f 	bne.w	80056f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 8148 	beq.w	80056f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8141 	beq.w	80056f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80b6 	beq.w	8005608 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8145 	beq.w	800573c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ba:	429a      	cmp	r2, r3
 80054bc:	f080 813e 	bcs.w	800573c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	f000 8088 	beq.w	80055e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	330c      	adds	r3, #12
 80054fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005500:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005504:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800550c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1d9      	bne.n	80054d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3314      	adds	r3, #20
 8005526:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3314      	adds	r3, #20
 8005540:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005544:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005548:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800554c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005556:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e1      	bne.n	8005520 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800556c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800556e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005572:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005580:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005582:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005586:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800558e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e3      	bne.n	800555c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b4:	f023 0310 	bic.w	r3, r3, #16
 80055b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e3      	bne.n	80055a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fc f83f 	bl	8001662 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f8bf 	bl	800577e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005600:	e09c      	b.n	800573c <HAL_UART_IRQHandler+0x518>
 8005602:	bf00      	nop
 8005604:	0800590b 	.word	0x0800590b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005610:	b29b      	uxth	r3, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 808e 	beq.w	8005740 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005624:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8089 	beq.w	8005740 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005644:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	330c      	adds	r3, #12
 800564e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005652:	647a      	str	r2, [r7, #68]	@ 0x44
 8005654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e3      	bne.n	800562e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	623b      	str	r3, [r7, #32]
   return(result);
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3314      	adds	r3, #20
 8005686:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800568a:	633a      	str	r2, [r7, #48]	@ 0x30
 800568c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005690:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e3      	bne.n	8005666 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	330c      	adds	r3, #12
 80056cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056d0:	61fa      	str	r2, [r7, #28]
 80056d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	617b      	str	r3, [r7, #20]
   return(result);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e3      	bne.n	80056ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f844 	bl	800577e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f6:	e023      	b.n	8005740 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_UART_IRQHandler+0x4f4>
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f90e 	bl	8005932 <UART_Transmit_IT>
    return;
 8005716:	e014      	b.n	8005742 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <HAL_UART_IRQHandler+0x51e>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f94d 	bl	80059d0 <UART_EndTransmit_IT>
    return;
 8005736:	e004      	b.n	8005742 <HAL_UART_IRQHandler+0x51e>
    return;
 8005738:	bf00      	nop
 800573a:	e002      	b.n	8005742 <HAL_UART_IRQHandler+0x51e>
      return;
 800573c:	bf00      	nop
 800573e:	e000      	b.n	8005742 <HAL_UART_IRQHandler+0x51e>
      return;
 8005740:	bf00      	nop
  }
}
 8005742:	37e8      	adds	r7, #232	@ 0xe8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	bc80      	pop	{r7}
 8005758:	4770      	bx	lr

0800575a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr

0800576c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a4:	e03b      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d037      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fb fe1d 	bl	80013ec <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e03a      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d023      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x8a>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b80      	cmp	r3, #128	@ 0x80
 80057da:	d020      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x8a>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b40      	cmp	r3, #64	@ 0x40
 80057e0:	d01d      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d116      	bne.n	800581e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 f81d 	bl	8005846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2208      	movs	r2, #8
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e00f      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	429a      	cmp	r2, r3
 800582c:	bf0c      	ite	eq
 800582e:	2301      	moveq	r3, #1
 8005830:	2300      	movne	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	429a      	cmp	r2, r3
 800583a:	d0b4      	beq.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005846:	b480      	push	{r7}
 8005848:	b095      	sub	sp, #84	@ 0x54
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800586e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005874:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005876:	e841 2300 	strex	r3, r2, [r1]
 800587a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e5      	bne.n	800584e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3314      	adds	r3, #20
 8005888:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	61fb      	str	r3, [r7, #28]
   return(result);
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d119      	bne.n	80058f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058de:	61ba      	str	r2, [r7, #24]
 80058e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6979      	ldr	r1, [r7, #20]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	613b      	str	r3, [r7, #16]
   return(result);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005900:	bf00      	nop
 8005902:	3754      	adds	r7, #84	@ 0x54
 8005904:	46bd      	mov	sp, r7
 8005906:	bc80      	pop	{r7}
 8005908:	4770      	bx	lr

0800590a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff ff21 	bl	800576c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005932:	b480      	push	{r7}
 8005934:	b085      	sub	sp, #20
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b21      	cmp	r3, #33	@ 0x21
 8005944:	d13e      	bne.n	80059c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594e:	d114      	bne.n	800597a <UART_Transmit_IT+0x48>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d110      	bne.n	800597a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800596c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	621a      	str	r2, [r3, #32]
 8005978:	e008      	b.n	800598c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6211      	str	r1, [r2, #32]
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4619      	mov	r1, r3
 800599a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10f      	bne.n	80059c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	e000      	b.n	80059c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fea9 	bl	8005748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08c      	sub	sp, #48	@ 0x30
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b22      	cmp	r3, #34	@ 0x22
 8005a12:	f040 80ae 	bne.w	8005b72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a1e:	d117      	bne.n	8005a50 <UART_Receive_IT+0x50>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d113      	bne.n	8005a50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	1c9a      	adds	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a4e:	e026      	b.n	8005a9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a62:	d007      	beq.n	8005a74 <UART_Receive_IT+0x74>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <UART_Receive_IT+0x82>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d106      	bne.n	8005a82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e008      	b.n	8005a94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d15d      	bne.n	8005b6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0220 	bic.w	r2, r2, #32
 8005ac0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d135      	bne.n	8005b64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f023 0310 	bic.w	r3, r3, #16
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b1e:	623a      	str	r2, [r7, #32]
 8005b20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	69f9      	ldr	r1, [r7, #28]
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d10a      	bne.n	8005b56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff fe0e 	bl	800577e <HAL_UARTEx_RxEventCallback>
 8005b62:	e002      	b.n	8005b6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff fdf8 	bl	800575a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e002      	b.n	8005b74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e000      	b.n	8005b74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b72:	2302      	movs	r3, #2
  }
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3730      	adds	r7, #48	@ 0x30
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bb6:	f023 030c 	bic.w	r3, r3, #12
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a2c      	ldr	r2, [pc, #176]	@ (8005c90 <UART_SetConfig+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d103      	bne.n	8005bec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7ff f892 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	e002      	b.n	8005bf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7ff f87a 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009a      	lsls	r2, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	4a22      	ldr	r2, [pc, #136]	@ (8005c94 <UART_SetConfig+0x118>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	0119      	lsls	r1, r3, #4
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009a      	lsls	r2, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c28:	4b1a      	ldr	r3, [pc, #104]	@ (8005c94 <UART_SetConfig+0x118>)
 8005c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2064      	movs	r0, #100	@ 0x64
 8005c32:	fb00 f303 	mul.w	r3, r0, r3
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	3332      	adds	r3, #50	@ 0x32
 8005c3c:	4a15      	ldr	r2, [pc, #84]	@ (8005c94 <UART_SetConfig+0x118>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c48:	4419      	add	r1, r3
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009a      	lsls	r2, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c60:	4b0c      	ldr	r3, [pc, #48]	@ (8005c94 <UART_SetConfig+0x118>)
 8005c62:	fba3 0302 	umull	r0, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2064      	movs	r0, #100	@ 0x64
 8005c6a:	fb00 f303 	mul.w	r3, r0, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	3332      	adds	r3, #50	@ 0x32
 8005c74:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <UART_SetConfig+0x118>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	440a      	add	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40013800 	.word	0x40013800
 8005c94:	51eb851f 	.word	0x51eb851f

08005c98 <std>:
 8005c98:	2300      	movs	r3, #0
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ca6:	6083      	str	r3, [r0, #8]
 8005ca8:	8181      	strh	r1, [r0, #12]
 8005caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cac:	81c2      	strh	r2, [r0, #14]
 8005cae:	6183      	str	r3, [r0, #24]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	2208      	movs	r2, #8
 8005cb4:	305c      	adds	r0, #92	@ 0x5c
 8005cb6:	f000 fa01 	bl	80060bc <memset>
 8005cba:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <std+0x58>)
 8005cbc:	6224      	str	r4, [r4, #32]
 8005cbe:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf4 <std+0x5c>)
 8005cc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <std+0x60>)
 8005cc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <std+0x64>)
 8005cca:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <std+0x68>)
 8005cce:	429c      	cmp	r4, r3
 8005cd0:	d006      	beq.n	8005ce0 <std+0x48>
 8005cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cd6:	4294      	cmp	r4, r2
 8005cd8:	d002      	beq.n	8005ce0 <std+0x48>
 8005cda:	33d0      	adds	r3, #208	@ 0xd0
 8005cdc:	429c      	cmp	r4, r3
 8005cde:	d105      	bne.n	8005cec <std+0x54>
 8005ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce8:	f000 ba60 	b.w	80061ac <__retarget_lock_init_recursive>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	bf00      	nop
 8005cf0:	08005f0d 	.word	0x08005f0d
 8005cf4:	08005f2f 	.word	0x08005f2f
 8005cf8:	08005f67 	.word	0x08005f67
 8005cfc:	08005f8b 	.word	0x08005f8b
 8005d00:	200002a8 	.word	0x200002a8

08005d04 <stdio_exit_handler>:
 8005d04:	4a02      	ldr	r2, [pc, #8]	@ (8005d10 <stdio_exit_handler+0xc>)
 8005d06:	4903      	ldr	r1, [pc, #12]	@ (8005d14 <stdio_exit_handler+0x10>)
 8005d08:	4803      	ldr	r0, [pc, #12]	@ (8005d18 <stdio_exit_handler+0x14>)
 8005d0a:	f000 b869 	b.w	8005de0 <_fwalk_sglue>
 8005d0e:	bf00      	nop
 8005d10:	2000000c 	.word	0x2000000c
 8005d14:	08006a45 	.word	0x08006a45
 8005d18:	2000001c 	.word	0x2000001c

08005d1c <cleanup_stdio>:
 8005d1c:	6841      	ldr	r1, [r0, #4]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <cleanup_stdio+0x34>)
 8005d20:	b510      	push	{r4, lr}
 8005d22:	4299      	cmp	r1, r3
 8005d24:	4604      	mov	r4, r0
 8005d26:	d001      	beq.n	8005d2c <cleanup_stdio+0x10>
 8005d28:	f000 fe8c 	bl	8006a44 <_fflush_r>
 8005d2c:	68a1      	ldr	r1, [r4, #8]
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <cleanup_stdio+0x38>)
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d002      	beq.n	8005d3a <cleanup_stdio+0x1e>
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 fe85 	bl	8006a44 <_fflush_r>
 8005d3a:	68e1      	ldr	r1, [r4, #12]
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <cleanup_stdio+0x3c>)
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	d004      	beq.n	8005d4c <cleanup_stdio+0x30>
 8005d42:	4620      	mov	r0, r4
 8005d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d48:	f000 be7c 	b.w	8006a44 <_fflush_r>
 8005d4c:	bd10      	pop	{r4, pc}
 8005d4e:	bf00      	nop
 8005d50:	200002a8 	.word	0x200002a8
 8005d54:	20000310 	.word	0x20000310
 8005d58:	20000378 	.word	0x20000378

08005d5c <global_stdio_init.part.0>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <global_stdio_init.part.0+0x30>)
 8005d60:	4c0b      	ldr	r4, [pc, #44]	@ (8005d90 <global_stdio_init.part.0+0x34>)
 8005d62:	4a0c      	ldr	r2, [pc, #48]	@ (8005d94 <global_stdio_init.part.0+0x38>)
 8005d64:	4620      	mov	r0, r4
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	2104      	movs	r1, #4
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f7ff ff94 	bl	8005c98 <std>
 8005d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d74:	2201      	movs	r2, #1
 8005d76:	2109      	movs	r1, #9
 8005d78:	f7ff ff8e 	bl	8005c98 <std>
 8005d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d80:	2202      	movs	r2, #2
 8005d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d86:	2112      	movs	r1, #18
 8005d88:	f7ff bf86 	b.w	8005c98 <std>
 8005d8c:	200003e0 	.word	0x200003e0
 8005d90:	200002a8 	.word	0x200002a8
 8005d94:	08005d05 	.word	0x08005d05

08005d98 <__sfp_lock_acquire>:
 8005d98:	4801      	ldr	r0, [pc, #4]	@ (8005da0 <__sfp_lock_acquire+0x8>)
 8005d9a:	f000 ba08 	b.w	80061ae <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	200003e9 	.word	0x200003e9

08005da4 <__sfp_lock_release>:
 8005da4:	4801      	ldr	r0, [pc, #4]	@ (8005dac <__sfp_lock_release+0x8>)
 8005da6:	f000 ba03 	b.w	80061b0 <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	200003e9 	.word	0x200003e9

08005db0 <__sinit>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4604      	mov	r4, r0
 8005db4:	f7ff fff0 	bl	8005d98 <__sfp_lock_acquire>
 8005db8:	6a23      	ldr	r3, [r4, #32]
 8005dba:	b11b      	cbz	r3, 8005dc4 <__sinit+0x14>
 8005dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc0:	f7ff bff0 	b.w	8005da4 <__sfp_lock_release>
 8005dc4:	4b04      	ldr	r3, [pc, #16]	@ (8005dd8 <__sinit+0x28>)
 8005dc6:	6223      	str	r3, [r4, #32]
 8005dc8:	4b04      	ldr	r3, [pc, #16]	@ (8005ddc <__sinit+0x2c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f5      	bne.n	8005dbc <__sinit+0xc>
 8005dd0:	f7ff ffc4 	bl	8005d5c <global_stdio_init.part.0>
 8005dd4:	e7f2      	b.n	8005dbc <__sinit+0xc>
 8005dd6:	bf00      	nop
 8005dd8:	08005d1d 	.word	0x08005d1d
 8005ddc:	200003e0 	.word	0x200003e0

08005de0 <_fwalk_sglue>:
 8005de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de4:	4607      	mov	r7, r0
 8005de6:	4688      	mov	r8, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	2600      	movs	r6, #0
 8005dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005df0:	f1b9 0901 	subs.w	r9, r9, #1
 8005df4:	d505      	bpl.n	8005e02 <_fwalk_sglue+0x22>
 8005df6:	6824      	ldr	r4, [r4, #0]
 8005df8:	2c00      	cmp	r4, #0
 8005dfa:	d1f7      	bne.n	8005dec <_fwalk_sglue+0xc>
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d907      	bls.n	8005e18 <_fwalk_sglue+0x38>
 8005e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	d003      	beq.n	8005e18 <_fwalk_sglue+0x38>
 8005e10:	4629      	mov	r1, r5
 8005e12:	4638      	mov	r0, r7
 8005e14:	47c0      	blx	r8
 8005e16:	4306      	orrs	r6, r0
 8005e18:	3568      	adds	r5, #104	@ 0x68
 8005e1a:	e7e9      	b.n	8005df0 <_fwalk_sglue+0x10>

08005e1c <iprintf>:
 8005e1c:	b40f      	push	{r0, r1, r2, r3}
 8005e1e:	b507      	push	{r0, r1, r2, lr}
 8005e20:	4906      	ldr	r1, [pc, #24]	@ (8005e3c <iprintf+0x20>)
 8005e22:	ab04      	add	r3, sp, #16
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e2a:	6881      	ldr	r1, [r0, #8]
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	f000 fadf 	bl	80063f0 <_vfiprintf_r>
 8005e32:	b003      	add	sp, #12
 8005e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e38:	b004      	add	sp, #16
 8005e3a:	4770      	bx	lr
 8005e3c:	20000018 	.word	0x20000018

08005e40 <putchar>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	@ (8005e4c <putchar+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	6882      	ldr	r2, [r0, #8]
 8005e48:	f000 be85 	b.w	8006b56 <_putc_r>
 8005e4c:	20000018 	.word	0x20000018

08005e50 <_puts_r>:
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b570      	push	{r4, r5, r6, lr}
 8005e54:	4605      	mov	r5, r0
 8005e56:	460e      	mov	r6, r1
 8005e58:	6884      	ldr	r4, [r0, #8]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <_puts_r+0x10>
 8005e5c:	f7ff ffa8 	bl	8005db0 <__sinit>
 8005e60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e62:	07db      	lsls	r3, r3, #31
 8005e64:	d405      	bmi.n	8005e72 <_puts_r+0x22>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	0598      	lsls	r0, r3, #22
 8005e6a:	d402      	bmi.n	8005e72 <_puts_r+0x22>
 8005e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e6e:	f000 f99e 	bl	80061ae <__retarget_lock_acquire_recursive>
 8005e72:	89a3      	ldrh	r3, [r4, #12]
 8005e74:	0719      	lsls	r1, r3, #28
 8005e76:	d502      	bpl.n	8005e7e <_puts_r+0x2e>
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d135      	bne.n	8005eea <_puts_r+0x9a>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f8c5 	bl	8006010 <__swsetup_r>
 8005e86:	b380      	cbz	r0, 8005eea <_puts_r+0x9a>
 8005e88:	f04f 35ff 	mov.w	r5, #4294967295
 8005e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e8e:	07da      	lsls	r2, r3, #31
 8005e90:	d405      	bmi.n	8005e9e <_puts_r+0x4e>
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	059b      	lsls	r3, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_puts_r+0x4e>
 8005e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e9a:	f000 f989 	bl	80061b0 <__retarget_lock_release_recursive>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	da04      	bge.n	8005eb0 <_puts_r+0x60>
 8005ea6:	69a2      	ldr	r2, [r4, #24]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	dc17      	bgt.n	8005edc <_puts_r+0x8c>
 8005eac:	290a      	cmp	r1, #10
 8005eae:	d015      	beq.n	8005edc <_puts_r+0x8c>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	6022      	str	r2, [r4, #0]
 8005eb6:	7019      	strb	r1, [r3, #0]
 8005eb8:	68a3      	ldr	r3, [r4, #8]
 8005eba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	60a3      	str	r3, [r4, #8]
 8005ec2:	2900      	cmp	r1, #0
 8005ec4:	d1ed      	bne.n	8005ea2 <_puts_r+0x52>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da11      	bge.n	8005eee <_puts_r+0x9e>
 8005eca:	4622      	mov	r2, r4
 8005ecc:	210a      	movs	r1, #10
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f85f 	bl	8005f92 <__swbuf_r>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d0d7      	beq.n	8005e88 <_puts_r+0x38>
 8005ed8:	250a      	movs	r5, #10
 8005eda:	e7d7      	b.n	8005e8c <_puts_r+0x3c>
 8005edc:	4622      	mov	r2, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f857 	bl	8005f92 <__swbuf_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d1e7      	bne.n	8005eb8 <_puts_r+0x68>
 8005ee8:	e7ce      	b.n	8005e88 <_puts_r+0x38>
 8005eea:	3e01      	subs	r6, #1
 8005eec:	e7e4      	b.n	8005eb8 <_puts_r+0x68>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	6022      	str	r2, [r4, #0]
 8005ef4:	220a      	movs	r2, #10
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e7ee      	b.n	8005ed8 <_puts_r+0x88>
	...

08005efc <puts>:
 8005efc:	4b02      	ldr	r3, [pc, #8]	@ (8005f08 <puts+0xc>)
 8005efe:	4601      	mov	r1, r0
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f7ff bfa5 	b.w	8005e50 <_puts_r>
 8005f06:	bf00      	nop
 8005f08:	20000018 	.word	0x20000018

08005f0c <__sread>:
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	460c      	mov	r4, r1
 8005f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f14:	f000 f8fc 	bl	8006110 <_read_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	bfab      	itete	ge
 8005f1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f20:	181b      	addge	r3, r3, r0
 8005f22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f26:	bfac      	ite	ge
 8005f28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f2a:	81a3      	strhlt	r3, [r4, #12]
 8005f2c:	bd10      	pop	{r4, pc}

08005f2e <__swrite>:
 8005f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f32:	461f      	mov	r7, r3
 8005f34:	898b      	ldrh	r3, [r1, #12]
 8005f36:	4605      	mov	r5, r0
 8005f38:	05db      	lsls	r3, r3, #23
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	4616      	mov	r6, r2
 8005f3e:	d505      	bpl.n	8005f4c <__swrite+0x1e>
 8005f40:	2302      	movs	r3, #2
 8005f42:	2200      	movs	r2, #0
 8005f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f48:	f000 f8d0 	bl	80060ec <_lseek_r>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	4632      	mov	r2, r6
 8005f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f54:	81a3      	strh	r3, [r4, #12]
 8005f56:	4628      	mov	r0, r5
 8005f58:	463b      	mov	r3, r7
 8005f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	f000 b8e7 	b.w	8006134 <_write_r>

08005f66 <__sseek>:
 8005f66:	b510      	push	{r4, lr}
 8005f68:	460c      	mov	r4, r1
 8005f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6e:	f000 f8bd 	bl	80060ec <_lseek_r>
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	bf15      	itete	ne
 8005f78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f82:	81a3      	strheq	r3, [r4, #12]
 8005f84:	bf18      	it	ne
 8005f86:	81a3      	strhne	r3, [r4, #12]
 8005f88:	bd10      	pop	{r4, pc}

08005f8a <__sclose>:
 8005f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f8e:	f000 b89d 	b.w	80060cc <_close_r>

08005f92 <__swbuf_r>:
 8005f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f94:	460e      	mov	r6, r1
 8005f96:	4614      	mov	r4, r2
 8005f98:	4605      	mov	r5, r0
 8005f9a:	b118      	cbz	r0, 8005fa4 <__swbuf_r+0x12>
 8005f9c:	6a03      	ldr	r3, [r0, #32]
 8005f9e:	b90b      	cbnz	r3, 8005fa4 <__swbuf_r+0x12>
 8005fa0:	f7ff ff06 	bl	8005db0 <__sinit>
 8005fa4:	69a3      	ldr	r3, [r4, #24]
 8005fa6:	60a3      	str	r3, [r4, #8]
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	071a      	lsls	r2, r3, #28
 8005fac:	d501      	bpl.n	8005fb2 <__swbuf_r+0x20>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	b943      	cbnz	r3, 8005fc4 <__swbuf_r+0x32>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 f82b 	bl	8006010 <__swsetup_r>
 8005fba:	b118      	cbz	r0, 8005fc4 <__swbuf_r+0x32>
 8005fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	6922      	ldr	r2, [r4, #16]
 8005fc8:	b2f6      	uxtb	r6, r6
 8005fca:	1a98      	subs	r0, r3, r2
 8005fcc:	6963      	ldr	r3, [r4, #20]
 8005fce:	4637      	mov	r7, r6
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	dc05      	bgt.n	8005fe0 <__swbuf_r+0x4e>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fd34 	bl	8006a44 <_fflush_r>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d1ed      	bne.n	8005fbc <__swbuf_r+0x2a>
 8005fe0:	68a3      	ldr	r3, [r4, #8]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	701e      	strb	r6, [r3, #0]
 8005fee:	6962      	ldr	r2, [r4, #20]
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d004      	beq.n	8006000 <__swbuf_r+0x6e>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	07db      	lsls	r3, r3, #31
 8005ffa:	d5e1      	bpl.n	8005fc0 <__swbuf_r+0x2e>
 8005ffc:	2e0a      	cmp	r6, #10
 8005ffe:	d1df      	bne.n	8005fc0 <__swbuf_r+0x2e>
 8006000:	4621      	mov	r1, r4
 8006002:	4628      	mov	r0, r5
 8006004:	f000 fd1e 	bl	8006a44 <_fflush_r>
 8006008:	2800      	cmp	r0, #0
 800600a:	d0d9      	beq.n	8005fc0 <__swbuf_r+0x2e>
 800600c:	e7d6      	b.n	8005fbc <__swbuf_r+0x2a>
	...

08006010 <__swsetup_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4b29      	ldr	r3, [pc, #164]	@ (80060b8 <__swsetup_r+0xa8>)
 8006014:	4605      	mov	r5, r0
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	460c      	mov	r4, r1
 800601a:	b118      	cbz	r0, 8006024 <__swsetup_r+0x14>
 800601c:	6a03      	ldr	r3, [r0, #32]
 800601e:	b90b      	cbnz	r3, 8006024 <__swsetup_r+0x14>
 8006020:	f7ff fec6 	bl	8005db0 <__sinit>
 8006024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006028:	0719      	lsls	r1, r3, #28
 800602a:	d422      	bmi.n	8006072 <__swsetup_r+0x62>
 800602c:	06da      	lsls	r2, r3, #27
 800602e:	d407      	bmi.n	8006040 <__swsetup_r+0x30>
 8006030:	2209      	movs	r2, #9
 8006032:	602a      	str	r2, [r5, #0]
 8006034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	e033      	b.n	80060a8 <__swsetup_r+0x98>
 8006040:	0758      	lsls	r0, r3, #29
 8006042:	d512      	bpl.n	800606a <__swsetup_r+0x5a>
 8006044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006046:	b141      	cbz	r1, 800605a <__swsetup_r+0x4a>
 8006048:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800604c:	4299      	cmp	r1, r3
 800604e:	d002      	beq.n	8006056 <__swsetup_r+0x46>
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f8af 	bl	80061b4 <_free_r>
 8006056:	2300      	movs	r3, #0
 8006058:	6363      	str	r3, [r4, #52]	@ 0x34
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006060:	81a3      	strh	r3, [r4, #12]
 8006062:	2300      	movs	r3, #0
 8006064:	6063      	str	r3, [r4, #4]
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	89a3      	ldrh	r3, [r4, #12]
 800606c:	f043 0308 	orr.w	r3, r3, #8
 8006070:	81a3      	strh	r3, [r4, #12]
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	b94b      	cbnz	r3, 800608a <__swsetup_r+0x7a>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800607c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006080:	d003      	beq.n	800608a <__swsetup_r+0x7a>
 8006082:	4621      	mov	r1, r4
 8006084:	4628      	mov	r0, r5
 8006086:	f000 fd2a 	bl	8006ade <__smakebuf_r>
 800608a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608e:	f013 0201 	ands.w	r2, r3, #1
 8006092:	d00a      	beq.n	80060aa <__swsetup_r+0x9a>
 8006094:	2200      	movs	r2, #0
 8006096:	60a2      	str	r2, [r4, #8]
 8006098:	6962      	ldr	r2, [r4, #20]
 800609a:	4252      	negs	r2, r2
 800609c:	61a2      	str	r2, [r4, #24]
 800609e:	6922      	ldr	r2, [r4, #16]
 80060a0:	b942      	cbnz	r2, 80060b4 <__swsetup_r+0xa4>
 80060a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060a6:	d1c5      	bne.n	8006034 <__swsetup_r+0x24>
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
 80060aa:	0799      	lsls	r1, r3, #30
 80060ac:	bf58      	it	pl
 80060ae:	6962      	ldrpl	r2, [r4, #20]
 80060b0:	60a2      	str	r2, [r4, #8]
 80060b2:	e7f4      	b.n	800609e <__swsetup_r+0x8e>
 80060b4:	2000      	movs	r0, #0
 80060b6:	e7f7      	b.n	80060a8 <__swsetup_r+0x98>
 80060b8:	20000018 	.word	0x20000018

080060bc <memset>:
 80060bc:	4603      	mov	r3, r0
 80060be:	4402      	add	r2, r0
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d100      	bne.n	80060c6 <memset+0xa>
 80060c4:	4770      	bx	lr
 80060c6:	f803 1b01 	strb.w	r1, [r3], #1
 80060ca:	e7f9      	b.n	80060c0 <memset+0x4>

080060cc <_close_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	2300      	movs	r3, #0
 80060d0:	4d05      	ldr	r5, [pc, #20]	@ (80060e8 <_close_r+0x1c>)
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fb f89d 	bl	8001216 <_close>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_close_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_close_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	200003e4 	.word	0x200003e4

080060ec <_lseek_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	4d05      	ldr	r5, [pc, #20]	@ (800610c <_lseek_r+0x20>)
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fb f8af 	bl	800125e <_lseek>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_lseek_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_lseek_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	200003e4 	.word	0x200003e4

08006110 <_read_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	2200      	movs	r2, #0
 800611a:	4d05      	ldr	r5, [pc, #20]	@ (8006130 <_read_r+0x20>)
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb f840 	bl	80011a4 <_read>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_read_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_read_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	200003e4 	.word	0x200003e4

08006134 <_write_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	2200      	movs	r2, #0
 800613e:	4d05      	ldr	r5, [pc, #20]	@ (8006154 <_write_r+0x20>)
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fb f84b 	bl	80011de <_write>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_write_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_write_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	200003e4 	.word	0x200003e4

08006158 <__errno>:
 8006158:	4b01      	ldr	r3, [pc, #4]	@ (8006160 <__errno+0x8>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000018 	.word	0x20000018

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	2600      	movs	r6, #0
 8006168:	4d0c      	ldr	r5, [pc, #48]	@ (800619c <__libc_init_array+0x38>)
 800616a:	4c0d      	ldr	r4, [pc, #52]	@ (80061a0 <__libc_init_array+0x3c>)
 800616c:	1b64      	subs	r4, r4, r5
 800616e:	10a4      	asrs	r4, r4, #2
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	f000 fd64 	bl	8006c40 <_init>
 8006178:	2600      	movs	r6, #0
 800617a:	4d0a      	ldr	r5, [pc, #40]	@ (80061a4 <__libc_init_array+0x40>)
 800617c:	4c0a      	ldr	r4, [pc, #40]	@ (80061a8 <__libc_init_array+0x44>)
 800617e:	1b64      	subs	r4, r4, r5
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f855 3b04 	ldr.w	r3, [r5], #4
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	f855 3b04 	ldr.w	r3, [r5], #4
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	08006ec4 	.word	0x08006ec4
 80061a0:	08006ec4 	.word	0x08006ec4
 80061a4:	08006ec4 	.word	0x08006ec4
 80061a8:	08006ec8 	.word	0x08006ec8

080061ac <__retarget_lock_init_recursive>:
 80061ac:	4770      	bx	lr

080061ae <__retarget_lock_acquire_recursive>:
 80061ae:	4770      	bx	lr

080061b0 <__retarget_lock_release_recursive>:
 80061b0:	4770      	bx	lr
	...

080061b4 <_free_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4605      	mov	r5, r0
 80061b8:	2900      	cmp	r1, #0
 80061ba:	d040      	beq.n	800623e <_free_r+0x8a>
 80061bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c0:	1f0c      	subs	r4, r1, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bfb8      	it	lt
 80061c6:	18e4      	addlt	r4, r4, r3
 80061c8:	f000 f8de 	bl	8006388 <__malloc_lock>
 80061cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006240 <_free_r+0x8c>)
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	b933      	cbnz	r3, 80061e0 <_free_r+0x2c>
 80061d2:	6063      	str	r3, [r4, #4]
 80061d4:	6014      	str	r4, [r2, #0]
 80061d6:	4628      	mov	r0, r5
 80061d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061dc:	f000 b8da 	b.w	8006394 <__malloc_unlock>
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d908      	bls.n	80061f6 <_free_r+0x42>
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	1821      	adds	r1, r4, r0
 80061e8:	428b      	cmp	r3, r1
 80061ea:	bf01      	itttt	eq
 80061ec:	6819      	ldreq	r1, [r3, #0]
 80061ee:	685b      	ldreq	r3, [r3, #4]
 80061f0:	1809      	addeq	r1, r1, r0
 80061f2:	6021      	streq	r1, [r4, #0]
 80061f4:	e7ed      	b.n	80061d2 <_free_r+0x1e>
 80061f6:	461a      	mov	r2, r3
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	b10b      	cbz	r3, 8006200 <_free_r+0x4c>
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d9fa      	bls.n	80061f6 <_free_r+0x42>
 8006200:	6811      	ldr	r1, [r2, #0]
 8006202:	1850      	adds	r0, r2, r1
 8006204:	42a0      	cmp	r0, r4
 8006206:	d10b      	bne.n	8006220 <_free_r+0x6c>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	4401      	add	r1, r0
 800620c:	1850      	adds	r0, r2, r1
 800620e:	4283      	cmp	r3, r0
 8006210:	6011      	str	r1, [r2, #0]
 8006212:	d1e0      	bne.n	80061d6 <_free_r+0x22>
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4408      	add	r0, r1
 800621a:	6010      	str	r0, [r2, #0]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	e7da      	b.n	80061d6 <_free_r+0x22>
 8006220:	d902      	bls.n	8006228 <_free_r+0x74>
 8006222:	230c      	movs	r3, #12
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	e7d6      	b.n	80061d6 <_free_r+0x22>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	1821      	adds	r1, r4, r0
 800622c:	428b      	cmp	r3, r1
 800622e:	bf01      	itttt	eq
 8006230:	6819      	ldreq	r1, [r3, #0]
 8006232:	685b      	ldreq	r3, [r3, #4]
 8006234:	1809      	addeq	r1, r1, r0
 8006236:	6021      	streq	r1, [r4, #0]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	6054      	str	r4, [r2, #4]
 800623c:	e7cb      	b.n	80061d6 <_free_r+0x22>
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	200003f0 	.word	0x200003f0

08006244 <sbrk_aligned>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4e0f      	ldr	r6, [pc, #60]	@ (8006284 <sbrk_aligned+0x40>)
 8006248:	460c      	mov	r4, r1
 800624a:	6831      	ldr	r1, [r6, #0]
 800624c:	4605      	mov	r5, r0
 800624e:	b911      	cbnz	r1, 8006256 <sbrk_aligned+0x12>
 8006250:	f000 fcd8 	bl	8006c04 <_sbrk_r>
 8006254:	6030      	str	r0, [r6, #0]
 8006256:	4621      	mov	r1, r4
 8006258:	4628      	mov	r0, r5
 800625a:	f000 fcd3 	bl	8006c04 <_sbrk_r>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	d103      	bne.n	800626a <sbrk_aligned+0x26>
 8006262:	f04f 34ff 	mov.w	r4, #4294967295
 8006266:	4620      	mov	r0, r4
 8006268:	bd70      	pop	{r4, r5, r6, pc}
 800626a:	1cc4      	adds	r4, r0, #3
 800626c:	f024 0403 	bic.w	r4, r4, #3
 8006270:	42a0      	cmp	r0, r4
 8006272:	d0f8      	beq.n	8006266 <sbrk_aligned+0x22>
 8006274:	1a21      	subs	r1, r4, r0
 8006276:	4628      	mov	r0, r5
 8006278:	f000 fcc4 	bl	8006c04 <_sbrk_r>
 800627c:	3001      	adds	r0, #1
 800627e:	d1f2      	bne.n	8006266 <sbrk_aligned+0x22>
 8006280:	e7ef      	b.n	8006262 <sbrk_aligned+0x1e>
 8006282:	bf00      	nop
 8006284:	200003ec 	.word	0x200003ec

08006288 <_malloc_r>:
 8006288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800628c:	1ccd      	adds	r5, r1, #3
 800628e:	f025 0503 	bic.w	r5, r5, #3
 8006292:	3508      	adds	r5, #8
 8006294:	2d0c      	cmp	r5, #12
 8006296:	bf38      	it	cc
 8006298:	250c      	movcc	r5, #12
 800629a:	2d00      	cmp	r5, #0
 800629c:	4606      	mov	r6, r0
 800629e:	db01      	blt.n	80062a4 <_malloc_r+0x1c>
 80062a0:	42a9      	cmp	r1, r5
 80062a2:	d904      	bls.n	80062ae <_malloc_r+0x26>
 80062a4:	230c      	movs	r3, #12
 80062a6:	6033      	str	r3, [r6, #0]
 80062a8:	2000      	movs	r0, #0
 80062aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006384 <_malloc_r+0xfc>
 80062b2:	f000 f869 	bl	8006388 <__malloc_lock>
 80062b6:	f8d8 3000 	ldr.w	r3, [r8]
 80062ba:	461c      	mov	r4, r3
 80062bc:	bb44      	cbnz	r4, 8006310 <_malloc_r+0x88>
 80062be:	4629      	mov	r1, r5
 80062c0:	4630      	mov	r0, r6
 80062c2:	f7ff ffbf 	bl	8006244 <sbrk_aligned>
 80062c6:	1c43      	adds	r3, r0, #1
 80062c8:	4604      	mov	r4, r0
 80062ca:	d158      	bne.n	800637e <_malloc_r+0xf6>
 80062cc:	f8d8 4000 	ldr.w	r4, [r8]
 80062d0:	4627      	mov	r7, r4
 80062d2:	2f00      	cmp	r7, #0
 80062d4:	d143      	bne.n	800635e <_malloc_r+0xd6>
 80062d6:	2c00      	cmp	r4, #0
 80062d8:	d04b      	beq.n	8006372 <_malloc_r+0xea>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	4639      	mov	r1, r7
 80062de:	4630      	mov	r0, r6
 80062e0:	eb04 0903 	add.w	r9, r4, r3
 80062e4:	f000 fc8e 	bl	8006c04 <_sbrk_r>
 80062e8:	4581      	cmp	r9, r0
 80062ea:	d142      	bne.n	8006372 <_malloc_r+0xea>
 80062ec:	6821      	ldr	r1, [r4, #0]
 80062ee:	4630      	mov	r0, r6
 80062f0:	1a6d      	subs	r5, r5, r1
 80062f2:	4629      	mov	r1, r5
 80062f4:	f7ff ffa6 	bl	8006244 <sbrk_aligned>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d03a      	beq.n	8006372 <_malloc_r+0xea>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	442b      	add	r3, r5
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	f8d8 3000 	ldr.w	r3, [r8]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	bb62      	cbnz	r2, 8006364 <_malloc_r+0xdc>
 800630a:	f8c8 7000 	str.w	r7, [r8]
 800630e:	e00f      	b.n	8006330 <_malloc_r+0xa8>
 8006310:	6822      	ldr	r2, [r4, #0]
 8006312:	1b52      	subs	r2, r2, r5
 8006314:	d420      	bmi.n	8006358 <_malloc_r+0xd0>
 8006316:	2a0b      	cmp	r2, #11
 8006318:	d917      	bls.n	800634a <_malloc_r+0xc2>
 800631a:	1961      	adds	r1, r4, r5
 800631c:	42a3      	cmp	r3, r4
 800631e:	6025      	str	r5, [r4, #0]
 8006320:	bf18      	it	ne
 8006322:	6059      	strne	r1, [r3, #4]
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	bf08      	it	eq
 8006328:	f8c8 1000 	streq.w	r1, [r8]
 800632c:	5162      	str	r2, [r4, r5]
 800632e:	604b      	str	r3, [r1, #4]
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f82f 	bl	8006394 <__malloc_unlock>
 8006336:	f104 000b 	add.w	r0, r4, #11
 800633a:	1d23      	adds	r3, r4, #4
 800633c:	f020 0007 	bic.w	r0, r0, #7
 8006340:	1ac2      	subs	r2, r0, r3
 8006342:	bf1c      	itt	ne
 8006344:	1a1b      	subne	r3, r3, r0
 8006346:	50a3      	strne	r3, [r4, r2]
 8006348:	e7af      	b.n	80062aa <_malloc_r+0x22>
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	42a3      	cmp	r3, r4
 800634e:	bf0c      	ite	eq
 8006350:	f8c8 2000 	streq.w	r2, [r8]
 8006354:	605a      	strne	r2, [r3, #4]
 8006356:	e7eb      	b.n	8006330 <_malloc_r+0xa8>
 8006358:	4623      	mov	r3, r4
 800635a:	6864      	ldr	r4, [r4, #4]
 800635c:	e7ae      	b.n	80062bc <_malloc_r+0x34>
 800635e:	463c      	mov	r4, r7
 8006360:	687f      	ldr	r7, [r7, #4]
 8006362:	e7b6      	b.n	80062d2 <_malloc_r+0x4a>
 8006364:	461a      	mov	r2, r3
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	42a3      	cmp	r3, r4
 800636a:	d1fb      	bne.n	8006364 <_malloc_r+0xdc>
 800636c:	2300      	movs	r3, #0
 800636e:	6053      	str	r3, [r2, #4]
 8006370:	e7de      	b.n	8006330 <_malloc_r+0xa8>
 8006372:	230c      	movs	r3, #12
 8006374:	4630      	mov	r0, r6
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	f000 f80c 	bl	8006394 <__malloc_unlock>
 800637c:	e794      	b.n	80062a8 <_malloc_r+0x20>
 800637e:	6005      	str	r5, [r0, #0]
 8006380:	e7d6      	b.n	8006330 <_malloc_r+0xa8>
 8006382:	bf00      	nop
 8006384:	200003f0 	.word	0x200003f0

08006388 <__malloc_lock>:
 8006388:	4801      	ldr	r0, [pc, #4]	@ (8006390 <__malloc_lock+0x8>)
 800638a:	f7ff bf10 	b.w	80061ae <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	200003e8 	.word	0x200003e8

08006394 <__malloc_unlock>:
 8006394:	4801      	ldr	r0, [pc, #4]	@ (800639c <__malloc_unlock+0x8>)
 8006396:	f7ff bf0b 	b.w	80061b0 <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	200003e8 	.word	0x200003e8

080063a0 <__sfputc_r>:
 80063a0:	6893      	ldr	r3, [r2, #8]
 80063a2:	b410      	push	{r4}
 80063a4:	3b01      	subs	r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	6093      	str	r3, [r2, #8]
 80063aa:	da07      	bge.n	80063bc <__sfputc_r+0x1c>
 80063ac:	6994      	ldr	r4, [r2, #24]
 80063ae:	42a3      	cmp	r3, r4
 80063b0:	db01      	blt.n	80063b6 <__sfputc_r+0x16>
 80063b2:	290a      	cmp	r1, #10
 80063b4:	d102      	bne.n	80063bc <__sfputc_r+0x1c>
 80063b6:	bc10      	pop	{r4}
 80063b8:	f7ff bdeb 	b.w	8005f92 <__swbuf_r>
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	1c58      	adds	r0, r3, #1
 80063c0:	6010      	str	r0, [r2, #0]
 80063c2:	7019      	strb	r1, [r3, #0]
 80063c4:	4608      	mov	r0, r1
 80063c6:	bc10      	pop	{r4}
 80063c8:	4770      	bx	lr

080063ca <__sfputs_r>:
 80063ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063cc:	4606      	mov	r6, r0
 80063ce:	460f      	mov	r7, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	18d5      	adds	r5, r2, r3
 80063d4:	42ac      	cmp	r4, r5
 80063d6:	d101      	bne.n	80063dc <__sfputs_r+0x12>
 80063d8:	2000      	movs	r0, #0
 80063da:	e007      	b.n	80063ec <__sfputs_r+0x22>
 80063dc:	463a      	mov	r2, r7
 80063de:	4630      	mov	r0, r6
 80063e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e4:	f7ff ffdc 	bl	80063a0 <__sfputc_r>
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d1f3      	bne.n	80063d4 <__sfputs_r+0xa>
 80063ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063f0 <_vfiprintf_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	460d      	mov	r5, r1
 80063f6:	4614      	mov	r4, r2
 80063f8:	4698      	mov	r8, r3
 80063fa:	4606      	mov	r6, r0
 80063fc:	b09d      	sub	sp, #116	@ 0x74
 80063fe:	b118      	cbz	r0, 8006408 <_vfiprintf_r+0x18>
 8006400:	6a03      	ldr	r3, [r0, #32]
 8006402:	b90b      	cbnz	r3, 8006408 <_vfiprintf_r+0x18>
 8006404:	f7ff fcd4 	bl	8005db0 <__sinit>
 8006408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800640a:	07d9      	lsls	r1, r3, #31
 800640c:	d405      	bmi.n	800641a <_vfiprintf_r+0x2a>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	059a      	lsls	r2, r3, #22
 8006412:	d402      	bmi.n	800641a <_vfiprintf_r+0x2a>
 8006414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006416:	f7ff feca 	bl	80061ae <__retarget_lock_acquire_recursive>
 800641a:	89ab      	ldrh	r3, [r5, #12]
 800641c:	071b      	lsls	r3, r3, #28
 800641e:	d501      	bpl.n	8006424 <_vfiprintf_r+0x34>
 8006420:	692b      	ldr	r3, [r5, #16]
 8006422:	b99b      	cbnz	r3, 800644c <_vfiprintf_r+0x5c>
 8006424:	4629      	mov	r1, r5
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff fdf2 	bl	8006010 <__swsetup_r>
 800642c:	b170      	cbz	r0, 800644c <_vfiprintf_r+0x5c>
 800642e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006430:	07dc      	lsls	r4, r3, #31
 8006432:	d504      	bpl.n	800643e <_vfiprintf_r+0x4e>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	b01d      	add	sp, #116	@ 0x74
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	0598      	lsls	r0, r3, #22
 8006442:	d4f7      	bmi.n	8006434 <_vfiprintf_r+0x44>
 8006444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006446:	f7ff feb3 	bl	80061b0 <__retarget_lock_release_recursive>
 800644a:	e7f3      	b.n	8006434 <_vfiprintf_r+0x44>
 800644c:	2300      	movs	r3, #0
 800644e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006450:	2320      	movs	r3, #32
 8006452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006456:	2330      	movs	r3, #48	@ 0x30
 8006458:	f04f 0901 	mov.w	r9, #1
 800645c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006460:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800660c <_vfiprintf_r+0x21c>
 8006464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006468:	4623      	mov	r3, r4
 800646a:	469a      	mov	sl, r3
 800646c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006470:	b10a      	cbz	r2, 8006476 <_vfiprintf_r+0x86>
 8006472:	2a25      	cmp	r2, #37	@ 0x25
 8006474:	d1f9      	bne.n	800646a <_vfiprintf_r+0x7a>
 8006476:	ebba 0b04 	subs.w	fp, sl, r4
 800647a:	d00b      	beq.n	8006494 <_vfiprintf_r+0xa4>
 800647c:	465b      	mov	r3, fp
 800647e:	4622      	mov	r2, r4
 8006480:	4629      	mov	r1, r5
 8006482:	4630      	mov	r0, r6
 8006484:	f7ff ffa1 	bl	80063ca <__sfputs_r>
 8006488:	3001      	adds	r0, #1
 800648a:	f000 80a7 	beq.w	80065dc <_vfiprintf_r+0x1ec>
 800648e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006490:	445a      	add	r2, fp
 8006492:	9209      	str	r2, [sp, #36]	@ 0x24
 8006494:	f89a 3000 	ldrb.w	r3, [sl]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 809f 	beq.w	80065dc <_vfiprintf_r+0x1ec>
 800649e:	2300      	movs	r3, #0
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064a8:	f10a 0a01 	add.w	sl, sl, #1
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	9307      	str	r3, [sp, #28]
 80064b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80064b6:	4654      	mov	r4, sl
 80064b8:	2205      	movs	r2, #5
 80064ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064be:	4853      	ldr	r0, [pc, #332]	@ (800660c <_vfiprintf_r+0x21c>)
 80064c0:	f000 fbb0 	bl	8006c24 <memchr>
 80064c4:	9a04      	ldr	r2, [sp, #16]
 80064c6:	b9d8      	cbnz	r0, 8006500 <_vfiprintf_r+0x110>
 80064c8:	06d1      	lsls	r1, r2, #27
 80064ca:	bf44      	itt	mi
 80064cc:	2320      	movmi	r3, #32
 80064ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064d2:	0713      	lsls	r3, r2, #28
 80064d4:	bf44      	itt	mi
 80064d6:	232b      	movmi	r3, #43	@ 0x2b
 80064d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064dc:	f89a 3000 	ldrb.w	r3, [sl]
 80064e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e2:	d015      	beq.n	8006510 <_vfiprintf_r+0x120>
 80064e4:	4654      	mov	r4, sl
 80064e6:	2000      	movs	r0, #0
 80064e8:	f04f 0c0a 	mov.w	ip, #10
 80064ec:	9a07      	ldr	r2, [sp, #28]
 80064ee:	4621      	mov	r1, r4
 80064f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064f4:	3b30      	subs	r3, #48	@ 0x30
 80064f6:	2b09      	cmp	r3, #9
 80064f8:	d94b      	bls.n	8006592 <_vfiprintf_r+0x1a2>
 80064fa:	b1b0      	cbz	r0, 800652a <_vfiprintf_r+0x13a>
 80064fc:	9207      	str	r2, [sp, #28]
 80064fe:	e014      	b.n	800652a <_vfiprintf_r+0x13a>
 8006500:	eba0 0308 	sub.w	r3, r0, r8
 8006504:	fa09 f303 	lsl.w	r3, r9, r3
 8006508:	4313      	orrs	r3, r2
 800650a:	46a2      	mov	sl, r4
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	e7d2      	b.n	80064b6 <_vfiprintf_r+0xc6>
 8006510:	9b03      	ldr	r3, [sp, #12]
 8006512:	1d19      	adds	r1, r3, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	9103      	str	r1, [sp, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfbb      	ittet	lt
 800651c:	425b      	neglt	r3, r3
 800651e:	f042 0202 	orrlt.w	r2, r2, #2
 8006522:	9307      	strge	r3, [sp, #28]
 8006524:	9307      	strlt	r3, [sp, #28]
 8006526:	bfb8      	it	lt
 8006528:	9204      	strlt	r2, [sp, #16]
 800652a:	7823      	ldrb	r3, [r4, #0]
 800652c:	2b2e      	cmp	r3, #46	@ 0x2e
 800652e:	d10a      	bne.n	8006546 <_vfiprintf_r+0x156>
 8006530:	7863      	ldrb	r3, [r4, #1]
 8006532:	2b2a      	cmp	r3, #42	@ 0x2a
 8006534:	d132      	bne.n	800659c <_vfiprintf_r+0x1ac>
 8006536:	9b03      	ldr	r3, [sp, #12]
 8006538:	3402      	adds	r4, #2
 800653a:	1d1a      	adds	r2, r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	9203      	str	r2, [sp, #12]
 8006540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006544:	9305      	str	r3, [sp, #20]
 8006546:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006610 <_vfiprintf_r+0x220>
 800654a:	2203      	movs	r2, #3
 800654c:	4650      	mov	r0, sl
 800654e:	7821      	ldrb	r1, [r4, #0]
 8006550:	f000 fb68 	bl	8006c24 <memchr>
 8006554:	b138      	cbz	r0, 8006566 <_vfiprintf_r+0x176>
 8006556:	2240      	movs	r2, #64	@ 0x40
 8006558:	9b04      	ldr	r3, [sp, #16]
 800655a:	eba0 000a 	sub.w	r0, r0, sl
 800655e:	4082      	lsls	r2, r0
 8006560:	4313      	orrs	r3, r2
 8006562:	3401      	adds	r4, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800656a:	2206      	movs	r2, #6
 800656c:	4829      	ldr	r0, [pc, #164]	@ (8006614 <_vfiprintf_r+0x224>)
 800656e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006572:	f000 fb57 	bl	8006c24 <memchr>
 8006576:	2800      	cmp	r0, #0
 8006578:	d03f      	beq.n	80065fa <_vfiprintf_r+0x20a>
 800657a:	4b27      	ldr	r3, [pc, #156]	@ (8006618 <_vfiprintf_r+0x228>)
 800657c:	bb1b      	cbnz	r3, 80065c6 <_vfiprintf_r+0x1d6>
 800657e:	9b03      	ldr	r3, [sp, #12]
 8006580:	3307      	adds	r3, #7
 8006582:	f023 0307 	bic.w	r3, r3, #7
 8006586:	3308      	adds	r3, #8
 8006588:	9303      	str	r3, [sp, #12]
 800658a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658c:	443b      	add	r3, r7
 800658e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006590:	e76a      	b.n	8006468 <_vfiprintf_r+0x78>
 8006592:	460c      	mov	r4, r1
 8006594:	2001      	movs	r0, #1
 8006596:	fb0c 3202 	mla	r2, ip, r2, r3
 800659a:	e7a8      	b.n	80064ee <_vfiprintf_r+0xfe>
 800659c:	2300      	movs	r3, #0
 800659e:	f04f 0c0a 	mov.w	ip, #10
 80065a2:	4619      	mov	r1, r3
 80065a4:	3401      	adds	r4, #1
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	4620      	mov	r0, r4
 80065aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ae:	3a30      	subs	r2, #48	@ 0x30
 80065b0:	2a09      	cmp	r2, #9
 80065b2:	d903      	bls.n	80065bc <_vfiprintf_r+0x1cc>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0c6      	beq.n	8006546 <_vfiprintf_r+0x156>
 80065b8:	9105      	str	r1, [sp, #20]
 80065ba:	e7c4      	b.n	8006546 <_vfiprintf_r+0x156>
 80065bc:	4604      	mov	r4, r0
 80065be:	2301      	movs	r3, #1
 80065c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80065c4:	e7f0      	b.n	80065a8 <_vfiprintf_r+0x1b8>
 80065c6:	ab03      	add	r3, sp, #12
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	462a      	mov	r2, r5
 80065cc:	4630      	mov	r0, r6
 80065ce:	4b13      	ldr	r3, [pc, #76]	@ (800661c <_vfiprintf_r+0x22c>)
 80065d0:	a904      	add	r1, sp, #16
 80065d2:	f3af 8000 	nop.w
 80065d6:	4607      	mov	r7, r0
 80065d8:	1c78      	adds	r0, r7, #1
 80065da:	d1d6      	bne.n	800658a <_vfiprintf_r+0x19a>
 80065dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065de:	07d9      	lsls	r1, r3, #31
 80065e0:	d405      	bmi.n	80065ee <_vfiprintf_r+0x1fe>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	059a      	lsls	r2, r3, #22
 80065e6:	d402      	bmi.n	80065ee <_vfiprintf_r+0x1fe>
 80065e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ea:	f7ff fde1 	bl	80061b0 <__retarget_lock_release_recursive>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	065b      	lsls	r3, r3, #25
 80065f2:	f53f af1f 	bmi.w	8006434 <_vfiprintf_r+0x44>
 80065f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065f8:	e71e      	b.n	8006438 <_vfiprintf_r+0x48>
 80065fa:	ab03      	add	r3, sp, #12
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	462a      	mov	r2, r5
 8006600:	4630      	mov	r0, r6
 8006602:	4b06      	ldr	r3, [pc, #24]	@ (800661c <_vfiprintf_r+0x22c>)
 8006604:	a904      	add	r1, sp, #16
 8006606:	f000 f87d 	bl	8006704 <_printf_i>
 800660a:	e7e4      	b.n	80065d6 <_vfiprintf_r+0x1e6>
 800660c:	08006e8e 	.word	0x08006e8e
 8006610:	08006e94 	.word	0x08006e94
 8006614:	08006e98 	.word	0x08006e98
 8006618:	00000000 	.word	0x00000000
 800661c:	080063cb 	.word	0x080063cb

08006620 <_printf_common>:
 8006620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	4616      	mov	r6, r2
 8006626:	4698      	mov	r8, r3
 8006628:	688a      	ldr	r2, [r1, #8]
 800662a:	690b      	ldr	r3, [r1, #16]
 800662c:	4607      	mov	r7, r0
 800662e:	4293      	cmp	r3, r2
 8006630:	bfb8      	it	lt
 8006632:	4613      	movlt	r3, r2
 8006634:	6033      	str	r3, [r6, #0]
 8006636:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800663a:	460c      	mov	r4, r1
 800663c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006640:	b10a      	cbz	r2, 8006646 <_printf_common+0x26>
 8006642:	3301      	adds	r3, #1
 8006644:	6033      	str	r3, [r6, #0]
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	0699      	lsls	r1, r3, #26
 800664a:	bf42      	ittt	mi
 800664c:	6833      	ldrmi	r3, [r6, #0]
 800664e:	3302      	addmi	r3, #2
 8006650:	6033      	strmi	r3, [r6, #0]
 8006652:	6825      	ldr	r5, [r4, #0]
 8006654:	f015 0506 	ands.w	r5, r5, #6
 8006658:	d106      	bne.n	8006668 <_printf_common+0x48>
 800665a:	f104 0a19 	add.w	sl, r4, #25
 800665e:	68e3      	ldr	r3, [r4, #12]
 8006660:	6832      	ldr	r2, [r6, #0]
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	42ab      	cmp	r3, r5
 8006666:	dc2b      	bgt.n	80066c0 <_printf_common+0xa0>
 8006668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800666c:	6822      	ldr	r2, [r4, #0]
 800666e:	3b00      	subs	r3, #0
 8006670:	bf18      	it	ne
 8006672:	2301      	movne	r3, #1
 8006674:	0692      	lsls	r2, r2, #26
 8006676:	d430      	bmi.n	80066da <_printf_common+0xba>
 8006678:	4641      	mov	r1, r8
 800667a:	4638      	mov	r0, r7
 800667c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006680:	47c8      	blx	r9
 8006682:	3001      	adds	r0, #1
 8006684:	d023      	beq.n	80066ce <_printf_common+0xae>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	6922      	ldr	r2, [r4, #16]
 800668a:	f003 0306 	and.w	r3, r3, #6
 800668e:	2b04      	cmp	r3, #4
 8006690:	bf14      	ite	ne
 8006692:	2500      	movne	r5, #0
 8006694:	6833      	ldreq	r3, [r6, #0]
 8006696:	f04f 0600 	mov.w	r6, #0
 800669a:	bf08      	it	eq
 800669c:	68e5      	ldreq	r5, [r4, #12]
 800669e:	f104 041a 	add.w	r4, r4, #26
 80066a2:	bf08      	it	eq
 80066a4:	1aed      	subeq	r5, r5, r3
 80066a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80066aa:	bf08      	it	eq
 80066ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b0:	4293      	cmp	r3, r2
 80066b2:	bfc4      	itt	gt
 80066b4:	1a9b      	subgt	r3, r3, r2
 80066b6:	18ed      	addgt	r5, r5, r3
 80066b8:	42b5      	cmp	r5, r6
 80066ba:	d11a      	bne.n	80066f2 <_printf_common+0xd2>
 80066bc:	2000      	movs	r0, #0
 80066be:	e008      	b.n	80066d2 <_printf_common+0xb2>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4652      	mov	r2, sl
 80066c4:	4641      	mov	r1, r8
 80066c6:	4638      	mov	r0, r7
 80066c8:	47c8      	blx	r9
 80066ca:	3001      	adds	r0, #1
 80066cc:	d103      	bne.n	80066d6 <_printf_common+0xb6>
 80066ce:	f04f 30ff 	mov.w	r0, #4294967295
 80066d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d6:	3501      	adds	r5, #1
 80066d8:	e7c1      	b.n	800665e <_printf_common+0x3e>
 80066da:	2030      	movs	r0, #48	@ 0x30
 80066dc:	18e1      	adds	r1, r4, r3
 80066de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066e8:	4422      	add	r2, r4
 80066ea:	3302      	adds	r3, #2
 80066ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066f0:	e7c2      	b.n	8006678 <_printf_common+0x58>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4622      	mov	r2, r4
 80066f6:	4641      	mov	r1, r8
 80066f8:	4638      	mov	r0, r7
 80066fa:	47c8      	blx	r9
 80066fc:	3001      	adds	r0, #1
 80066fe:	d0e6      	beq.n	80066ce <_printf_common+0xae>
 8006700:	3601      	adds	r6, #1
 8006702:	e7d9      	b.n	80066b8 <_printf_common+0x98>

08006704 <_printf_i>:
 8006704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	7e0f      	ldrb	r7, [r1, #24]
 800670a:	4691      	mov	r9, r2
 800670c:	2f78      	cmp	r7, #120	@ 0x78
 800670e:	4680      	mov	r8, r0
 8006710:	460c      	mov	r4, r1
 8006712:	469a      	mov	sl, r3
 8006714:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800671a:	d807      	bhi.n	800672c <_printf_i+0x28>
 800671c:	2f62      	cmp	r7, #98	@ 0x62
 800671e:	d80a      	bhi.n	8006736 <_printf_i+0x32>
 8006720:	2f00      	cmp	r7, #0
 8006722:	f000 80d3 	beq.w	80068cc <_printf_i+0x1c8>
 8006726:	2f58      	cmp	r7, #88	@ 0x58
 8006728:	f000 80ba 	beq.w	80068a0 <_printf_i+0x19c>
 800672c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006734:	e03a      	b.n	80067ac <_printf_i+0xa8>
 8006736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800673a:	2b15      	cmp	r3, #21
 800673c:	d8f6      	bhi.n	800672c <_printf_i+0x28>
 800673e:	a101      	add	r1, pc, #4	@ (adr r1, 8006744 <_printf_i+0x40>)
 8006740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006744:	0800679d 	.word	0x0800679d
 8006748:	080067b1 	.word	0x080067b1
 800674c:	0800672d 	.word	0x0800672d
 8006750:	0800672d 	.word	0x0800672d
 8006754:	0800672d 	.word	0x0800672d
 8006758:	0800672d 	.word	0x0800672d
 800675c:	080067b1 	.word	0x080067b1
 8006760:	0800672d 	.word	0x0800672d
 8006764:	0800672d 	.word	0x0800672d
 8006768:	0800672d 	.word	0x0800672d
 800676c:	0800672d 	.word	0x0800672d
 8006770:	080068b3 	.word	0x080068b3
 8006774:	080067db 	.word	0x080067db
 8006778:	0800686d 	.word	0x0800686d
 800677c:	0800672d 	.word	0x0800672d
 8006780:	0800672d 	.word	0x0800672d
 8006784:	080068d5 	.word	0x080068d5
 8006788:	0800672d 	.word	0x0800672d
 800678c:	080067db 	.word	0x080067db
 8006790:	0800672d 	.word	0x0800672d
 8006794:	0800672d 	.word	0x0800672d
 8006798:	08006875 	.word	0x08006875
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	1d1a      	adds	r2, r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6032      	str	r2, [r6, #0]
 80067a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067ac:	2301      	movs	r3, #1
 80067ae:	e09e      	b.n	80068ee <_printf_i+0x1ea>
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	6820      	ldr	r0, [r4, #0]
 80067b4:	1d19      	adds	r1, r3, #4
 80067b6:	6031      	str	r1, [r6, #0]
 80067b8:	0606      	lsls	r6, r0, #24
 80067ba:	d501      	bpl.n	80067c0 <_printf_i+0xbc>
 80067bc:	681d      	ldr	r5, [r3, #0]
 80067be:	e003      	b.n	80067c8 <_printf_i+0xc4>
 80067c0:	0645      	lsls	r5, r0, #25
 80067c2:	d5fb      	bpl.n	80067bc <_printf_i+0xb8>
 80067c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	da03      	bge.n	80067d4 <_printf_i+0xd0>
 80067cc:	232d      	movs	r3, #45	@ 0x2d
 80067ce:	426d      	negs	r5, r5
 80067d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067d4:	230a      	movs	r3, #10
 80067d6:	4859      	ldr	r0, [pc, #356]	@ (800693c <_printf_i+0x238>)
 80067d8:	e011      	b.n	80067fe <_printf_i+0xfa>
 80067da:	6821      	ldr	r1, [r4, #0]
 80067dc:	6833      	ldr	r3, [r6, #0]
 80067de:	0608      	lsls	r0, r1, #24
 80067e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80067e4:	d402      	bmi.n	80067ec <_printf_i+0xe8>
 80067e6:	0649      	lsls	r1, r1, #25
 80067e8:	bf48      	it	mi
 80067ea:	b2ad      	uxthmi	r5, r5
 80067ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80067ee:	6033      	str	r3, [r6, #0]
 80067f0:	bf14      	ite	ne
 80067f2:	230a      	movne	r3, #10
 80067f4:	2308      	moveq	r3, #8
 80067f6:	4851      	ldr	r0, [pc, #324]	@ (800693c <_printf_i+0x238>)
 80067f8:	2100      	movs	r1, #0
 80067fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067fe:	6866      	ldr	r6, [r4, #4]
 8006800:	2e00      	cmp	r6, #0
 8006802:	bfa8      	it	ge
 8006804:	6821      	ldrge	r1, [r4, #0]
 8006806:	60a6      	str	r6, [r4, #8]
 8006808:	bfa4      	itt	ge
 800680a:	f021 0104 	bicge.w	r1, r1, #4
 800680e:	6021      	strge	r1, [r4, #0]
 8006810:	b90d      	cbnz	r5, 8006816 <_printf_i+0x112>
 8006812:	2e00      	cmp	r6, #0
 8006814:	d04b      	beq.n	80068ae <_printf_i+0x1aa>
 8006816:	4616      	mov	r6, r2
 8006818:	fbb5 f1f3 	udiv	r1, r5, r3
 800681c:	fb03 5711 	mls	r7, r3, r1, r5
 8006820:	5dc7      	ldrb	r7, [r0, r7]
 8006822:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006826:	462f      	mov	r7, r5
 8006828:	42bb      	cmp	r3, r7
 800682a:	460d      	mov	r5, r1
 800682c:	d9f4      	bls.n	8006818 <_printf_i+0x114>
 800682e:	2b08      	cmp	r3, #8
 8006830:	d10b      	bne.n	800684a <_printf_i+0x146>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	07df      	lsls	r7, r3, #31
 8006836:	d508      	bpl.n	800684a <_printf_i+0x146>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	6861      	ldr	r1, [r4, #4]
 800683c:	4299      	cmp	r1, r3
 800683e:	bfde      	ittt	le
 8006840:	2330      	movle	r3, #48	@ 0x30
 8006842:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006846:	f106 36ff 	addle.w	r6, r6, #4294967295
 800684a:	1b92      	subs	r2, r2, r6
 800684c:	6122      	str	r2, [r4, #16]
 800684e:	464b      	mov	r3, r9
 8006850:	4621      	mov	r1, r4
 8006852:	4640      	mov	r0, r8
 8006854:	f8cd a000 	str.w	sl, [sp]
 8006858:	aa03      	add	r2, sp, #12
 800685a:	f7ff fee1 	bl	8006620 <_printf_common>
 800685e:	3001      	adds	r0, #1
 8006860:	d14a      	bne.n	80068f8 <_printf_i+0x1f4>
 8006862:	f04f 30ff 	mov.w	r0, #4294967295
 8006866:	b004      	add	sp, #16
 8006868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	f043 0320 	orr.w	r3, r3, #32
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	2778      	movs	r7, #120	@ 0x78
 8006876:	4832      	ldr	r0, [pc, #200]	@ (8006940 <_printf_i+0x23c>)
 8006878:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	6831      	ldr	r1, [r6, #0]
 8006880:	061f      	lsls	r7, r3, #24
 8006882:	f851 5b04 	ldr.w	r5, [r1], #4
 8006886:	d402      	bmi.n	800688e <_printf_i+0x18a>
 8006888:	065f      	lsls	r7, r3, #25
 800688a:	bf48      	it	mi
 800688c:	b2ad      	uxthmi	r5, r5
 800688e:	6031      	str	r1, [r6, #0]
 8006890:	07d9      	lsls	r1, r3, #31
 8006892:	bf44      	itt	mi
 8006894:	f043 0320 	orrmi.w	r3, r3, #32
 8006898:	6023      	strmi	r3, [r4, #0]
 800689a:	b11d      	cbz	r5, 80068a4 <_printf_i+0x1a0>
 800689c:	2310      	movs	r3, #16
 800689e:	e7ab      	b.n	80067f8 <_printf_i+0xf4>
 80068a0:	4826      	ldr	r0, [pc, #152]	@ (800693c <_printf_i+0x238>)
 80068a2:	e7e9      	b.n	8006878 <_printf_i+0x174>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	e7f6      	b.n	800689c <_printf_i+0x198>
 80068ae:	4616      	mov	r6, r2
 80068b0:	e7bd      	b.n	800682e <_printf_i+0x12a>
 80068b2:	6833      	ldr	r3, [r6, #0]
 80068b4:	6825      	ldr	r5, [r4, #0]
 80068b6:	1d18      	adds	r0, r3, #4
 80068b8:	6961      	ldr	r1, [r4, #20]
 80068ba:	6030      	str	r0, [r6, #0]
 80068bc:	062e      	lsls	r6, r5, #24
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	d501      	bpl.n	80068c6 <_printf_i+0x1c2>
 80068c2:	6019      	str	r1, [r3, #0]
 80068c4:	e002      	b.n	80068cc <_printf_i+0x1c8>
 80068c6:	0668      	lsls	r0, r5, #25
 80068c8:	d5fb      	bpl.n	80068c2 <_printf_i+0x1be>
 80068ca:	8019      	strh	r1, [r3, #0]
 80068cc:	2300      	movs	r3, #0
 80068ce:	4616      	mov	r6, r2
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	e7bc      	b.n	800684e <_printf_i+0x14a>
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	2100      	movs	r1, #0
 80068d8:	1d1a      	adds	r2, r3, #4
 80068da:	6032      	str	r2, [r6, #0]
 80068dc:	681e      	ldr	r6, [r3, #0]
 80068de:	6862      	ldr	r2, [r4, #4]
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 f99f 	bl	8006c24 <memchr>
 80068e6:	b108      	cbz	r0, 80068ec <_printf_i+0x1e8>
 80068e8:	1b80      	subs	r0, r0, r6
 80068ea:	6060      	str	r0, [r4, #4]
 80068ec:	6863      	ldr	r3, [r4, #4]
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	2300      	movs	r3, #0
 80068f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f6:	e7aa      	b.n	800684e <_printf_i+0x14a>
 80068f8:	4632      	mov	r2, r6
 80068fa:	4649      	mov	r1, r9
 80068fc:	4640      	mov	r0, r8
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	47d0      	blx	sl
 8006902:	3001      	adds	r0, #1
 8006904:	d0ad      	beq.n	8006862 <_printf_i+0x15e>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	079b      	lsls	r3, r3, #30
 800690a:	d413      	bmi.n	8006934 <_printf_i+0x230>
 800690c:	68e0      	ldr	r0, [r4, #12]
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	4298      	cmp	r0, r3
 8006912:	bfb8      	it	lt
 8006914:	4618      	movlt	r0, r3
 8006916:	e7a6      	b.n	8006866 <_printf_i+0x162>
 8006918:	2301      	movs	r3, #1
 800691a:	4632      	mov	r2, r6
 800691c:	4649      	mov	r1, r9
 800691e:	4640      	mov	r0, r8
 8006920:	47d0      	blx	sl
 8006922:	3001      	adds	r0, #1
 8006924:	d09d      	beq.n	8006862 <_printf_i+0x15e>
 8006926:	3501      	adds	r5, #1
 8006928:	68e3      	ldr	r3, [r4, #12]
 800692a:	9903      	ldr	r1, [sp, #12]
 800692c:	1a5b      	subs	r3, r3, r1
 800692e:	42ab      	cmp	r3, r5
 8006930:	dcf2      	bgt.n	8006918 <_printf_i+0x214>
 8006932:	e7eb      	b.n	800690c <_printf_i+0x208>
 8006934:	2500      	movs	r5, #0
 8006936:	f104 0619 	add.w	r6, r4, #25
 800693a:	e7f5      	b.n	8006928 <_printf_i+0x224>
 800693c:	08006e9f 	.word	0x08006e9f
 8006940:	08006eb0 	.word	0x08006eb0

08006944 <__sflush_r>:
 8006944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	0716      	lsls	r6, r2, #28
 800694c:	4605      	mov	r5, r0
 800694e:	460c      	mov	r4, r1
 8006950:	d454      	bmi.n	80069fc <__sflush_r+0xb8>
 8006952:	684b      	ldr	r3, [r1, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	dc02      	bgt.n	800695e <__sflush_r+0x1a>
 8006958:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	dd48      	ble.n	80069f0 <__sflush_r+0xac>
 800695e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006960:	2e00      	cmp	r6, #0
 8006962:	d045      	beq.n	80069f0 <__sflush_r+0xac>
 8006964:	2300      	movs	r3, #0
 8006966:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800696a:	682f      	ldr	r7, [r5, #0]
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	602b      	str	r3, [r5, #0]
 8006970:	d030      	beq.n	80069d4 <__sflush_r+0x90>
 8006972:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	0759      	lsls	r1, r3, #29
 8006978:	d505      	bpl.n	8006986 <__sflush_r+0x42>
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006980:	b10b      	cbz	r3, 8006986 <__sflush_r+0x42>
 8006982:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006984:	1ad2      	subs	r2, r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	4628      	mov	r0, r5
 800698a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800698c:	6a21      	ldr	r1, [r4, #32]
 800698e:	47b0      	blx	r6
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	d106      	bne.n	80069a4 <__sflush_r+0x60>
 8006996:	6829      	ldr	r1, [r5, #0]
 8006998:	291d      	cmp	r1, #29
 800699a:	d82b      	bhi.n	80069f4 <__sflush_r+0xb0>
 800699c:	4a28      	ldr	r2, [pc, #160]	@ (8006a40 <__sflush_r+0xfc>)
 800699e:	410a      	asrs	r2, r1
 80069a0:	07d6      	lsls	r6, r2, #31
 80069a2:	d427      	bmi.n	80069f4 <__sflush_r+0xb0>
 80069a4:	2200      	movs	r2, #0
 80069a6:	6062      	str	r2, [r4, #4]
 80069a8:	6922      	ldr	r2, [r4, #16]
 80069aa:	04d9      	lsls	r1, r3, #19
 80069ac:	6022      	str	r2, [r4, #0]
 80069ae:	d504      	bpl.n	80069ba <__sflush_r+0x76>
 80069b0:	1c42      	adds	r2, r0, #1
 80069b2:	d101      	bne.n	80069b8 <__sflush_r+0x74>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b903      	cbnz	r3, 80069ba <__sflush_r+0x76>
 80069b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80069ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069bc:	602f      	str	r7, [r5, #0]
 80069be:	b1b9      	cbz	r1, 80069f0 <__sflush_r+0xac>
 80069c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069c4:	4299      	cmp	r1, r3
 80069c6:	d002      	beq.n	80069ce <__sflush_r+0x8a>
 80069c8:	4628      	mov	r0, r5
 80069ca:	f7ff fbf3 	bl	80061b4 <_free_r>
 80069ce:	2300      	movs	r3, #0
 80069d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80069d2:	e00d      	b.n	80069f0 <__sflush_r+0xac>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b0      	blx	r6
 80069da:	4602      	mov	r2, r0
 80069dc:	1c50      	adds	r0, r2, #1
 80069de:	d1c9      	bne.n	8006974 <__sflush_r+0x30>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0c6      	beq.n	8006974 <__sflush_r+0x30>
 80069e6:	2b1d      	cmp	r3, #29
 80069e8:	d001      	beq.n	80069ee <__sflush_r+0xaa>
 80069ea:	2b16      	cmp	r3, #22
 80069ec:	d11d      	bne.n	8006a2a <__sflush_r+0xe6>
 80069ee:	602f      	str	r7, [r5, #0]
 80069f0:	2000      	movs	r0, #0
 80069f2:	e021      	b.n	8006a38 <__sflush_r+0xf4>
 80069f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069f8:	b21b      	sxth	r3, r3
 80069fa:	e01a      	b.n	8006a32 <__sflush_r+0xee>
 80069fc:	690f      	ldr	r7, [r1, #16]
 80069fe:	2f00      	cmp	r7, #0
 8006a00:	d0f6      	beq.n	80069f0 <__sflush_r+0xac>
 8006a02:	0793      	lsls	r3, r2, #30
 8006a04:	bf18      	it	ne
 8006a06:	2300      	movne	r3, #0
 8006a08:	680e      	ldr	r6, [r1, #0]
 8006a0a:	bf08      	it	eq
 8006a0c:	694b      	ldreq	r3, [r1, #20]
 8006a0e:	1bf6      	subs	r6, r6, r7
 8006a10:	600f      	str	r7, [r1, #0]
 8006a12:	608b      	str	r3, [r1, #8]
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	ddeb      	ble.n	80069f0 <__sflush_r+0xac>
 8006a18:	4633      	mov	r3, r6
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	6a21      	ldr	r1, [r4, #32]
 8006a20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006a24:	47e0      	blx	ip
 8006a26:	2800      	cmp	r0, #0
 8006a28:	dc07      	bgt.n	8006a3a <__sflush_r+0xf6>
 8006a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a32:	f04f 30ff 	mov.w	r0, #4294967295
 8006a36:	81a3      	strh	r3, [r4, #12]
 8006a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3a:	4407      	add	r7, r0
 8006a3c:	1a36      	subs	r6, r6, r0
 8006a3e:	e7e9      	b.n	8006a14 <__sflush_r+0xd0>
 8006a40:	dfbffffe 	.word	0xdfbffffe

08006a44 <_fflush_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	690b      	ldr	r3, [r1, #16]
 8006a48:	4605      	mov	r5, r0
 8006a4a:	460c      	mov	r4, r1
 8006a4c:	b913      	cbnz	r3, 8006a54 <_fflush_r+0x10>
 8006a4e:	2500      	movs	r5, #0
 8006a50:	4628      	mov	r0, r5
 8006a52:	bd38      	pop	{r3, r4, r5, pc}
 8006a54:	b118      	cbz	r0, 8006a5e <_fflush_r+0x1a>
 8006a56:	6a03      	ldr	r3, [r0, #32]
 8006a58:	b90b      	cbnz	r3, 8006a5e <_fflush_r+0x1a>
 8006a5a:	f7ff f9a9 	bl	8005db0 <__sinit>
 8006a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f3      	beq.n	8006a4e <_fflush_r+0xa>
 8006a66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a68:	07d0      	lsls	r0, r2, #31
 8006a6a:	d404      	bmi.n	8006a76 <_fflush_r+0x32>
 8006a6c:	0599      	lsls	r1, r3, #22
 8006a6e:	d402      	bmi.n	8006a76 <_fflush_r+0x32>
 8006a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a72:	f7ff fb9c 	bl	80061ae <__retarget_lock_acquire_recursive>
 8006a76:	4628      	mov	r0, r5
 8006a78:	4621      	mov	r1, r4
 8006a7a:	f7ff ff63 	bl	8006944 <__sflush_r>
 8006a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a80:	4605      	mov	r5, r0
 8006a82:	07da      	lsls	r2, r3, #31
 8006a84:	d4e4      	bmi.n	8006a50 <_fflush_r+0xc>
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	059b      	lsls	r3, r3, #22
 8006a8a:	d4e1      	bmi.n	8006a50 <_fflush_r+0xc>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8e:	f7ff fb8f 	bl	80061b0 <__retarget_lock_release_recursive>
 8006a92:	e7dd      	b.n	8006a50 <_fflush_r+0xc>

08006a94 <__swhatbuf_r>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9c:	4615      	mov	r5, r2
 8006a9e:	2900      	cmp	r1, #0
 8006aa0:	461e      	mov	r6, r3
 8006aa2:	b096      	sub	sp, #88	@ 0x58
 8006aa4:	da0c      	bge.n	8006ac0 <__swhatbuf_r+0x2c>
 8006aa6:	89a3      	ldrh	r3, [r4, #12]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aae:	bf14      	ite	ne
 8006ab0:	2340      	movne	r3, #64	@ 0x40
 8006ab2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	6031      	str	r1, [r6, #0]
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	b016      	add	sp, #88	@ 0x58
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	466a      	mov	r2, sp
 8006ac2:	f000 f87d 	bl	8006bc0 <_fstat_r>
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	dbed      	blt.n	8006aa6 <__swhatbuf_r+0x12>
 8006aca:	9901      	ldr	r1, [sp, #4]
 8006acc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ad0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ad4:	4259      	negs	r1, r3
 8006ad6:	4159      	adcs	r1, r3
 8006ad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006adc:	e7eb      	b.n	8006ab6 <__swhatbuf_r+0x22>

08006ade <__smakebuf_r>:
 8006ade:	898b      	ldrh	r3, [r1, #12]
 8006ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae2:	079d      	lsls	r5, r3, #30
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	d507      	bpl.n	8006afa <__smakebuf_r+0x1c>
 8006aea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	2301      	movs	r3, #1
 8006af4:	6163      	str	r3, [r4, #20]
 8006af6:	b003      	add	sp, #12
 8006af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afa:	466a      	mov	r2, sp
 8006afc:	ab01      	add	r3, sp, #4
 8006afe:	f7ff ffc9 	bl	8006a94 <__swhatbuf_r>
 8006b02:	9f00      	ldr	r7, [sp, #0]
 8006b04:	4605      	mov	r5, r0
 8006b06:	4639      	mov	r1, r7
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff fbbd 	bl	8006288 <_malloc_r>
 8006b0e:	b948      	cbnz	r0, 8006b24 <__smakebuf_r+0x46>
 8006b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b14:	059a      	lsls	r2, r3, #22
 8006b16:	d4ee      	bmi.n	8006af6 <__smakebuf_r+0x18>
 8006b18:	f023 0303 	bic.w	r3, r3, #3
 8006b1c:	f043 0302 	orr.w	r3, r3, #2
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7e2      	b.n	8006aea <__smakebuf_r+0xc>
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	9b01      	ldr	r3, [sp, #4]
 8006b32:	6020      	str	r0, [r4, #0]
 8006b34:	b15b      	cbz	r3, 8006b4e <__smakebuf_r+0x70>
 8006b36:	4630      	mov	r0, r6
 8006b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b3c:	f000 f852 	bl	8006be4 <_isatty_r>
 8006b40:	b128      	cbz	r0, 8006b4e <__smakebuf_r+0x70>
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	f023 0303 	bic.w	r3, r3, #3
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	89a3      	ldrh	r3, [r4, #12]
 8006b50:	431d      	orrs	r5, r3
 8006b52:	81a5      	strh	r5, [r4, #12]
 8006b54:	e7cf      	b.n	8006af6 <__smakebuf_r+0x18>

08006b56 <_putc_r>:
 8006b56:	b570      	push	{r4, r5, r6, lr}
 8006b58:	460d      	mov	r5, r1
 8006b5a:	4614      	mov	r4, r2
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	b118      	cbz	r0, 8006b68 <_putc_r+0x12>
 8006b60:	6a03      	ldr	r3, [r0, #32]
 8006b62:	b90b      	cbnz	r3, 8006b68 <_putc_r+0x12>
 8006b64:	f7ff f924 	bl	8005db0 <__sinit>
 8006b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b6a:	07d8      	lsls	r0, r3, #31
 8006b6c:	d405      	bmi.n	8006b7a <_putc_r+0x24>
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	0599      	lsls	r1, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_putc_r+0x24>
 8006b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b76:	f7ff fb1a 	bl	80061ae <__retarget_lock_acquire_recursive>
 8006b7a:	68a3      	ldr	r3, [r4, #8]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	da05      	bge.n	8006b90 <_putc_r+0x3a>
 8006b84:	69a2      	ldr	r2, [r4, #24]
 8006b86:	4293      	cmp	r3, r2
 8006b88:	db12      	blt.n	8006bb0 <_putc_r+0x5a>
 8006b8a:	b2eb      	uxtb	r3, r5
 8006b8c:	2b0a      	cmp	r3, #10
 8006b8e:	d00f      	beq.n	8006bb0 <_putc_r+0x5a>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	701d      	strb	r5, [r3, #0]
 8006b98:	b2ed      	uxtb	r5, r5
 8006b9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b9c:	07da      	lsls	r2, r3, #31
 8006b9e:	d405      	bmi.n	8006bac <_putc_r+0x56>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	059b      	lsls	r3, r3, #22
 8006ba4:	d402      	bmi.n	8006bac <_putc_r+0x56>
 8006ba6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ba8:	f7ff fb02 	bl	80061b0 <__retarget_lock_release_recursive>
 8006bac:	4628      	mov	r0, r5
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7ff f9ec 	bl	8005f92 <__swbuf_r>
 8006bba:	4605      	mov	r5, r0
 8006bbc:	e7ed      	b.n	8006b9a <_putc_r+0x44>
	...

08006bc0 <_fstat_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4d06      	ldr	r5, [pc, #24]	@ (8006be0 <_fstat_r+0x20>)
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	f7fa fb2d 	bl	800122c <_fstat>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d102      	bne.n	8006bdc <_fstat_r+0x1c>
 8006bd6:	682b      	ldr	r3, [r5, #0]
 8006bd8:	b103      	cbz	r3, 8006bdc <_fstat_r+0x1c>
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	bd38      	pop	{r3, r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	200003e4 	.word	0x200003e4

08006be4 <_isatty_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	2300      	movs	r3, #0
 8006be8:	4d05      	ldr	r5, [pc, #20]	@ (8006c00 <_isatty_r+0x1c>)
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fa fb2b 	bl	800124a <_isatty>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_isatty_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_isatty_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200003e4 	.word	0x200003e4

08006c04 <_sbrk_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	2300      	movs	r3, #0
 8006c08:	4d05      	ldr	r5, [pc, #20]	@ (8006c20 <_sbrk_r+0x1c>)
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4608      	mov	r0, r1
 8006c0e:	602b      	str	r3, [r5, #0]
 8006c10:	f7fa fb32 	bl	8001278 <_sbrk>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_sbrk_r+0x1a>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_sbrk_r+0x1a>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	200003e4 	.word	0x200003e4

08006c24 <memchr>:
 8006c24:	4603      	mov	r3, r0
 8006c26:	b510      	push	{r4, lr}
 8006c28:	b2c9      	uxtb	r1, r1
 8006c2a:	4402      	add	r2, r0
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	d101      	bne.n	8006c36 <memchr+0x12>
 8006c32:	2000      	movs	r0, #0
 8006c34:	e003      	b.n	8006c3e <memchr+0x1a>
 8006c36:	7804      	ldrb	r4, [r0, #0]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	428c      	cmp	r4, r1
 8006c3c:	d1f6      	bne.n	8006c2c <memchr+0x8>
 8006c3e:	bd10      	pop	{r4, pc}

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
