
FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003378  08003378  00004378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003470  08003470  00005020  2**0
                  CONTENTS
  4 .ARM          00000008  08003470  08003470  00004470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003478  08003478  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003478  08003478  00004478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800347c  0800347c  0000447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08003480  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000020  080034a0  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080034a0  00005124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b02  00000000  00000000  00005049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fb  00000000  00000000  0000db4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0000f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000758  00000000  00000000  0000fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001724a  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf7b  00000000  00000000  0002787a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008413c  00000000  00000000  000337f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7931  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  000b7974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ba03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003360 	.word	0x08003360

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003360 	.word	0x08003360

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b086      	sub	sp, #24
 8000164:	af02      	add	r7, sp, #8
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
   uint8_t data_t[4];
   data_u = (cmd&0xf0);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	f023 030f 	bic.w	r3, r3, #15
 8000170:	73fb      	strb	r3, [r7, #15]
   data_l = ((cmd<<4)&0xf0);
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	011b      	lsls	r3, r3, #4
 8000176:	73bb      	strb	r3, [r7, #14]
   data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000178:	7bfb      	ldrb	r3, [r7, #15]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	723b      	strb	r3, [r7, #8]
   data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000182:	7bfb      	ldrb	r3, [r7, #15]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	727b      	strb	r3, [r7, #9]
   data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 800018c:	7bbb      	ldrb	r3, [r7, #14]
 800018e:	f043 030c 	orr.w	r3, r3, #12
 8000192:	b2db      	uxtb	r3, r3
 8000194:	72bb      	strb	r3, [r7, #10]
   data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000196:	7bbb      	ldrb	r3, [r7, #14]
 8000198:	f043 0308 	orr.w	r3, r3, #8
 800019c:	b2db      	uxtb	r3, r3
 800019e:	72fb      	strb	r3, [r7, #11]
   HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001a0:	f107 0208 	add.w	r2, r7, #8
 80001a4:	2364      	movs	r3, #100	@ 0x64
 80001a6:	9300      	str	r3, [sp, #0]
 80001a8:	2304      	movs	r3, #4
 80001aa:	214e      	movs	r1, #78	@ 0x4e
 80001ac:	4803      	ldr	r0, [pc, #12]	@ (80001bc <lcd_send_cmd+0x5c>)
 80001ae:	f001 fe6f 	bl	8001e90 <HAL_I2C_Master_Transmit>
}
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	2000003c 	.word	0x2000003c

080001c0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
   char data_u, data_l;
   uint8_t data_t[4];
   data_u = (data&0xf0);
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	f023 030f 	bic.w	r3, r3, #15
 80001d0:	73fb      	strb	r3, [r7, #15]
   data_l = ((data<<4)&0xf0);
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	011b      	lsls	r3, r3, #4
 80001d6:	73bb      	strb	r3, [r7, #14]
   data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	723b      	strb	r3, [r7, #8]
   data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80001e2:	7bfb      	ldrb	r3, [r7, #15]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	727b      	strb	r3, [r7, #9]
   data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	f043 030d 	orr.w	r3, r3, #13
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	72bb      	strb	r3, [r7, #10]
   data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80001f6:	7bbb      	ldrb	r3, [r7, #14]
 80001f8:	f043 0309 	orr.w	r3, r3, #9
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	72fb      	strb	r3, [r7, #11]
   HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000200:	f107 0208 	add.w	r2, r7, #8
 8000204:	2364      	movs	r3, #100	@ 0x64
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2304      	movs	r3, #4
 800020a:	214e      	movs	r1, #78	@ 0x4e
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <lcd_send_data+0x5c>)
 800020e:	f001 fe3f 	bl	8001e90 <HAL_I2C_Master_Transmit>
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	2000003c 	.word	0x2000003c

08000220 <lcd_clear>:

void lcd_clear (void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
   lcd_send_cmd (0x80);
 8000226:	2080      	movs	r0, #128	@ 0x80
 8000228:	f7ff ff9a 	bl	8000160 <lcd_send_cmd>
   for (int i=0; i<70; i++)
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e005      	b.n	800023e <lcd_clear+0x1e>
   {
      lcd_send_data (' ');
 8000232:	2020      	movs	r0, #32
 8000234:	f7ff ffc4 	bl	80001c0 <lcd_send_data>
   for (int i=0; i<70; i++)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	3301      	adds	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b45      	cmp	r3, #69	@ 0x45
 8000242:	ddf6      	ble.n	8000232 <lcd_clear+0x12>
   }
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	b082      	sub	sp, #8
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
 8000256:	6039      	str	r1, [r7, #0]
    switch (row)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d003      	beq.n	8000266 <lcd_put_cur+0x18>
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d005      	beq.n	8000270 <lcd_put_cur+0x22>
 8000264:	e009      	b.n	800027a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800026c:	603b      	str	r3, [r7, #0]
            break;
 800026e:	e004      	b.n	800027a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000276:	603b      	str	r3, [r7, #0]
            break;
 8000278:	bf00      	nop
    }

    lcd_send_cmd (col);
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	b2db      	uxtb	r3, r3
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff6e 	bl	8000160 <lcd_send_cmd>
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <lcd_init>:


void lcd_init (void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
   // 4 bit initialisation
   HAL_Delay(50);  // wait for >40ms
 8000290:	2032      	movs	r0, #50	@ 0x32
 8000292:	f001 f9a3 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x30);
 8000296:	2030      	movs	r0, #48	@ 0x30
 8000298:	f7ff ff62 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(5);  // wait for >4.1ms
 800029c:	2005      	movs	r0, #5
 800029e:	f001 f99d 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x30);
 80002a2:	2030      	movs	r0, #48	@ 0x30
 80002a4:	f7ff ff5c 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(1);  // wait for >100us
 80002a8:	2001      	movs	r0, #1
 80002aa:	f001 f997 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x30);
 80002ae:	2030      	movs	r0, #48	@ 0x30
 80002b0:	f7ff ff56 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(10);
 80002b4:	200a      	movs	r0, #10
 80002b6:	f001 f991 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x20);  // 4bit mode
 80002ba:	2020      	movs	r0, #32
 80002bc:	f7ff ff50 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f001 f98b 	bl	80015dc <HAL_Delay>

  // dislay initialisation
   lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002c6:	2028      	movs	r0, #40	@ 0x28
 80002c8:	f7ff ff4a 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f001 f985 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002d2:	2008      	movs	r0, #8
 80002d4:	f7ff ff44 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f001 f97f 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x01);  // clear display
 80002de:	2001      	movs	r0, #1
 80002e0:	f7ff ff3e 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(1);
 80002e4:	2001      	movs	r0, #1
 80002e6:	f001 f979 	bl	80015dc <HAL_Delay>
   HAL_Delay(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f001 f976 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002f0:	2006      	movs	r0, #6
 80002f2:	f7ff ff35 	bl	8000160 <lcd_send_cmd>
   HAL_Delay(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f001 f970 	bl	80015dc <HAL_Delay>
   lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002fc:	200c      	movs	r0, #12
 80002fe:	f7ff ff2f 	bl	8000160 <lcd_send_cmd>
}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}

08000306 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b082      	sub	sp, #8
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
   while (*str) lcd_send_data (*str++);
 800030e:	e006      	b.n	800031e <lcd_send_string+0x18>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	607a      	str	r2, [r7, #4]
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff51 	bl	80001c0 <lcd_send_data>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d1f4      	bne.n	8000310 <lcd_send_string+0xa>
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <checkpass>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

void checkpass(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
    if (strcmp(input, initial_password) == 0)
 8000334:	4930      	ldr	r1, [pc, #192]	@ (80003f8 <checkpass+0xc8>)
 8000336:	4831      	ldr	r0, [pc, #196]	@ (80003fc <checkpass+0xcc>)
 8000338:	f7ff ff08 	bl	800014c <strcmp>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d111      	bne.n	8000366 <checkpass+0x36>
               {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1 ); // Mở khóa cửa
 8000342:	2201      	movs	r2, #1
 8000344:	2120      	movs	r1, #32
 8000346:	482e      	ldr	r0, [pc, #184]	@ (8000400 <checkpass+0xd0>)
 8000348:	f001 fc15 	bl	8001b76 <HAL_GPIO_WritePin>
	            lcd_clear();
 800034c:	f7ff ff68 	bl	8000220 <lcd_clear>
	            lcd_put_cur(0, 0);
 8000350:	2100      	movs	r1, #0
 8000352:	2000      	movs	r0, #0
 8000354:	f7ff ff7b 	bl	800024e <lcd_put_cur>
	            lcd_send_string("MAT KHAU DUNG");
 8000358:	482a      	ldr	r0, [pc, #168]	@ (8000404 <checkpass+0xd4>)
 800035a:	f7ff ffd4 	bl	8000306 <lcd_send_string>
                HAL_Delay(100);
 800035e:	2064      	movs	r0, #100	@ 0x64
 8000360:	f001 f93c 	bl	80015dc <HAL_Delay>
 8000364:	e02d      	b.n	80003c2 <checkpass+0x92>
//              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1 );}
                }

	        else
	           {
	            lcd_clear();
 8000366:	f7ff ff5b 	bl	8000220 <lcd_clear>
	            lcd_put_cur(0, 0);
 800036a:	2100      	movs	r1, #0
 800036c:	2000      	movs	r0, #0
 800036e:	f7ff ff6e 	bl	800024e <lcd_put_cur>
	            lcd_send_string("MAT KHAU SAI") ;
 8000372:	4825      	ldr	r0, [pc, #148]	@ (8000408 <checkpass+0xd8>)
 8000374:	f7ff ffc7 	bl	8000306 <lcd_send_string>
	            input[0]= input[1]=input[2]=input[3]=input[4]=input[5]= 48;
 8000378:	4b20      	ldr	r3, [pc, #128]	@ (80003fc <checkpass+0xcc>)
 800037a:	2230      	movs	r2, #48	@ 0x30
 800037c:	715a      	strb	r2, [r3, #5]
 800037e:	4b1f      	ldr	r3, [pc, #124]	@ (80003fc <checkpass+0xcc>)
 8000380:	795a      	ldrb	r2, [r3, #5]
 8000382:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <checkpass+0xcc>)
 8000384:	711a      	strb	r2, [r3, #4]
 8000386:	4b1d      	ldr	r3, [pc, #116]	@ (80003fc <checkpass+0xcc>)
 8000388:	791a      	ldrb	r2, [r3, #4]
 800038a:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <checkpass+0xcc>)
 800038c:	70da      	strb	r2, [r3, #3]
 800038e:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <checkpass+0xcc>)
 8000390:	78da      	ldrb	r2, [r3, #3]
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <checkpass+0xcc>)
 8000394:	709a      	strb	r2, [r3, #2]
 8000396:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <checkpass+0xcc>)
 8000398:	789a      	ldrb	r2, [r3, #2]
 800039a:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <checkpass+0xcc>)
 800039c:	705a      	strb	r2, [r3, #1]
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <checkpass+0xcc>)
 80003a0:	785a      	ldrb	r2, [r3, #1]
 80003a2:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <checkpass+0xcc>)
 80003a4:	701a      	strb	r2, [r3, #0]
	            HAL_Delay(2000);
 80003a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003aa:	f001 f917 	bl	80015dc <HAL_Delay>
	            if ( keyPressed != 65){attempt++;}
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <checkpass+0xdc>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b41      	cmp	r3, #65	@ 0x41
 80003b4:	d005      	beq.n	80003c2 <checkpass+0x92>
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <checkpass+0xe0>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <checkpass+0xe0>)
 80003c0:	701a      	strb	r2, [r3, #0]
	            }

	            if (attempt >= 5)
 80003c2:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <checkpass+0xe0>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	d910      	bls.n	80003ec <checkpass+0xbc>
	            {   lcd_clear();
 80003ca:	f7ff ff29 	bl	8000220 <lcd_clear>
                    lcd_put_cur(0, 0);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff ff3c 	bl	800024e <lcd_put_cur>
                    lcd_send_string("KHOA 5 PHUT");
 80003d6:	480f      	ldr	r0, [pc, #60]	@ (8000414 <checkpass+0xe4>)
 80003d8:	f7ff ff95 	bl	8000306 <lcd_send_string>
	                HAL_Delay(10000); // Khóa 10s
 80003dc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80003e0:	f001 f8fc 	bl	80015dc <HAL_Delay>
	                attempt = 0;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <checkpass+0xe0>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	            else
	            {
	                HAL_Delay(1000); // Delay 1 giây
	            }

}
 80003ea:	e003      	b.n	80003f4 <checkpass+0xc4>
	                HAL_Delay(1000); // Delay 1 giây
 80003ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003f0:	f001 f8f4 	bl	80015dc <HAL_Delay>
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	2000000c 	.word	0x2000000c
 80003fc:	20000004 	.word	0x20000004
 8000400:	40010c00 	.word	0x40010c00
 8000404:	08003378 	.word	0x08003378
 8000408:	08003388 	.word	0x08003388
 800040c:	2000011c 	.word	0x2000011c
 8000410:	20000101 	.word	0x20000101
 8000414:	08003398 	.word	0x08003398

08000418 <loop>:

void loop(){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
        if(Mode == true ){
 800041e:	4b8c      	ldr	r3, [pc, #560]	@ (8000650 <loop+0x238>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	f000 80a2 	beq.w	800056c <loop+0x154>
      	  lcd_clear();
 8000428:	f7ff fefa 	bl	8000220 <lcd_clear>
      	  	  	  	    	        lcd_put_cur(0, 0);  // Dat con tro len dong 1
 800042c:	2100      	movs	r1, #0
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff ff0d 	bl	800024e <lcd_put_cur>
      	  	  	  	    	        lcd_send_string("KHOA DANG DONG");
 8000434:	4887      	ldr	r0, [pc, #540]	@ (8000654 <loop+0x23c>)
 8000436:	f7ff ff66 	bl	8000306 <lcd_send_string>
      	  	  	  	    	        lcd_put_cur(1, 0);  // Dat con tro len dong 2
 800043a:	2100      	movs	r1, #0
 800043c:	2001      	movs	r0, #1
 800043e:	f7ff ff06 	bl	800024e <lcd_put_cur>
      	  	  	  	    	        lcd_send_string("NHAP MA THE RFID");
 8000442:	4885      	ldr	r0, [pc, #532]	@ (8000658 <loop+0x240>)
 8000444:	f7ff ff5f 	bl	8000306 <lcd_send_string>
      	  	  	  	    	        HAL_Delay(1000);
 8000448:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800044c:	f001 f8c6 	bl	80015dc <HAL_Delay>

      	  status = MFRC522_Request(PICC_REQIDL, str);
 8000450:	4982      	ldr	r1, [pc, #520]	@ (800065c <loop+0x244>)
 8000452:	2026      	movs	r0, #38	@ 0x26
 8000454:	f000 fed3 	bl	80011fe <MFRC522_Request>
 8000458:	4603      	mov	r3, r0
 800045a:	461a      	mov	r2, r3
 800045c:	4b80      	ldr	r3, [pc, #512]	@ (8000660 <loop+0x248>)
 800045e:	701a      	strb	r2, [r3, #0]
      	  status = MFRC522_Anticoll(str);
 8000460:	487e      	ldr	r0, [pc, #504]	@ (800065c <loop+0x244>)
 8000462:	f000 fef1 	bl	8001248 <MFRC522_Anticoll>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	4b7d      	ldr	r3, [pc, #500]	@ (8000660 <loop+0x248>)
 800046c:	701a      	strb	r2, [r3, #0]
      	  memcpy(CARDID, str, 5);
 800046e:	4b7d      	ldr	r3, [pc, #500]	@ (8000664 <loop+0x24c>)
 8000470:	4a7a      	ldr	r2, [pc, #488]	@ (800065c <loop+0x244>)
 8000472:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000476:	6018      	str	r0, [r3, #0]
 8000478:	3304      	adds	r3, #4
 800047a:	7019      	strb	r1, [r3, #0]
//      	  HAL_Delay(100);

        if (status == MI_OK) {
 800047c:	4b78      	ldr	r3, [pc, #480]	@ (8000660 <loop+0x248>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d173      	bne.n	800056c <loop+0x154>
  	  if((str[0]==59) && (str[1]==3) && (str[2]==123) && (str[3]==135) && (str[4]==196) )
 8000484:	4b75      	ldr	r3, [pc, #468]	@ (800065c <loop+0x244>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b3b      	cmp	r3, #59	@ 0x3b
 800048a:	d127      	bne.n	80004dc <loop+0xc4>
 800048c:	4b73      	ldr	r3, [pc, #460]	@ (800065c <loop+0x244>)
 800048e:	785b      	ldrb	r3, [r3, #1]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d123      	bne.n	80004dc <loop+0xc4>
 8000494:	4b71      	ldr	r3, [pc, #452]	@ (800065c <loop+0x244>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b7b      	cmp	r3, #123	@ 0x7b
 800049a:	d11f      	bne.n	80004dc <loop+0xc4>
 800049c:	4b6f      	ldr	r3, [pc, #444]	@ (800065c <loop+0x244>)
 800049e:	78db      	ldrb	r3, [r3, #3]
 80004a0:	2b87      	cmp	r3, #135	@ 0x87
 80004a2:	d11b      	bne.n	80004dc <loop+0xc4>
 80004a4:	4b6d      	ldr	r3, [pc, #436]	@ (800065c <loop+0x244>)
 80004a6:	791b      	ldrb	r3, [r3, #4]
 80004a8:	2bc4      	cmp	r3, #196	@ 0xc4
 80004aa:	d117      	bne.n	80004dc <loop+0xc4>
  	  	  	     {
  	  	  	    	 lcd_clear();
 80004ac:	f7ff feb8 	bl	8000220 <lcd_clear>
  	  	  	    	                  lcd_put_cur(0, 0);  // Dat con tro len dong 1
 80004b0:	2100      	movs	r1, #0
 80004b2:	2000      	movs	r0, #0
 80004b4:	f7ff fecb 	bl	800024e <lcd_put_cur>
  	  	  	    	                  lcd_send_string("MA THE HOP LE 1");
 80004b8:	486b      	ldr	r0, [pc, #428]	@ (8000668 <loop+0x250>)
 80004ba:	f7ff ff24 	bl	8000306 <lcd_send_string>
  	  	  	    	                  lcd_put_cur(1, 0);  // Dat con tro len dong 2
 80004be:	2100      	movs	r1, #0
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff fec4 	bl	800024e <lcd_put_cur>
  	  	  	    	                  lcd_send_string("MSSV: 20240000");
 80004c6:	4869      	ldr	r0, [pc, #420]	@ (800066c <loop+0x254>)
 80004c8:	f7ff ff1d 	bl	8000306 <lcd_send_string>
  	  	  	    	                  HAL_Delay(2000);
 80004cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004d0:	f001 f884 	bl	80015dc <HAL_Delay>

	  	  	    	                  Mode = false;
 80004d4:	4b5e      	ldr	r3, [pc, #376]	@ (8000650 <loop+0x238>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	e047      	b.n	800056c <loop+0x154>
  	  	  	       }
  	  else if((str[0]==175) && (str[1]==11) && (str[2]==51) && (str[3]==31) && (str[4]==136) )
 80004dc:	4b5f      	ldr	r3, [pc, #380]	@ (800065c <loop+0x244>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2baf      	cmp	r3, #175	@ 0xaf
 80004e2:	d127      	bne.n	8000534 <loop+0x11c>
 80004e4:	4b5d      	ldr	r3, [pc, #372]	@ (800065c <loop+0x244>)
 80004e6:	785b      	ldrb	r3, [r3, #1]
 80004e8:	2b0b      	cmp	r3, #11
 80004ea:	d123      	bne.n	8000534 <loop+0x11c>
 80004ec:	4b5b      	ldr	r3, [pc, #364]	@ (800065c <loop+0x244>)
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	2b33      	cmp	r3, #51	@ 0x33
 80004f2:	d11f      	bne.n	8000534 <loop+0x11c>
 80004f4:	4b59      	ldr	r3, [pc, #356]	@ (800065c <loop+0x244>)
 80004f6:	78db      	ldrb	r3, [r3, #3]
 80004f8:	2b1f      	cmp	r3, #31
 80004fa:	d11b      	bne.n	8000534 <loop+0x11c>
 80004fc:	4b57      	ldr	r3, [pc, #348]	@ (800065c <loop+0x244>)
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b88      	cmp	r3, #136	@ 0x88
 8000502:	d117      	bne.n	8000534 <loop+0x11c>
  	  	  	       {
  	  	  	    	 lcd_clear();
 8000504:	f7ff fe8c 	bl	8000220 <lcd_clear>
  	  	  	    		    	      lcd_put_cur(0, 0);  // Dat con tro len dong 1
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fe9f 	bl	800024e <lcd_put_cur>
  	  	  	    		    	      lcd_send_string("MA THE HOP LE 2 ");
 8000510:	4857      	ldr	r0, [pc, #348]	@ (8000670 <loop+0x258>)
 8000512:	f7ff fef8 	bl	8000306 <lcd_send_string>
  	  	  	    		    	      lcd_put_cur(1, 0);  // Dat con tro len dong 2
 8000516:	2100      	movs	r1, #0
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff fe98 	bl	800024e <lcd_put_cur>
  	  	  	    		    	      lcd_send_string("MSSV: 20240001");
 800051e:	4855      	ldr	r0, [pc, #340]	@ (8000674 <loop+0x25c>)
 8000520:	f7ff fef1 	bl	8000306 <lcd_send_string>
  	  	  	    		    	      HAL_Delay(2000);
 8000524:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000528:	f001 f858 	bl	80015dc <HAL_Delay>

 	  	  	    		    	 	  Mode = false;
 800052c:	4b48      	ldr	r3, [pc, #288]	@ (8000650 <loop+0x238>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e01b      	b.n	800056c <loop+0x154>
  	  	  	     }
  	  	  	     else
  	  	  	     {   lcd_clear();
 8000534:	f7ff fe74 	bl	8000220 <lcd_clear>
  	  	  	    	                  lcd_put_cur(0, 0);  // Dat con tro len dong 1
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff fe87 	bl	800024e <lcd_put_cur>
  	  	  	    	                  lcd_send_string("MA THE SAI");
 8000540:	484d      	ldr	r0, [pc, #308]	@ (8000678 <loop+0x260>)
 8000542:	f7ff fee0 	bl	8000306 <lcd_send_string>
  	  	  	    	                  lcd_put_cur(1, 0);  // Dat con tro len dong 2
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f7ff fe80 	bl	800024e <lcd_put_cur>
  	  	  	    	                  lcd_send_string("YEU CAU NHAP LAI");
 800054e:	484b      	ldr	r0, [pc, #300]	@ (800067c <loop+0x264>)
 8000550:	f7ff fed9 	bl	8000306 <lcd_send_string>
  	  	  	    	                  HAL_Delay(1000);
 8000554:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000558:	f001 f840 	bl	80015dc <HAL_Delay>
  	  	  	    	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800055c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000560:	4847      	ldr	r0, [pc, #284]	@ (8000680 <loop+0x268>)
 8000562:	f001 fb20 	bl	8001ba6 <HAL_GPIO_TogglePin>
  	  	  	    	 HAL_Delay(200);
 8000566:	20c8      	movs	r0, #200	@ 0xc8
 8000568:	f001 f838 	bl	80015dc <HAL_Delay>


        }

        }
        if (Mode == false){
 800056c:	4b38      	ldr	r3, [pc, #224]	@ (8000650 <loop+0x238>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f083 0301 	eor.w	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	f000 80d3 	beq.w	8000722 <loop+0x30a>
        	lcd_init();
 800057c:	f7ff fe86 	bl	800028c <lcd_init>

        	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000586:	483f      	ldr	r0, [pc, #252]	@ (8000684 <loop+0x26c>)
 8000588:	f001 faf5 	bl	8001b76 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000592:	483c      	ldr	r0, [pc, #240]	@ (8000684 <loop+0x26c>)
 8000594:	f001 faef 	bl	8001b76 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059e:	4839      	ldr	r0, [pc, #228]	@ (8000684 <loop+0x26c>)
 80005a0:	f001 fae9 	bl	8001b76 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005aa:	4836      	ldr	r0, [pc, #216]	@ (8000684 <loop+0x26c>)
 80005ac:	f001 fae3 	bl	8001b76 <HAL_GPIO_WritePin>

        	    lcd_clear();
 80005b0:	f7ff fe36 	bl	8000220 <lcd_clear>
        	    lcd_put_cur(0, 0);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff fe49 	bl	800024e <lcd_put_cur>
        	    lcd_send_string("NHAP MAT KHAU");
 80005bc:	4832      	ldr	r0, [pc, #200]	@ (8000688 <loop+0x270>)
 80005be:	f7ff fea2 	bl	8000306 <lcd_send_string>
        	    while (Mode == false)
 80005c2:	e0a6      	b.n	8000712 <loop+0x2fa>
        	      {
        	                       if ( keyPressed != 65)
 80005c4:	4b31      	ldr	r3, [pc, #196]	@ (800068c <loop+0x274>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b41      	cmp	r3, #65	@ 0x41
 80005ca:	d00c      	beq.n	80005e6 <loop+0x1ce>
        	                          { lcd_clear();
 80005cc:	f7ff fe28 	bl	8000220 <lcd_clear>
        	                            lcd_put_cur(0, 0);
 80005d0:	2100      	movs	r1, #0
 80005d2:	2000      	movs	r0, #0
 80005d4:	f7ff fe3b 	bl	800024e <lcd_put_cur>
        	                            lcd_send_string("NHAP MAT KHAU");
 80005d8:	482b      	ldr	r0, [pc, #172]	@ (8000688 <loop+0x270>)
 80005da:	f7ff fe94 	bl	8000306 <lcd_send_string>
        	                            HAL_Delay(1000);}
 80005de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e2:	f000 fffb 	bl	80015dc <HAL_Delay>

        	    	                    if(keyPressed == 51){input[0] = 51; }
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <loop+0x274>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b33      	cmp	r3, #51	@ 0x33
 80005ec:	d102      	bne.n	80005f4 <loop+0x1dc>
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <loop+0x278>)
 80005f0:	2233      	movs	r2, #51	@ 0x33
 80005f2:	701a      	strb	r2, [r3, #0]
        	    	                    if(keyPressed == 49){input[1] = input[2] = 49; }
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <loop+0x274>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b31      	cmp	r3, #49	@ 0x31
 80005fa:	d106      	bne.n	800060a <loop+0x1f2>
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <loop+0x278>)
 80005fe:	2231      	movs	r2, #49	@ 0x31
 8000600:	709a      	strb	r2, [r3, #2]
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <loop+0x278>)
 8000604:	789a      	ldrb	r2, [r3, #2]
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <loop+0x278>)
 8000608:	705a      	strb	r2, [r3, #1]
        	    	                    if(keyPressed == 55){input[3] = 55; }
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <loop+0x274>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b37      	cmp	r3, #55	@ 0x37
 8000610:	d102      	bne.n	8000618 <loop+0x200>
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <loop+0x278>)
 8000614:	2237      	movs	r2, #55	@ 0x37
 8000616:	70da      	strb	r2, [r3, #3]
        	    	                    if(keyPressed == 50){input[4] = 50; }
 8000618:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <loop+0x274>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b32      	cmp	r3, #50	@ 0x32
 800061e:	d102      	bne.n	8000626 <loop+0x20e>
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <loop+0x278>)
 8000622:	2232      	movs	r2, #50	@ 0x32
 8000624:	711a      	strb	r2, [r3, #4]
        	    	                    if(keyPressed == 52){input[5] = 52; }
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <loop+0x274>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b34      	cmp	r3, #52	@ 0x34
 800062c:	d102      	bne.n	8000634 <loop+0x21c>
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <loop+0x278>)
 8000630:	2234      	movs	r2, #52	@ 0x34
 8000632:	715a      	strb	r2, [r3, #5]

        	    	                    bool allDifferentFrom48 = true;
 8000634:	2301      	movs	r3, #1
 8000636:	71fb      	strb	r3, [r7, #7]
        	    	                    for (int i = 0; i < 6; i++) {
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	e02d      	b.n	800069a <loop+0x282>
        	    	                        if (input[i] == 48) {
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <loop+0x278>)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b30      	cmp	r3, #48	@ 0x30
 8000648:	d124      	bne.n	8000694 <loop+0x27c>
        	    	                            allDifferentFrom48 = false;
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
        	    	                            break;
 800064e:	e027      	b.n	80006a0 <loop+0x288>
 8000650:	20000000 	.word	0x20000000
 8000654:	080033a4 	.word	0x080033a4
 8000658:	080033b4 	.word	0x080033b4
 800065c:	200000ec 	.word	0x200000ec
 8000660:	200000e8 	.word	0x200000e8
 8000664:	200000fc 	.word	0x200000fc
 8000668:	080033c8 	.word	0x080033c8
 800066c:	080033d8 	.word	0x080033d8
 8000670:	080033e8 	.word	0x080033e8
 8000674:	080033fc 	.word	0x080033fc
 8000678:	0800340c 	.word	0x0800340c
 800067c:	08003418 	.word	0x08003418
 8000680:	40011000 	.word	0x40011000
 8000684:	40010c00 	.word	0x40010c00
 8000688:	0800342c 	.word	0x0800342c
 800068c:	2000011c 	.word	0x2000011c
 8000690:	20000004 	.word	0x20000004
        	    	                    for (int i = 0; i < 6; i++) {
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b05      	cmp	r3, #5
 800069e:	ddce      	ble.n	800063e <loop+0x226>
        	    	                        }
        	    	                    }

        	    	                    if (allDifferentFrom48) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d009      	beq.n	80006ba <loop+0x2a2>
        	    	                        lcd_put_cur(1, 0);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff fdd0 	bl	800024e <lcd_put_cur>
        	    	                        lcd_send_string("******");
 80006ae:	481f      	ldr	r0, [pc, #124]	@ (800072c <loop+0x314>)
 80006b0:	f7ff fe29 	bl	8000306 <lcd_send_string>
        	    	                        HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	@ 0x64
 80006b6:	f000 ff91 	bl	80015dc <HAL_Delay>
        	    	                    }

        	                            if ( keyPressed == 65 )
 80006ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <loop+0x318>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b41      	cmp	r3, #65	@ 0x41
 80006c0:	d101      	bne.n	80006c6 <loop+0x2ae>
        	                            {checkpass();}
 80006c2:	f7ff fe35 	bl	8000330 <checkpass>

        	                            if ( keyPressed == 64){
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <loop+0x318>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b40      	cmp	r3, #64	@ 0x40
 80006cc:	d121      	bne.n	8000712 <loop+0x2fa>
        	                            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0 );
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	4818      	ldr	r0, [pc, #96]	@ (8000734 <loop+0x31c>)
 80006d4:	f001 fa4f 	bl	8001b76 <HAL_GPIO_WritePin>
        	                            input[0]= input[1]=input[2]=input[3]=input[4]=input[5]= 48;
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <loop+0x320>)
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	715a      	strb	r2, [r3, #5]
 80006de:	4b16      	ldr	r3, [pc, #88]	@ (8000738 <loop+0x320>)
 80006e0:	795a      	ldrb	r2, [r3, #5]
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <loop+0x320>)
 80006e4:	711a      	strb	r2, [r3, #4]
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <loop+0x320>)
 80006e8:	791a      	ldrb	r2, [r3, #4]
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <loop+0x320>)
 80006ec:	70da      	strb	r2, [r3, #3]
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <loop+0x320>)
 80006f0:	78da      	ldrb	r2, [r3, #3]
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <loop+0x320>)
 80006f4:	709a      	strb	r2, [r3, #2]
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <loop+0x320>)
 80006f8:	789a      	ldrb	r2, [r3, #2]
 80006fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <loop+0x320>)
 80006fc:	705a      	strb	r2, [r3, #1]
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <loop+0x320>)
 8000700:	785a      	ldrb	r2, [r3, #1]
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <loop+0x320>)
 8000704:	701a      	strb	r2, [r3, #0]
        	                            keyPressed = 48;
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <loop+0x318>)
 8000708:	2230      	movs	r2, #48	@ 0x30
 800070a:	701a      	strb	r2, [r3, #0]
        	                            Mode = true;
 800070c:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <loop+0x324>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
        	    while (Mode == false)
 8000712:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <loop+0x324>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	f083 0301 	eor.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	f47f af51 	bne.w	80005c4 <loop+0x1ac>
        	                            }

        	      }
        }

    }
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	0800343c 	.word	0x0800343c
 8000730:	2000011c 	.word	0x2000011c
 8000734:	40010c00 	.word	0x40010c00
 8000738:	20000004 	.word	0x20000004
 800073c:	20000000 	.word	0x20000000

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fee8 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f80b 	bl	8000762 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 f8b2 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000750:	f000 f84c 	bl	80007ec <MX_I2C1_Init>
  MX_SPI1_Init();
 8000754:	f000 f878 	bl	8000848 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MFRC522_Init();
 8000758:	f000 fc5a 	bl	8001010 <MFRC522_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  loop();
 800075c:	f7ff fe5c 	bl	8000418 <loop>
 8000760:	e7fc      	b.n	800075c <main+0x1c>

08000762 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b090      	sub	sp, #64	@ 0x40
 8000766:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	2228      	movs	r2, #40	@ 0x28
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fdc8 	bl	8003306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800078c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000792:	2301      	movs	r3, #1
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fec8 	bl	8002540 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007b6:	f000 fb73 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2102      	movs	r1, #2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f935 	bl	8002a44 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007e0:	f000 fb5e 	bl	8000ea0 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3740      	adds	r7, #64	@ 0x40
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f2:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_I2C1_Init+0x54>)
 80007f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <MX_I2C1_Init+0x50>)
 80007f8:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x58>)
 80007fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_I2C1_Init+0x50>)
 800080a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <MX_I2C1_Init+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_I2C1_Init+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_I2C1_Init+0x50>)
 800082a:	f001 f9ed 	bl	8001c08 <HAL_I2C_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000834:	f000 fb34 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000003c 	.word	0x2000003c
 8000840:	40005400 	.word	0x40005400
 8000844:	000186a0 	.word	0x000186a0

08000848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <MX_SPI1_Init+0x64>)
 800084e:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <MX_SPI1_Init+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000854:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_SPI1_Init+0x64>)
 800087c:	2210      	movs	r2, #16
 800087e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_SPI1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_SPI1_Init+0x64>)
 8000894:	220a      	movs	r2, #10
 8000896:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_SPI1_Init+0x64>)
 800089a:	f002 fa4d 	bl	8002d38 <HAL_SPI_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a4:	f000 fafc 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000090 	.word	0x20000090
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b46      	ldr	r3, [pc, #280]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a45      	ldr	r2, [pc, #276]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b43      	ldr	r3, [pc, #268]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0310 	and.w	r3, r3, #16
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e0:	4b40      	ldr	r3, [pc, #256]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a3f      	ldr	r2, [pc, #252]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0320 	and.w	r3, r3, #32
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a39      	ldr	r2, [pc, #228]	@ (80009e4 <MX_GPIO_Init+0x130>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <MX_GPIO_Init+0x130>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x130>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a33      	ldr	r2, [pc, #204]	@ (80009e4 <MX_GPIO_Init+0x130>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <MX_GPIO_Init+0x130>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800092e:	482e      	ldr	r0, [pc, #184]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000930:	f001 f921 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2110      	movs	r1, #16
 8000938:	482c      	ldr	r0, [pc, #176]	@ (80009ec <MX_GPIO_Init+0x138>)
 800093a:	f001 f91c 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800093e:	2200      	movs	r2, #0
 8000940:	f24f 0131 	movw	r1, #61489	@ 0xf031
 8000944:	482a      	ldr	r0, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0x13c>)
 8000946:	f001 f916 	bl	8001b76 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4821      	ldr	r0, [pc, #132]	@ (80009e8 <MX_GPIO_Init+0x134>)
 8000964:	f000 ff6c 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000968:	2310      	movs	r3, #16
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	481b      	ldr	r0, [pc, #108]	@ (80009ec <MX_GPIO_Init+0x138>)
 8000980:	f000 ff5e 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000984:	f24f 0331 	movw	r3, #61489	@ 0xf031
 8000988:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4814      	ldr	r0, [pc, #80]	@ (80009f0 <MX_GPIO_Init+0x13c>)
 800099e:	f000 ff4f 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80009a2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <MX_GPIO_Init+0x140>)
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_GPIO_Init+0x138>)
 80009b8:	f000 ff42 	bl	8001840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2017      	movs	r0, #23
 80009c2:	f000 ff06 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009c6:	2017      	movs	r0, #23
 80009c8:	f000 ff1f 	bl	800180a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2028      	movs	r0, #40	@ 0x28
 80009d2:	f000 fefe 	bl	80017d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d6:	2028      	movs	r0, #40	@ 0x28
 80009d8:	f000 ff17 	bl	800180a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40011000 	.word	0x40011000
 80009ec:	40010800 	.word	0x40010800
 80009f0:	40010c00 	.word	0x40010c00
 80009f4:	10110000 	.word	0x10110000

080009f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8000a02:	f000 fde1 	bl	80015c8 <HAL_GetTick>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4aad      	ldr	r2, [pc, #692]	@ (8000cc0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000a0a:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000a0c:	4bac      	ldr	r3, [pc, #688]	@ (8000cc0 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4bac      	ldr	r3, [pc, #688]	@ (8000cc4 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b0a      	cmp	r3, #10
 8000a18:	f240 8230 	bls.w	8000e7c <HAL_GPIO_EXTI_Callback+0x484>
    /*Configure GPIO pins : PA8 PA9 PA10 PA11 to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a1c:	4baa      	ldr	r3, [pc, #680]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a1e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000a24:	4ba8      	ldr	r3, [pc, #672]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	4ba5      	ldr	r3, [pc, #660]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000a36:	49a4      	ldr	r1, [pc, #656]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a38:	48a4      	ldr	r0, [pc, #656]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a3a:	f000 ff01 	bl	8001840 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a44:	48a2      	ldr	r0, [pc, #648]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000a46:	f001 f896 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a50:	489f      	ldr	r0, [pc, #636]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000a52:	f001 f890 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5c:	489c      	ldr	r0, [pc, #624]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000a5e:	f001 f88a 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a68:	4899      	ldr	r0, [pc, #612]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000a6a:	f001 f884 	bl	8001b76 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a74:	d114      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0xa8>
 8000a76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a7a:	4894      	ldr	r0, [pc, #592]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a7c:	f001 f864 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00c      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0xa8>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0){}
 8000a86:	bf00      	nop
 8000a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a8c:	4890      	ldr	r0, [pc, #576]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000a8e:	f001 f85b 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f7      	beq.n	8000a88 <HAL_GPIO_EXTI_Callback+0x90>
      keyPressed = 49; //ASCII value of 1
 8000a98:	4b8e      	ldr	r3, [pc, #568]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000a9a:	2231      	movs	r2, #49	@ 0x31
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e049      	b.n	8000b34 <HAL_GPIO_EXTI_Callback+0x13c>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000aa6:	d114      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0xda>
 8000aa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aac:	4887      	ldr	r0, [pc, #540]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000aae:	f001 f84b 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00c      	beq.n	8000ad2 <HAL_GPIO_EXTI_Callback+0xda>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0){}
 8000ab8:	bf00      	nop
 8000aba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000abe:	4884      	ldr	r0, [pc, #528]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000ac0:	f001 f842 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f7      	beq.n	8000aba <HAL_GPIO_EXTI_Callback+0xc2>
      keyPressed = 53; //ASCII value of 5
 8000aca:	4b82      	ldr	r3, [pc, #520]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000acc:	2235      	movs	r2, #53	@ 0x35
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e030      	b.n	8000b34 <HAL_GPIO_EXTI_Callback+0x13c>

    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ad8:	d114      	bne.n	8000b04 <HAL_GPIO_EXTI_Callback+0x10c>
 8000ada:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ade:	487b      	ldr	r0, [pc, #492]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ae0:	f001 f832 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00c      	beq.n	8000b04 <HAL_GPIO_EXTI_Callback+0x10c>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0){}
 8000aea:	bf00      	nop
 8000aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af0:	4877      	ldr	r0, [pc, #476]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000af2:	f001 f829 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0f7      	beq.n	8000aec <HAL_GPIO_EXTI_Callback+0xf4>
      keyPressed = 57; //ASCII value of 9
 8000afc:	4b75      	ldr	r3, [pc, #468]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000afe:	2239      	movs	r2, #57	@ 0x39
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e017      	b.n	8000b34 <HAL_GPIO_EXTI_Callback+0x13c>

    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b0a:	d113      	bne.n	8000b34 <HAL_GPIO_EXTI_Callback+0x13c>
 8000b0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b10:	486e      	ldr	r0, [pc, #440]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b12:	f001 f819 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00b      	beq.n	8000b34 <HAL_GPIO_EXTI_Callback+0x13c>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0){}
 8000b1c:	bf00      	nop
 8000b1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b22:	486b      	ldr	r0, [pc, #428]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b24:	f001 f810 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f7      	beq.n	8000b1e <HAL_GPIO_EXTI_Callback+0x126>
      keyPressed = 65; //ASCII value of A
 8000b2e:	4b69      	ldr	r3, [pc, #420]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000b30:	2241      	movs	r2, #65	@ 0x41
 8000b32:	701a      	strb	r2, [r3, #0]

    }

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3a:	4865      	ldr	r0, [pc, #404]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b3c:	f001 f81b 	bl	8001b76 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b46:	4862      	ldr	r0, [pc, #392]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b48:	f001 f815 	bl	8001b76 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b52:	485f      	ldr	r0, [pc, #380]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b54:	f001 f80f 	bl	8001b76 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b5e:	485c      	ldr	r0, [pc, #368]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b60:	f001 f809 	bl	8001b76 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b6a:	d114      	bne.n	8000b96 <HAL_GPIO_EXTI_Callback+0x19e>
 8000b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b70:	4856      	ldr	r0, [pc, #344]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b72:	f000 ffe9 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00c      	beq.n	8000b96 <HAL_GPIO_EXTI_Callback+0x19e>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0){}
 8000b7c:	bf00      	nop
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	4853      	ldr	r0, [pc, #332]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b84:	f000 ffe0 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f7      	beq.n	8000b7e <HAL_GPIO_EXTI_Callback+0x186>
      keyPressed = 50; //ASCII value of 2
 8000b8e:	4b51      	ldr	r3, [pc, #324]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000b90:	2232      	movs	r2, #50	@ 0x32
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e049      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x232>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b9c:	d114      	bne.n	8000bc8 <HAL_GPIO_EXTI_Callback+0x1d0>
 8000b9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ba2:	484a      	ldr	r0, [pc, #296]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ba4:	f000 ffd0 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00c      	beq.n	8000bc8 <HAL_GPIO_EXTI_Callback+0x1d0>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0){}
 8000bae:	bf00      	nop
 8000bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb4:	4846      	ldr	r0, [pc, #280]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000bb6:	f000 ffc7 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f7      	beq.n	8000bb0 <HAL_GPIO_EXTI_Callback+0x1b8>
      keyPressed = 54; //ASCII value of 6
 8000bc0:	4b44      	ldr	r3, [pc, #272]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000bc2:	2236      	movs	r2, #54	@ 0x36
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	e030      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x232>

    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bce:	d114      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x202>
 8000bd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd4:	483d      	ldr	r0, [pc, #244]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000bd6:	f000 ffb7 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00c      	beq.n	8000bfa <HAL_GPIO_EXTI_Callback+0x202>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0){}
 8000be0:	bf00      	nop
 8000be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be6:	483a      	ldr	r0, [pc, #232]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000be8:	f000 ffae 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f7      	beq.n	8000be2 <HAL_GPIO_EXTI_Callback+0x1ea>
      keyPressed = 42; //ASCII value of *
 8000bf2:	4b38      	ldr	r3, [pc, #224]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000bf4:	222a      	movs	r2, #42	@ 0x2a
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e017      	b.n	8000c2a <HAL_GPIO_EXTI_Callback+0x232>

    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c00:	d113      	bne.n	8000c2a <HAL_GPIO_EXTI_Callback+0x232>
 8000c02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c06:	4831      	ldr	r0, [pc, #196]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000c08:	f000 ff9e 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00b      	beq.n	8000c2a <HAL_GPIO_EXTI_Callback+0x232>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0){}
 8000c12:	bf00      	nop
 8000c14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c18:	482d      	ldr	r0, [pc, #180]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000c1a:	f000 ff95 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f7      	beq.n	8000c14 <HAL_GPIO_EXTI_Callback+0x21c>
      keyPressed = 66; //ASCII value of B
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000c26:	2242      	movs	r2, #66	@ 0x42
 8000c28:	701a      	strb	r2, [r3, #0]

    }
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c30:	4827      	ldr	r0, [pc, #156]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000c32:	f000 ffa0 	bl	8001b76 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c3c:	4824      	ldr	r0, [pc, #144]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000c3e:	f000 ff9a 	bl	8001b76 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c48:	4821      	ldr	r0, [pc, #132]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000c4a:	f000 ff94 	bl	8001b76 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c54:	481e      	ldr	r0, [pc, #120]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000c56:	f000 ff8e 	bl	8001b76 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c60:	d114      	bne.n	8000c8c <HAL_GPIO_EXTI_Callback+0x294>
 8000c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c66:	4819      	ldr	r0, [pc, #100]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000c68:	f000 ff6e 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00c      	beq.n	8000c8c <HAL_GPIO_EXTI_Callback+0x294>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0){}
 8000c72:	bf00      	nop
 8000c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c78:	4815      	ldr	r0, [pc, #84]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000c7a:	f000 ff65 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f7      	beq.n	8000c74 <HAL_GPIO_EXTI_Callback+0x27c>
      keyPressed = 51; //ASCII value of 3
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000c86:	2233      	movs	r2, #51	@ 0x33
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e056      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x342>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c92:	d121      	bne.n	8000cd8 <HAL_GPIO_EXTI_Callback+0x2e0>
 8000c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000c9a:	f000 ff55 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d019      	beq.n	8000cd8 <HAL_GPIO_EXTI_Callback+0x2e0>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0){}
 8000ca4:	bf00      	nop
 8000ca6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000caa:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000cac:	f000 ff4c 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f7      	beq.n	8000ca6 <HAL_GPIO_EXTI_Callback+0x2ae>
      keyPressed = 55; //ASCII value of 7
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000cb8:	2237      	movs	r2, #55	@ 0x37
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e03d      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x342>
 8000cbe:	bf00      	nop
 8000cc0:	20000118 	.word	0x20000118
 8000cc4:	20000114 	.word	0x20000114
 8000cc8:	20000104 	.word	0x20000104
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	2000011c 	.word	0x2000011c

    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cde:	d114      	bne.n	8000d0a <HAL_GPIO_EXTI_Callback+0x312>
 8000ce0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ce4:	4867      	ldr	r0, [pc, #412]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000ce6:	f000 ff2f 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00c      	beq.n	8000d0a <HAL_GPIO_EXTI_Callback+0x312>
    {
       while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0){}
 8000cf0:	bf00      	nop
 8000cf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf6:	4864      	ldr	r0, [pc, #400]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000cf8:	f000 ff26 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f7      	beq.n	8000cf2 <HAL_GPIO_EXTI_Callback+0x2fa>
       keyPressed = 35; //ASCII value of  #
 8000d02:	4b62      	ldr	r3, [pc, #392]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x494>)
 8000d04:	2223      	movs	r2, #35	@ 0x23
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	e017      	b.n	8000d3a <HAL_GPIO_EXTI_Callback+0x342>

    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000d10:	d113      	bne.n	8000d3a <HAL_GPIO_EXTI_Callback+0x342>
 8000d12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d16:	485b      	ldr	r0, [pc, #364]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000d18:	f000 ff16 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <HAL_GPIO_EXTI_Callback+0x342>
    {
       while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0){}
 8000d22:	bf00      	nop
 8000d24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d28:	4857      	ldr	r0, [pc, #348]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000d2a:	f000 ff0d 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f7      	beq.n	8000d24 <HAL_GPIO_EXTI_Callback+0x32c>
       keyPressed = 67; //ASCII value of C
 8000d34:	4b55      	ldr	r3, [pc, #340]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x494>)
 8000d36:	2243      	movs	r2, #67	@ 0x43
 8000d38:	701a      	strb	r2, [r3, #0]

    }

         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d40:	4851      	ldr	r0, [pc, #324]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000d42:	f000 ff18 	bl	8001b76 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d4c:	484e      	ldr	r0, [pc, #312]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000d4e:	f000 ff12 	bl	8001b76 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d58:	484b      	ldr	r0, [pc, #300]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000d5a:	f000 ff0c 	bl	8001b76 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d64:	4848      	ldr	r0, [pc, #288]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000d66:	f000 ff06 	bl	8001b76 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_8 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8))
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d70:	d114      	bne.n	8000d9c <HAL_GPIO_EXTI_Callback+0x3a4>
 8000d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d76:	4843      	ldr	r0, [pc, #268]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000d78:	f000 fee6 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00c      	beq.n	8000d9c <HAL_GPIO_EXTI_Callback+0x3a4>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_8)==0){}
 8000d82:	bf00      	nop
 8000d84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d88:	483f      	ldr	r0, [pc, #252]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000d8a:	f000 fedd 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f7      	beq.n	8000d84 <HAL_GPIO_EXTI_Callback+0x38c>
      keyPressed = 52; //ASCII value of 4
 8000d94:	4b3d      	ldr	r3, [pc, #244]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x494>)
 8000d96:	2234      	movs	r2, #52	@ 0x34
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e049      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x438>

    }
    else if(GPIO_Pin == GPIO_PIN_9 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000da2:	d114      	bne.n	8000dce <HAL_GPIO_EXTI_Callback+0x3d6>
 8000da4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da8:	4836      	ldr	r0, [pc, #216]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000daa:	f000 fecd 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00c      	beq.n	8000dce <HAL_GPIO_EXTI_Callback+0x3d6>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==0){}
 8000db4:	bf00      	nop
 8000db6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dba:	4833      	ldr	r0, [pc, #204]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000dbc:	f000 fec4 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f7      	beq.n	8000db6 <HAL_GPIO_EXTI_Callback+0x3be>
      keyPressed = 56; //ASCII value of 8
 8000dc6:	4b31      	ldr	r3, [pc, #196]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x494>)
 8000dc8:	2238      	movs	r2, #56	@ 0x38
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e030      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x438>

    }
    else if(GPIO_Pin == GPIO_PIN_10 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dd4:	d114      	bne.n	8000e00 <HAL_GPIO_EXTI_Callback+0x408>
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	482a      	ldr	r0, [pc, #168]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000ddc:	f000 feb4 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00c      	beq.n	8000e00 <HAL_GPIO_EXTI_Callback+0x408>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10)==0){}
 8000de6:	bf00      	nop
 8000de8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dec:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000dee:	f000 feab 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f7      	beq.n	8000de8 <HAL_GPIO_EXTI_Callback+0x3f0>
      keyPressed = 64; //ASCII value of @
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x494>)
 8000dfa:	2240      	movs	r2, #64	@ 0x40
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e017      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x438>

    }
    else if(GPIO_Pin == GPIO_PIN_11 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11))
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e06:	d113      	bne.n	8000e30 <HAL_GPIO_EXTI_Callback+0x438>
 8000e08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e0c:	481d      	ldr	r0, [pc, #116]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000e0e:	f000 fe9b 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00b      	beq.n	8000e30 <HAL_GPIO_EXTI_Callback+0x438>
    {
      while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_11)==0){}
 8000e18:	bf00      	nop
 8000e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e1e:	481a      	ldr	r0, [pc, #104]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000e20:	f000 fe92 	bl	8001b48 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f7      	beq.n	8000e1a <HAL_GPIO_EXTI_Callback+0x422>
      keyPressed = 68; //ASCII value of D
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x494>)
 8000e2c:	2244      	movs	r2, #68	@ 0x44
 8000e2e:	701a      	strb	r2, [r3, #0]

    }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e36:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000e38:	f000 fe9d 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e42:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000e44:	f000 fe97 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e4e:	480e      	ldr	r0, [pc, #56]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000e50:	f000 fe91 	bl	8001b76 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x490>)
 8000e5c:	f000 fe8b 	bl	8001b76 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PA8 PA9 PA10 PA11 back to EXTI*/
    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000e60:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x498>)
 8000e62:	4a0c      	ldr	r2, [pc, #48]	@ (8000e94 <HAL_GPIO_EXTI_Callback+0x49c>)
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x498>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000e6c:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x498>)
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0x48c>)
 8000e70:	f000 fce6 	bl	8001840 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <HAL_GPIO_EXTI_Callback+0x4a4>)
 8000e7a:	6013      	str	r3, [r2, #0]



  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40010c00 	.word	0x40010c00
 8000e8c:	2000011c 	.word	0x2000011c
 8000e90:	20000104 	.word	0x20000104
 8000e94:	10110000 	.word	0x10110000
 8000e98:	20000118 	.word	0x20000118
 8000e9c:	20000114 	.word	0x20000114

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000eb6:	f107 020f 	add.w	r2, r7, #15
 8000eba:	1df9      	adds	r1, r7, #7
 8000ebc:	2364      	movs	r3, #100	@ 0x64
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <RC522_SPI_Transfer+0x28>)
 8000ec4:	f001 ffbc 	bl	8002e40 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000090 	.word	0x20000090

08000ed8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2110      	movs	r1, #16
 8000eec:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <Write_MFRC522+0x48>)
 8000eee:	f000 fe42 	bl	8001b76 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ffd4 	bl	8000eac <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ffd0 	bl	8000eac <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2110      	movs	r1, #16
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <Write_MFRC522+0x48>)
 8000f12:	f000 fe30 	bl	8001b76 <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40010800 	.word	0x40010800

08000f24 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	480f      	ldr	r0, [pc, #60]	@ (8000f70 <Read_MFRC522+0x4c>)
 8000f34:	f000 fe1f 	bl	8001b76 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ffad 	bl	8000eac <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff ffaa 	bl	8000eac <RC522_SPI_Transfer>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2110      	movs	r1, #16
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <Read_MFRC522+0x4c>)
 8000f62:	f000 fe08 	bl	8001b76 <HAL_GPIO_WritePin>

	return val;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40010800 	.word	0x40010800

08000f74 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffcc 	bl	8000f24 <Read_MFRC522>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff9b 	bl	8000ed8 <Write_MFRC522>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffb1 	bl	8000f24 <Read_MFRC522>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000fc6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff7b 	bl	8000ed8 <Write_MFRC522>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f7ff ff98 	bl	8000f24 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f7ff ffbc 	bl	8000f74 <SetBitMask>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001004:	210f      	movs	r1, #15
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff ff66 	bl	8000ed8 <Write_MFRC522>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	2110      	movs	r1, #16
 8001018:	4812      	ldr	r0, [pc, #72]	@ (8001064 <MFRC522_Init+0x54>)
 800101a:	f000 fdac 	bl	8001b76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	2101      	movs	r1, #1
 8001022:	4811      	ldr	r0, [pc, #68]	@ (8001068 <MFRC522_Init+0x58>)
 8001024:	f000 fda7 	bl	8001b76 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001028:	f7ff ffea 	bl	8001000 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800102c:	218d      	movs	r1, #141	@ 0x8d
 800102e:	202a      	movs	r0, #42	@ 0x2a
 8001030:	f7ff ff52 	bl	8000ed8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001034:	213e      	movs	r1, #62	@ 0x3e
 8001036:	202b      	movs	r0, #43	@ 0x2b
 8001038:	f7ff ff4e 	bl	8000ed8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 800103c:	211e      	movs	r1, #30
 800103e:	202d      	movs	r0, #45	@ 0x2d
 8001040:	f7ff ff4a 	bl	8000ed8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	202c      	movs	r0, #44	@ 0x2c
 8001048:	f7ff ff46 	bl	8000ed8 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 800104c:	2140      	movs	r1, #64	@ 0x40
 800104e:	2015      	movs	r0, #21
 8001050:	f7ff ff42 	bl	8000ed8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001054:	213d      	movs	r1, #61	@ 0x3d
 8001056:	2011      	movs	r0, #17
 8001058:	f7ff ff3e 	bl	8000ed8 <Write_MFRC522>

	AntennaOn();
 800105c:	f7ff ffc5 	bl	8000fea <AntennaOn>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010800 	.word	0x40010800
 8001068:	40010c00 	.word	0x40010c00

0800106c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	4613      	mov	r3, r2
 800107c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 800107e:	2302      	movs	r3, #2
 8001080:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b0c      	cmp	r3, #12
 800108e:	d006      	beq.n	800109e <MFRC522_ToCard+0x32>
 8001090:	2b0e      	cmp	r3, #14
 8001092:	d109      	bne.n	80010a8 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001094:	2312      	movs	r3, #18
 8001096:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001098:	2310      	movs	r3, #16
 800109a:	777b      	strb	r3, [r7, #29]
			break;
 800109c:	e005      	b.n	80010aa <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 800109e:	2377      	movs	r3, #119	@ 0x77
 80010a0:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80010a2:	2330      	movs	r3, #48	@ 0x30
 80010a4:	777b      	strb	r3, [r7, #29]
			break;
 80010a6:	e000      	b.n	80010aa <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80010a8:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 80010aa:	7fbb      	ldrb	r3, [r7, #30]
 80010ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	2002      	movs	r0, #2
 80010b6:	f7ff ff0f 	bl	8000ed8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 80010ba:	2180      	movs	r1, #128	@ 0x80
 80010bc:	2004      	movs	r0, #4
 80010be:	f7ff ff74 	bl	8000faa <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	200a      	movs	r0, #10
 80010c6:	f7ff ff55 	bl	8000f74 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 80010ca:	2100      	movs	r1, #0
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff ff03 	bl	8000ed8 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	e00a      	b.n	80010ee <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	2009      	movs	r0, #9
 80010e4:	f7ff fef8 	bl	8000ed8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	3301      	adds	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3f0      	bcc.n	80010d8 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4619      	mov	r1, r3
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff feec 	bl	8000ed8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b0c      	cmp	r3, #12
 8001104:	d103      	bne.n	800110e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001106:	2180      	movs	r1, #128	@ 0x80
 8001108:	200d      	movs	r0, #13
 800110a:	f7ff ff33 	bl	8000f74 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800110e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001112:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001114:	2004      	movs	r0, #4
 8001116:	f7ff ff05 	bl	8000f24 <Read_MFRC522>
 800111a:	4603      	mov	r3, r0
 800111c:	773b      	strb	r3, [r7, #28]
        i--;
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	3b01      	subs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00a      	beq.n	8001140 <MFRC522_ToCard+0xd4>
 800112a:	7f3b      	ldrb	r3, [r7, #28]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <MFRC522_ToCard+0xd4>
 8001134:	7f3a      	ldrb	r2, [r7, #28]
 8001136:	7f7b      	ldrb	r3, [r7, #29]
 8001138:	4013      	ands	r3, r2
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0e9      	beq.n	8001114 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	200d      	movs	r0, #13
 8001144:	f7ff ff31 	bl	8000faa <ClearBitMask>

    if (i != 0)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d052      	beq.n	80011f4 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800114e:	2006      	movs	r0, #6
 8001150:	f7ff fee8 	bl	8000f24 <Read_MFRC522>
 8001154:	4603      	mov	r3, r0
 8001156:	f003 031b 	and.w	r3, r3, #27
 800115a:	2b00      	cmp	r3, #0
 800115c:	d148      	bne.n	80011f0 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001162:	7f3a      	ldrb	r2, [r7, #28]
 8001164:	7fbb      	ldrb	r3, [r7, #30]
 8001166:	4013      	ands	r3, r2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8001172:	2301      	movs	r3, #1
 8001174:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	2b0c      	cmp	r3, #12
 800117a:	d13b      	bne.n	80011f4 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800117c:	200a      	movs	r0, #10
 800117e:	f7ff fed1 	bl	8000f24 <Read_MFRC522>
 8001182:	4603      	mov	r3, r0
 8001184:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001186:	200c      	movs	r0, #12
 8001188:	f7ff fecc 	bl	8000f24 <Read_MFRC522>
 800118c:	4603      	mov	r3, r0
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 800119a:	7f3b      	ldrb	r3, [r7, #28]
 800119c:	3b01      	subs	r3, #1
 800119e:	00da      	lsls	r2, r3, #3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	4413      	add	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	e004      	b.n	80011b6 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80011ac:	7f3b      	ldrb	r3, [r7, #28]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	461a      	mov	r2, r3
 80011b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b4:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80011b6:	7f3b      	ldrb	r3, [r7, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <MFRC522_ToCard+0x154>
                {
					n = 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80011c0:	7f3b      	ldrb	r3, [r7, #28]
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	d901      	bls.n	80011ca <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80011c6:	2310      	movs	r3, #16
 80011c8:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	e00a      	b.n	80011e6 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	18d4      	adds	r4, r2, r3
 80011d6:	2009      	movs	r0, #9
 80011d8:	f7ff fea4 	bl	8000f24 <Read_MFRC522>
 80011dc:	4603      	mov	r3, r0
 80011de:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	3301      	adds	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	7f3b      	ldrb	r3, [r7, #28]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3f0      	bcc.n	80011d0 <MFRC522_ToCard+0x164>
 80011ee:	e001      	b.n	80011f4 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80011f0:	2302      	movs	r3, #2
 80011f2:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80011f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af02      	add	r7, sp, #8
 8001204:	4603      	mov	r3, r0
 8001206:	6039      	str	r1, [r7, #0]
 8001208:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800120a:	2107      	movs	r1, #7
 800120c:	200d      	movs	r0, #13
 800120e:	f7ff fe63 	bl	8000ed8 <Write_MFRC522>

	TagType[0] = reqMode;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	200c      	movs	r0, #12
 8001226:	f7ff ff21 	bl	800106c <MFRC522_ToCard>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <MFRC522_Request+0x3c>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b10      	cmp	r3, #16
 8001238:	d001      	beq.n	800123e <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 800123a:	2302      	movs	r3, #2
 800123c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001250:	2300      	movs	r3, #0
 8001252:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001254:	2100      	movs	r1, #0
 8001256:	200d      	movs	r0, #13
 8001258:	f7ff fe3e 	bl	8000ed8 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2293      	movs	r2, #147	@ 0x93
 8001260:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	2220      	movs	r2, #32
 8001268:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	200c      	movs	r0, #12
 8001278:	f7ff fef8 	bl	800106c <MFRC522_ToCard>
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001286:	2300      	movs	r3, #0
 8001288:	73bb      	strb	r3, [r7, #14]
 800128a:	e009      	b.n	80012a0 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	781a      	ldrb	r2, [r3, #0]
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	4053      	eors	r3, r2
 8001298:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	3301      	adds	r3, #1
 800129e:	73bb      	strb	r3, [r7, #14]
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d9f2      	bls.n	800128c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	7b7a      	ldrb	r2, [r7, #13]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80012b4:	2302      	movs	r3, #2
 80012b6:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_MspInit+0x5c>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <HAL_MspInit+0x5c>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_MspInit+0x5c>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_MspInit+0x5c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_MspInit+0x60>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_MspInit+0x60>)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000

08001328 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <HAL_I2C_MspInit+0x70>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d123      	bne.n	8001390 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <HAL_I2C_MspInit+0x74>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	4a13      	ldr	r2, [pc, #76]	@ (800139c <HAL_I2C_MspInit+0x74>)
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	6193      	str	r3, [r2, #24]
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_I2C_MspInit+0x74>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001360:	23c0      	movs	r3, #192	@ 0xc0
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001364:	2312      	movs	r3, #18
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <HAL_I2C_MspInit+0x78>)
 8001374:	f000 fa64 	bl	8001840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_I2C_MspInit+0x74>)
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	4a07      	ldr	r2, [pc, #28]	@ (800139c <HAL_I2C_MspInit+0x74>)
 800137e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001382:	61d3      	str	r3, [r2, #28]
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <HAL_I2C_MspInit+0x74>)
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001390:	bf00      	nop
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005400 	.word	0x40005400
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010c00 	.word	0x40010c00

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <HAL_SPI_MspInit+0x88>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d12f      	bne.n	8001424 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 80013ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <HAL_SPI_MspInit+0x8c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013f4:	23a0      	movs	r3, #160	@ 0xa0
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <HAL_SPI_MspInit+0x90>)
 8001408:	f000 fa1a 	bl	8001840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140c:	2340      	movs	r3, #64	@ 0x40
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <HAL_SPI_MspInit+0x90>)
 8001420:	f000 fa0e 	bl	8001840 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013000 	.word	0x40013000
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001488:	f000 f88c 	bl	80015a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001494:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001498:	f000 fb9e 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800149c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014a0:	f000 fb9a 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80014b0:	f000 fb92 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80014b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80014b8:	f000 fb8e 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff fff8 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014d2:	490c      	ldr	r1, [pc, #48]	@ (8001504 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001508 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e8:	4c09      	ldr	r4, [pc, #36]	@ (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f001 ff0f 	bl	8003318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff f921 	bl	8000740 <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001508:	08003480 	.word	0x08003480
  ldr r2, =_sbss
 800150c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001510:	20000124 	.word	0x20000124

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <HAL_Init+0x28>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	@ (8001540 <HAL_Init+0x28>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f947 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	200f      	movs	r0, #15
 8001530:	f000 f808 	bl	8001544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fec6 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_InitTick+0x54>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x58>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155a:	fbb3 f3f1 	udiv	r3, r3, r1
 800155e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f95f 	bl	8001826 <HAL_SYSTICK_Config>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e00e      	b.n	8001590 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d80a      	bhi.n	800158e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 f927 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001584:	4a06      	ldr	r2, [pc, #24]	@ (80015a0 <HAL_InitTick+0x5c>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000014 	.word	0x20000014
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	20000018 	.word	0x20000018

080015a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_IncTick+0x1c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_IncTick+0x20>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a03      	ldr	r2, [pc, #12]	@ (80015c4 <HAL_IncTick+0x20>)
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	2000001c 	.word	0x2000001c
 80015c4:	20000120 	.word	0x20000120

080015c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b02      	ldr	r3, [pc, #8]	@ (80015d8 <HAL_GetTick+0x10>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	20000120 	.word	0x20000120

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff fff0 	bl	80015c8 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffe0 	bl	80015c8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000001c 	.word	0x2000001c

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4906      	ldr	r1, [pc, #24]	@ (80016bc <__NVIC_EnableIRQ+0x34>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	@ (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	@ (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	@ 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff90 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff2d 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff42 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff35 	bl	8001688 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b08b      	sub	sp, #44	@ 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e169      	b.n	8001b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001854:	2201      	movs	r2, #1
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8158 	bne.w	8001b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a9a      	ldr	r2, [pc, #616]	@ (8001ae0 <HAL_GPIO_Init+0x2a0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d05e      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 800187c:	4a98      	ldr	r2, [pc, #608]	@ (8001ae0 <HAL_GPIO_Init+0x2a0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d875      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 8001882:	4a98      	ldr	r2, [pc, #608]	@ (8001ae4 <HAL_GPIO_Init+0x2a4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d058      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001888:	4a96      	ldr	r2, [pc, #600]	@ (8001ae4 <HAL_GPIO_Init+0x2a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d86f      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800188e:	4a96      	ldr	r2, [pc, #600]	@ (8001ae8 <HAL_GPIO_Init+0x2a8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d052      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001894:	4a94      	ldr	r2, [pc, #592]	@ (8001ae8 <HAL_GPIO_Init+0x2a8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d869      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800189a:	4a94      	ldr	r2, [pc, #592]	@ (8001aec <HAL_GPIO_Init+0x2ac>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04c      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018a0:	4a92      	ldr	r2, [pc, #584]	@ (8001aec <HAL_GPIO_Init+0x2ac>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d863      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018a6:	4a92      	ldr	r2, [pc, #584]	@ (8001af0 <HAL_GPIO_Init+0x2b0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d046      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018ac:	4a90      	ldr	r2, [pc, #576]	@ (8001af0 <HAL_GPIO_Init+0x2b0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d85d      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d82a      	bhi.n	800190c <HAL_GPIO_Init+0xcc>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d859      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018ba:	a201      	add	r2, pc, #4	@ (adr r2, 80018c0 <HAL_GPIO_Init+0x80>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001927 	.word	0x08001927
 80018cc:	08001969 	.word	0x08001969
 80018d0:	0800196f 	.word	0x0800196f
 80018d4:	0800196f 	.word	0x0800196f
 80018d8:	0800196f 	.word	0x0800196f
 80018dc:	0800196f 	.word	0x0800196f
 80018e0:	0800196f 	.word	0x0800196f
 80018e4:	0800196f 	.word	0x0800196f
 80018e8:	0800196f 	.word	0x0800196f
 80018ec:	0800196f 	.word	0x0800196f
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	0800196f 	.word	0x0800196f
 80018fc:	0800196f 	.word	0x0800196f
 8001900:	0800196f 	.word	0x0800196f
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001931 	.word	0x08001931
 800190c:	4a79      	ldr	r2, [pc, #484]	@ (8001af4 <HAL_GPIO_Init+0x2b4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001912:	e02c      	b.n	800196e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e029      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e024      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	3308      	adds	r3, #8
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e01f      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	330c      	adds	r3, #12
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e01a      	b.n	8001970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001942:	2304      	movs	r3, #4
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e013      	b.n	8001970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	611a      	str	r2, [r3, #16]
          break;
 800195a:	e009      	b.n	8001970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	615a      	str	r2, [r3, #20]
          break;
 8001966:	e003      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x130>
          break;
 800196e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	@ 0xff
 8001974:	d801      	bhi.n	800197a <HAL_GPIO_Init+0x13a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	e001      	b.n	800197e <HAL_GPIO_Init+0x13e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	@ 0xff
 8001984:	d802      	bhi.n	800198c <HAL_GPIO_Init+0x14c>
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x152>
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	3b08      	subs	r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	210f      	movs	r1, #15
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80b1 	beq.w	8001b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	4b4d      	ldr	r3, [pc, #308]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b4a      	ldr	r3, [pc, #296]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d8:	4a48      	ldr	r2, [pc, #288]	@ (8001afc <HAL_GPIO_Init+0x2bc>)
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a40      	ldr	r2, [pc, #256]	@ (8001b00 <HAL_GPIO_Init+0x2c0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x1ec>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3f      	ldr	r2, [pc, #252]	@ (8001b04 <HAL_GPIO_Init+0x2c4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1e8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b08 <HAL_GPIO_Init+0x2c8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1e4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3d      	ldr	r2, [pc, #244]	@ (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1e0>
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	492f      	ldr	r1, [pc, #188]	@ (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b2d      	ldr	r3, [pc, #180]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	492c      	ldr	r1, [pc, #176]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4928      	ldr	r1, [pc, #160]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4922      	ldr	r1, [pc, #136]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	491e      	ldr	r1, [pc, #120]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4918      	ldr	r1, [pc, #96]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4914      	ldr	r1, [pc, #80]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d021      	beq.n	8001b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	490e      	ldr	r1, [pc, #56]	@ (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e021      	b.n	8001b22 <HAL_GPIO_Init+0x2e2>
 8001ade:	bf00      	nop
 8001ae0:	10320000 	.word	0x10320000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10120000 	.word	0x10120000
 8001af4:	10110000 	.word	0x10110000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40011400 	.word	0x40011400
 8001b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4909      	ldr	r1, [pc, #36]	@ (8001b44 <HAL_GPIO_Init+0x304>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f47f ae8e 	bne.w	8001854 <HAL_GPIO_Init+0x14>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	372c      	adds	r7, #44	@ 0x2c
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]
 8001b82:	4613      	mov	r3, r2
 8001b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	041a      	lsls	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	611a      	str	r2, [r3, #16]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb8:	887a      	ldrh	r2, [r7, #2]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	041a      	lsls	r2, r3, #16
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001be2:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bee:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fefe 	bl	80009f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e12b      	b.n	8001e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fb7a 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2224      	movs	r2, #36	@ 0x24
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c6c:	f001 f832 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8001c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a81      	ldr	r2, [pc, #516]	@ (8001e7c <HAL_I2C_Init+0x274>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d807      	bhi.n	8001c8c <HAL_I2C_Init+0x84>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4a80      	ldr	r2, [pc, #512]	@ (8001e80 <HAL_I2C_Init+0x278>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	bf94      	ite	ls
 8001c84:	2301      	movls	r3, #1
 8001c86:	2300      	movhi	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e006      	b.n	8001c9a <HAL_I2C_Init+0x92>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e84 <HAL_I2C_Init+0x27c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0e7      	b.n	8001e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4a78      	ldr	r2, [pc, #480]	@ (8001e88 <HAL_I2C_Init+0x280>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e7c <HAL_I2C_Init+0x274>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d802      	bhi.n	8001cdc <HAL_I2C_Init+0xd4>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	e009      	b.n	8001cf0 <HAL_I2C_Init+0xe8>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ce2:	fb02 f303 	mul.w	r3, r2, r3
 8001ce6:	4a69      	ldr	r2, [pc, #420]	@ (8001e8c <HAL_I2C_Init+0x284>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	3301      	adds	r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	495c      	ldr	r1, [pc, #368]	@ (8001e7c <HAL_I2C_Init+0x274>)
 8001d0c:	428b      	cmp	r3, r1
 8001d0e:	d819      	bhi.n	8001d44 <HAL_I2C_Init+0x13c>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e59      	subs	r1, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1e:	1c59      	adds	r1, r3, #1
 8001d20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d24:	400b      	ands	r3, r1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_I2C_Init+0x138>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1e59      	subs	r1, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3e:	e051      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e04f      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d111      	bne.n	8001d70 <HAL_I2C_Init+0x168>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	1e58      	subs	r0, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	440b      	add	r3, r1
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e012      	b.n	8001d96 <HAL_I2C_Init+0x18e>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e58      	subs	r0, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	0099      	lsls	r1, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d86:	3301      	adds	r3, #1
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_Init+0x196>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e022      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10e      	bne.n	8001dc4 <HAL_I2C_Init+0x1bc>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e58      	subs	r0, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	440b      	add	r3, r1
 8001db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc2:	e00f      	b.n	8001de4 <HAL_I2C_Init+0x1dc>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	0099      	lsls	r1, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	6809      	ldr	r1, [r1, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69da      	ldr	r2, [r3, #28]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6911      	ldr	r1, [r2, #16]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68d2      	ldr	r2, [r2, #12]
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	000186a0 	.word	0x000186a0
 8001e80:	001e847f 	.word	0x001e847f
 8001e84:	003d08ff 	.word	0x003d08ff
 8001e88:	431bde83 	.word	0x431bde83
 8001e8c:	10624dd3 	.word	0x10624dd3

08001e90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	817b      	strh	r3, [r7, #10]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fb90 	bl	80015c8 <HAL_GetTick>
 8001ea8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	f040 80e0 	bne.w	8002078 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2319      	movs	r3, #25
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4970      	ldr	r1, [pc, #448]	@ (8002084 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f964 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e0d3      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2C_Master_Transmit+0x50>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e0cc      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d007      	beq.n	8001f06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2221      	movs	r2, #33	@ 0x21
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2210      	movs	r2, #16
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	893a      	ldrh	r2, [r7, #8]
 8001f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a50      	ldr	r2, [pc, #320]	@ (8002088 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6a3a      	ldr	r2, [r7, #32]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f89c 	bl	800208c <I2C_MasterRequestWrite>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08d      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f74:	e066      	b.n	8002044 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	6a39      	ldr	r1, [r7, #32]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fa22 	bl	80023c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d107      	bne.n	8001f9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06b      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d11b      	bne.n	8002018 <HAL_I2C_Master_Transmit+0x188>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	6a39      	ldr	r1, [r7, #32]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fa19 	bl	8002454 <I2C_WaitOnBTFFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00d      	beq.n	8002044 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	2b04      	cmp	r3, #4
 800202e:	d107      	bne.n	8002040 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e01a      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002048:	2b00      	cmp	r3, #0
 800204a:	d194      	bne.n	8001f76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002078:	2302      	movs	r3, #2
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	00100002 	.word	0x00100002
 8002088:	ffff0000 	.word	0xffff0000

0800208c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	460b      	mov	r3, r1
 800209a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d006      	beq.n	80020b6 <I2C_MasterRequestWrite+0x2a>
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d003      	beq.n	80020b6 <I2C_MasterRequestWrite+0x2a>
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020b4:	d108      	bne.n	80020c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e00b      	b.n	80020e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d107      	bne.n	80020e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f84f 	bl	8002190 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002106:	d103      	bne.n	8002110 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800210e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e035      	b.n	8002180 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800211c:	d108      	bne.n	8002130 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800211e:	897b      	ldrh	r3, [r7, #10]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e01b      	b.n	8002168 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002130:	897b      	ldrh	r3, [r7, #10]
 8002132:	11db      	asrs	r3, r3, #7
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0306 	and.w	r3, r3, #6
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f063 030f 	orn	r3, r3, #15
 8002140:	b2da      	uxtb	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	490e      	ldr	r1, [pc, #56]	@ (8002188 <I2C_MasterRequestWrite+0xfc>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f898 	bl	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e010      	b.n	8002180 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4907      	ldr	r1, [pc, #28]	@ (800218c <I2C_MasterRequestWrite+0x100>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f888 	bl	8002284 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	00010008 	.word	0x00010008
 800218c:	00010002 	.word	0x00010002

08002190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a0:	e048      	b.n	8002234 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d044      	beq.n	8002234 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7ff fa0d 	bl	80015c8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d139      	bne.n	8002234 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d10d      	bne.n	80021e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	43da      	mvns	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	e00c      	b.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x70>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4013      	ands	r3, r2
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	429a      	cmp	r2, r3
 8002204:	d116      	bne.n	8002234 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e023      	b.n	800227c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10d      	bne.n	800225a <I2C_WaitOnFlagUntilTimeout+0xca>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	43da      	mvns	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	e00c      	b.n	8002274 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	43da      	mvns	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	4013      	ands	r3, r2
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	429a      	cmp	r2, r3
 8002278:	d093      	beq.n	80021a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002292:	e071      	b.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a2:	d123      	bne.n	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f043 0204 	orr.w	r2, r3, #4
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e067      	b.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d041      	beq.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f4:	f7ff f968 	bl	80015c8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d302      	bcc.n	800230a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d136      	bne.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d10c      	bne.n	800232e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e00b      	b.n	8002346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	43da      	mvns	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4013      	ands	r3, r2
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d016      	beq.n	8002378 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e021      	b.n	80023bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d10c      	bne.n	800239c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	43da      	mvns	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4013      	ands	r3, r2
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	e00b      	b.n	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4013      	ands	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f47f af6d 	bne.w	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d0:	e034      	b.n	800243c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f886 	bl	80024e4 <I2C_IsAcknowledgeFailed>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e034      	b.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d028      	beq.n	800243c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7ff f8ed 	bl	80015c8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11d      	bne.n	800243c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240a:	2b80      	cmp	r3, #128	@ 0x80
 800240c:	d016      	beq.n	800243c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e007      	b.n	800244c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002446:	2b80      	cmp	r3, #128	@ 0x80
 8002448:	d1c3      	bne.n	80023d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002460:	e034      	b.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f83e 	bl	80024e4 <I2C_IsAcknowledgeFailed>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e034      	b.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d028      	beq.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7ff f8a5 	bl	80015c8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11d      	bne.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d016      	beq.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e007      	b.n	80024dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d1c3      	bne.n	8002462 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fa:	d11b      	bne.n	8002534 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002504:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f043 0204 	orr.w	r2, r3, #4
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e272      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8087 	beq.w	800266e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002560:	4b92      	ldr	r3, [pc, #584]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b04      	cmp	r3, #4
 800256a:	d00c      	beq.n	8002586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800256c:	4b8f      	ldr	r3, [pc, #572]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d112      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
 8002578:	4b8c      	ldr	r3, [pc, #560]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002584:	d10b      	bne.n	800259e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002586:	4b89      	ldr	r3, [pc, #548]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d06c      	beq.n	800266c <HAL_RCC_OscConfig+0x12c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d168      	bne.n	800266c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e24c      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x76>
 80025a8:	4b80      	ldr	r3, [pc, #512]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a7f      	ldr	r2, [pc, #508]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e02e      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x98>
 80025be:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7a      	ldr	r2, [pc, #488]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b78      	ldr	r3, [pc, #480]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a77      	ldr	r2, [pc, #476]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e01d      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCC_OscConfig+0xbc>
 80025e2:	4b72      	ldr	r3, [pc, #456]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a71      	ldr	r2, [pc, #452]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b6f      	ldr	r3, [pc, #444]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6e      	ldr	r2, [pc, #440]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e00b      	b.n	8002614 <HAL_RCC_OscConfig+0xd4>
 80025fc:	4b6b      	ldr	r3, [pc, #428]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a6a      	ldr	r2, [pc, #424]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b68      	ldr	r3, [pc, #416]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a67      	ldr	r2, [pc, #412]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe ffd4 	bl	80015c8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe ffd0 	bl	80015c8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e200      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b5d      	ldr	r3, [pc, #372]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0xe4>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe ffc0 	bl	80015c8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe ffbc 	bl	80015c8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1ec      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x10c>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d063      	beq.n	8002742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267a:	4b4c      	ldr	r3, [pc, #304]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002686:	4b49      	ldr	r3, [pc, #292]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	2b08      	cmp	r3, #8
 8002690:	d11c      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
 8002692:	4b46      	ldr	r3, [pc, #280]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d116      	bne.n	80026cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269e:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c0      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4939      	ldr	r1, [pc, #228]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	e03a      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d4:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <HAL_RCC_OscConfig+0x270>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe ff75 	bl	80015c8 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e2:	f7fe ff71 	bl	80015c8 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1a1      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	4b2d      	ldr	r3, [pc, #180]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002700:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4927      	ldr	r1, [pc, #156]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e015      	b.n	8002742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002716:	4b26      	ldr	r3, [pc, #152]	@ (80027b0 <HAL_RCC_OscConfig+0x270>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe ff54 	bl	80015c8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe ff50 	bl	80015c8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e180      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03a      	beq.n	80027c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d019      	beq.n	800278a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002756:	4b17      	ldr	r3, [pc, #92]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7fe ff34 	bl	80015c8 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe ff30 	bl	80015c8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e160      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_RCC_OscConfig+0x26c>)
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002782:	2001      	movs	r0, #1
 8002784:	f000 faba 	bl	8002cfc <RCC_Delay>
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <HAL_RCC_OscConfig+0x274>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe ff1a 	bl	80015c8 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002796:	e00f      	b.n	80027b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe ff16 	bl	80015c8 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d908      	bls.n	80027b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e146      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	42420000 	.word	0x42420000
 80027b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b92      	ldr	r3, [pc, #584]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e9      	bne.n	8002798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a6 	beq.w	800291e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10d      	bne.n	80027fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a87      	ldr	r2, [pc, #540]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	4b85      	ldr	r3, [pc, #532]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fa:	2301      	movs	r3, #1
 80027fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fe:	4b82      	ldr	r3, [pc, #520]	@ (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d118      	bne.n	800283c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002816:	f7fe fed7 	bl	80015c8 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fed3 	bl	80015c8 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b64      	cmp	r3, #100	@ 0x64
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e103      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002830:	4b75      	ldr	r3, [pc, #468]	@ (8002a08 <HAL_RCC_OscConfig+0x4c8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x312>
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	e02d      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10c      	bne.n	8002874 <HAL_RCC_OscConfig+0x334>
 800285a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	4a69      	ldr	r2, [pc, #420]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6213      	str	r3, [r2, #32]
 8002866:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a66      	ldr	r2, [pc, #408]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	e01c      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0x356>
 800287c:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a60      	ldr	r2, [pc, #384]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6213      	str	r3, [r2, #32]
 8002888:	4b5e      	ldr	r3, [pc, #376]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0x36e>
 8002896:	4b5b      	ldr	r3, [pc, #364]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a5a      	ldr	r2, [pc, #360]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b58      	ldr	r3, [pc, #352]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a57      	ldr	r2, [pc, #348]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d015      	beq.n	80028e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fe87 	bl	80015c8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fe83 	bl	80015c8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0b1      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ee      	beq.n	80028be <HAL_RCC_OscConfig+0x37e>
 80028e0:	e014      	b.n	800290c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fe71 	bl	80015c8 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e8:	e00a      	b.n	8002900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fe6d 	bl	80015c8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e09b      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	4b40      	ldr	r3, [pc, #256]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ee      	bne.n	80028ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d105      	bne.n	800291e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002912:	4b3c      	ldr	r3, [pc, #240]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800291c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8087 	beq.w	8002a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002928:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b08      	cmp	r3, #8
 8002932:	d061      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d146      	bne.n	80029ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe fe41 	bl	80015c8 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe fe3d 	bl	80015c8 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e06d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4921      	ldr	r1, [pc, #132]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a19      	ldr	r1, [r3, #32]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	430b      	orrs	r3, r1
 8002996:	491b      	ldr	r1, [pc, #108]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800299c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe11 	bl	80015c8 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7fe fe0d 	bl	80015c8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e03d      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x46a>
 80029c8:	e035      	b.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <HAL_RCC_OscConfig+0x4cc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fdfa 	bl	80015c8 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fdf6 	bl	80015c8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e026      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x498>
 80029f6:	e01e      	b.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e019      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
 8002a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <HAL_RCC_OscConfig+0x500>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d106      	bne.n	8002a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000

08002a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0d0      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b6a      	ldr	r3, [pc, #424]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b67      	ldr	r3, [pc, #412]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4965      	ldr	r1, [pc, #404]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d040      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d115      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b41      	ldr	r3, [pc, #260]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e073      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3d      	ldr	r3, [pc, #244]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06b      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4936      	ldr	r1, [pc, #216]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe fd48 	bl	80015c8 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7fe fd44 	bl	80015c8 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e053      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2d      	ldr	r3, [pc, #180]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d210      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4922      	ldr	r1, [pc, #136]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	@ (8002c10 <HAL_RCC_ClockConfig+0x1cc>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fca6 	bl	8001544 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08003444 	.word	0x08003444
 8002c10:	20000014 	.word	0x20000014
 8002c14:	20000018 	.word	0x20000018

08002c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x94>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d002      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x30>
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x36>
 8002c46:	e027      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4a:	613b      	str	r3, [r7, #16]
      break;
 8002c4c:	e027      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	0c9b      	lsrs	r3, r3, #18
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	4a17      	ldr	r2, [pc, #92]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c66:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <HAL_RCC_GetSysClockFreq+0x94>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	0c5b      	lsrs	r3, r3, #17
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	4a11      	ldr	r2, [pc, #68]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7a:	fb03 f202 	mul.w	r2, r3, r2
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	e004      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c8c:	fb02 f303 	mul.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	613b      	str	r3, [r7, #16]
      break;
 8002c96:	e002      	b.n	8002c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9a:	613b      	str	r3, [r7, #16]
      break;
 8002c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9e:	693b      	ldr	r3, [r7, #16]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	0800345c 	.word	0x0800345c
 8002cb8:	0800346c 	.word	0x0800346c
 8002cbc:	003d0900 	.word	0x003d0900

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b02      	ldr	r3, [pc, #8]	@ (8002cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	20000014 	.word	0x20000014

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff2 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	08003454 	.word	0x08003454

08002cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d04:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <RCC_Delay+0x34>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <RCC_Delay+0x38>)
 8002d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0e:	0a5b      	lsrs	r3, r3, #9
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d18:	bf00      	nop
  }
  while (Delay --);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e5a      	subs	r2, r3, #1
 8002d1e:	60fa      	str	r2, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f9      	bne.n	8002d18 <RCC_Delay+0x1c>
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	20000014 	.word	0x20000014
 8002d34:	10624dd3 	.word	0x10624dd3

08002d38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e076      	b.n	8002e38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d108      	bne.n	8002d64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d5a:	d009      	beq.n	8002d70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
 8002d62:	e005      	b.n	8002d70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fb0a 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df4:	ea42 0103 	orr.w	r1, r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	0c1a      	lsrs	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f002 0204 	and.w	r2, r2, #4
 8002e16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e52:	f7fe fbb9 	bl	80015c8 <HAL_GetTick>
 8002e56:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e5e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d00c      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x4a>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e76:	d106      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x46>
 8002e80:	7ffb      	ldrb	r3, [r7, #31]
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d001      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
 8002e88:	e17f      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x5c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x5c>
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e174      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x6e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e16d      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d003      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2205      	movs	r2, #5
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	887a      	ldrh	r2, [r7, #2]
 8002eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	887a      	ldrh	r2, [r7, #2]
 8002ef2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f0a:	2b40      	cmp	r3, #64	@ 0x40
 8002f0c:	d007      	beq.n	8002f1e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f26:	d17e      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_SPI_TransmitReceive+0xf6>
 8002f30:	8afb      	ldrh	r3, [r7, #22]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d16c      	bne.n	8003010 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f5a:	e059      	b.n	8003010 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d11b      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x162>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d016      	beq.n	8002fa2 <HAL_SPI_TransmitReceive+0x162>
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d113      	bne.n	8002fa2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d119      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x1a4>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d014      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fe4:	f7fe faf0 	bl	80015c8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d80d      	bhi.n	8003010 <HAL_SPI_TransmitReceive+0x1d0>
 8002ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffa:	d009      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0bc      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1a0      	bne.n	8002f5c <HAL_SPI_TransmitReceive+0x11c>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d19b      	bne.n	8002f5c <HAL_SPI_TransmitReceive+0x11c>
 8003024:	e082      	b.n	800312c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_SPI_TransmitReceive+0x1f4>
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d171      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800305a:	e05d      	b.n	8003118 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d11c      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x264>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d017      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x264>
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	2b01      	cmp	r3, #1
 8003078:	d114      	bne.n	80030a4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d119      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x2a6>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d014      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030e2:	2301      	movs	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030e6:	f7fe fa6f 	bl	80015c8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d803      	bhi.n	80030fe <HAL_SPI_TransmitReceive+0x2be>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d102      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x2c4>
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e038      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d19c      	bne.n	800305c <HAL_SPI_TransmitReceive+0x21c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d197      	bne.n	800305c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f8b7 	bl	80032a4 <SPI_EndRxTxTransaction>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e01d      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003188:	2300      	movs	r3, #0
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3728      	adds	r7, #40	@ 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031a4:	f7fe fa10 	bl	80015c8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4413      	add	r3, r2
 80031b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031b4:	f7fe fa08 	bl	80015c8 <HAL_GetTick>
 80031b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031ba:	4b39      	ldr	r3, [pc, #228]	@ (80032a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	015b      	lsls	r3, r3, #5
 80031c0:	0d1b      	lsrs	r3, r3, #20
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	fb02 f303 	mul.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ca:	e054      	b.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d050      	beq.n	8003276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031d4:	f7fe f9f8 	bl	80015c8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d902      	bls.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d13d      	bne.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003202:	d111      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800320c:	d004      	beq.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003216:	d107      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003230:	d10f      	bne.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e017      	b.n	8003296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3b01      	subs	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	429a      	cmp	r2, r3
 8003292:	d19b      	bne.n	80031cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000014 	.word	0x20000014

080032a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2201      	movs	r2, #1
 80032b8:	2102      	movs	r1, #2
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff ff6a 	bl	8003194 <SPI_WaitFlagStateUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d007      	beq.n	80032d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	f043 0220 	orr.w	r2, r3, #32
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e013      	b.n	80032fe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	@ 0x80
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f7ff ff57 	bl	8003194 <SPI_WaitFlagStateUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e000      	b.n	80032fe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <memset>:
 8003306:	4603      	mov	r3, r0
 8003308:	4402      	add	r2, r0
 800330a:	4293      	cmp	r3, r2
 800330c:	d100      	bne.n	8003310 <memset+0xa>
 800330e:	4770      	bx	lr
 8003310:	f803 1b01 	strb.w	r1, [r3], #1
 8003314:	e7f9      	b.n	800330a <memset+0x4>
	...

08003318 <__libc_init_array>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	2600      	movs	r6, #0
 800331c:	4d0c      	ldr	r5, [pc, #48]	@ (8003350 <__libc_init_array+0x38>)
 800331e:	4c0d      	ldr	r4, [pc, #52]	@ (8003354 <__libc_init_array+0x3c>)
 8003320:	1b64      	subs	r4, r4, r5
 8003322:	10a4      	asrs	r4, r4, #2
 8003324:	42a6      	cmp	r6, r4
 8003326:	d109      	bne.n	800333c <__libc_init_array+0x24>
 8003328:	f000 f81a 	bl	8003360 <_init>
 800332c:	2600      	movs	r6, #0
 800332e:	4d0a      	ldr	r5, [pc, #40]	@ (8003358 <__libc_init_array+0x40>)
 8003330:	4c0a      	ldr	r4, [pc, #40]	@ (800335c <__libc_init_array+0x44>)
 8003332:	1b64      	subs	r4, r4, r5
 8003334:	10a4      	asrs	r4, r4, #2
 8003336:	42a6      	cmp	r6, r4
 8003338:	d105      	bne.n	8003346 <__libc_init_array+0x2e>
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003340:	4798      	blx	r3
 8003342:	3601      	adds	r6, #1
 8003344:	e7ee      	b.n	8003324 <__libc_init_array+0xc>
 8003346:	f855 3b04 	ldr.w	r3, [r5], #4
 800334a:	4798      	blx	r3
 800334c:	3601      	adds	r6, #1
 800334e:	e7f2      	b.n	8003336 <__libc_init_array+0x1e>
 8003350:	08003478 	.word	0x08003478
 8003354:	08003478 	.word	0x08003478
 8003358:	08003478 	.word	0x08003478
 800335c:	0800347c 	.word	0x0800347c

08003360 <_init>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr

0800336c <_fini>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr
