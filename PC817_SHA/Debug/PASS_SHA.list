
PASS_SHA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a6c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002b78  08002b78  00003b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c9c  08002c9c  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002c9c  08002c9c  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c9c  08002c9c  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c9c  08002c9c  00003c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002ca4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000018  08002cbc  00004018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002cbc  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ea6  00000000  00000000  00004041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b63  00000000  00000000  0000cee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0000ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084c  00000000  00000000  0000f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e3f  00000000  00000000  0000fd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdea  00000000  00000000  00026ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882c0  00000000  00000000  0003298d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bac4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c50  00000000  00000000  000bac90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000bd8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b60 	.word	0x08002b60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002b60 	.word	0x08002b60

0800014c <delay>:

/****************** define the timer handler below  **************/
#define timer htim1
extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <delay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	@ (8000178 <delay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay+0x14>
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000034 	.word	0x20000034

0800017c <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	6039      	str	r1, [r7, #0]
 8000186:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000188:	683b      	ldr	r3, [r7, #0]
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	2101      	movs	r1, #1
 8000190:	4820      	ldr	r0, [pc, #128]	@ (8000214 <send_to_lcd+0x98>)
 8000192:	f001 fdc8 	bl	8001d26 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	08db      	lsrs	r3, r3, #3
 800019a:	b2db      	uxtb	r3, r3
 800019c:	f003 0301 	and.w	r3, r3, #1
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2120      	movs	r1, #32
 80001a6:	481b      	ldr	r0, [pc, #108]	@ (8000214 <send_to_lcd+0x98>)
 80001a8:	f001 fdbd 	bl	8001d26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	089b      	lsrs	r3, r3, #2
 80001b0:	b2db      	uxtb	r3, r3
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	461a      	mov	r2, r3
 80001ba:	2110      	movs	r1, #16
 80001bc:	4815      	ldr	r0, [pc, #84]	@ (8000214 <send_to_lcd+0x98>)
 80001be:	f001 fdb2 	bl	8001d26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	085b      	lsrs	r3, r3, #1
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	f003 0301 	and.w	r3, r3, #1
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	461a      	mov	r2, r3
 80001d0:	2108      	movs	r1, #8
 80001d2:	4810      	ldr	r0, [pc, #64]	@ (8000214 <send_to_lcd+0x98>)
 80001d4:	f001 fda7 	bl	8001d26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 0301 	and.w	r3, r3, #1
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	2104      	movs	r1, #4
 80001e4:	480b      	ldr	r0, [pc, #44]	@ (8000214 <send_to_lcd+0x98>)
 80001e6:	f001 fd9e 	bl	8001d26 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2102      	movs	r1, #2
 80001ee:	4809      	ldr	r0, [pc, #36]	@ (8000214 <send_to_lcd+0x98>)
 80001f0:	f001 fd99 	bl	8001d26 <HAL_GPIO_WritePin>
	delay (200);
 80001f4:	20c8      	movs	r0, #200	@ 0xc8
 80001f6:	f7ff ffa9 	bl	800014c <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2102      	movs	r1, #2
 80001fe:	4805      	ldr	r0, [pc, #20]	@ (8000214 <send_to_lcd+0x98>)
 8000200:	f001 fd91 	bl	8001d26 <HAL_GPIO_WritePin>
	delay (200);
 8000204:	20c8      	movs	r0, #200	@ 0xc8
 8000206:	f7ff ffa1 	bl	800014c <delay>
}
 800020a:	bf00      	nop
 800020c:	3708      	adds	r7, #8
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40010800 	.word	0x40010800

08000218 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	091b      	lsrs	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,GPIO_PIN_RESET);  // RS must be 0 while sending command
 8000228:	7bfb      	ldrb	r3, [r7, #15]
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffa5 	bl	800017c <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	f003 030f 	and.w	r3, r3, #15
 8000238:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend,GPIO_PIN_RESET);
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ff9c 	bl	800017c <send_to_lcd>
}
 8000244:	bf00      	nop
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <lcd_send_data>:

void lcd_send_data (char data)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	091b      	lsrs	r3, r3, #4
 800025a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, GPIO_PIN_SET);  // rs =1 for sending data
 800025c:	7bfb      	ldrb	r3, [r7, #15]
 800025e:	2101      	movs	r1, #1
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff8b 	bl	800017c <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 030f 	and.w	r3, r3, #15
 800026c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, GPIO_PIN_SET);
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	2101      	movs	r1, #1
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ff82 	bl	800017c <send_to_lcd>
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <lcd_clear>:

void lcd_clear (void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ffc7 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(2);
 800028a:	2002      	movs	r0, #2
 800028c:	f001 f87e 	bl	800138c <HAL_Delay>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
    switch (row)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d003      	beq.n	80002ac <lcd_put_cur+0x18>
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d005      	beq.n	80002b6 <lcd_put_cur+0x22>
 80002aa:	e009      	b.n	80002c0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002b2:	603b      	str	r3, [r7, #0]
            break;
 80002b4:	e004      	b.n	80002c0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80002bc:	603b      	str	r3, [r7, #0]
            break;
 80002be:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ffa7 	bl	8000218 <lcd_send_cmd>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <lcd_init>:


void lcd_init (void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80002d6:	2032      	movs	r0, #50	@ 0x32
 80002d8:	f001 f858 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002dc:	2030      	movs	r0, #48	@ 0x30
 80002de:	f7ff ff9b 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80002e2:	2005      	movs	r0, #5
 80002e4:	f001 f852 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002e8:	2030      	movs	r0, #48	@ 0x30
 80002ea:	f7ff ff95 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80002ee:	2001      	movs	r0, #1
 80002f0:	f001 f84c 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x30);
 80002f4:	2030      	movs	r0, #48	@ 0x30
 80002f6:	f7ff ff8f 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(10);
 80002fa:	200a      	movs	r0, #10
 80002fc:	f001 f846 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000300:	2020      	movs	r0, #32
 8000302:	f7ff ff89 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(10);
 8000306:	200a      	movs	r0, #10
 8000308:	f001 f840 	bl	800138c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800030c:	2028      	movs	r0, #40	@ 0x28
 800030e:	f7ff ff83 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 8000312:	2001      	movs	r0, #1
 8000314:	f001 f83a 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000318:	2008      	movs	r0, #8
 800031a:	f7ff ff7d 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f001 f834 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000324:	2001      	movs	r0, #1
 8000326:	f7ff ff77 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f001 f82e 	bl	800138c <HAL_Delay>
	HAL_Delay(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f001 f82b 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ff6e 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f001 f825 	bl	800138c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000342:	200c      	movs	r0, #12
 8000344:	f7ff ff68 	bl	8000218 <lcd_send_cmd>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000354:	e006      	b.n	8000364 <lcd_send_string+0x18>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1c5a      	adds	r2, r3, #1
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	4618      	mov	r0, r3
 8000360:	f7ff ff74 	bl	800024c <lcd_send_data>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1f4      	bne.n	8000356 <lcd_send_string+0xa>
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f000 ffa3 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f9cd 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f000 fa61 	bl	800084c <MX_GPIO_Init>
  MX_TIM1_Init();
 800038a:	f000 fa0f 	bl	80007ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Load_Password_From_Flash();
 800038e:	f000 fe97 	bl	80010c0 <Load_Password_From_Flash>
  HAL_TIM_Base_Start(&htim1);
 8000392:	48b3      	ldr	r0, [pc, #716]	@ (8000660 <main+0x2e8>)
 8000394:	f002 f926 	bl	80025e4 <HAL_TIM_Base_Start>
  lcd_init();
 8000398:	f7ff ff9b 	bl	80002d2 <lcd_init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a2:	48b0      	ldr	r0, [pc, #704]	@ (8000664 <main+0x2ec>)
 80003a4:	f001 fcbf 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ae:	48ad      	ldr	r0, [pc, #692]	@ (8000664 <main+0x2ec>)
 80003b0:	f001 fcb9 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003ba:	48aa      	ldr	r0, [pc, #680]	@ (8000664 <main+0x2ec>)
 80003bc:	f001 fcb3 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003c6:	48a7      	ldr	r0, [pc, #668]	@ (8000664 <main+0x2ec>)
 80003c8:	f001 fcad 	bl	8001d26 <HAL_GPIO_WritePin>

    lcd_clear();
 80003cc:	f7ff ff58 	bl	8000280 <lcd_clear>
    lcd_put_cur(0, 0);
 80003d0:	2100      	movs	r1, #0
 80003d2:	2000      	movs	r0, #0
 80003d4:	f7ff ff5e 	bl	8000294 <lcd_put_cur>
    lcd_send_string("Password System");
 80003d8:	48a3      	ldr	r0, [pc, #652]	@ (8000668 <main+0x2f0>)
 80003da:	f7ff ffb7 	bl	800034c <lcd_send_string>
    lcd_put_cur(1, 0);
 80003de:	2100      	movs	r1, #0
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff57 	bl	8000294 <lcd_put_cur>
    lcd_send_string("Press * to start");
 80003e6:	48a1      	ldr	r0, [pc, #644]	@ (800066c <main+0x2f4>)
 80003e8:	f7ff ffb0 	bl	800034c <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	if (failed_attempts >= MAX_FAILED_ATTEMPTS &&
 80003ec:	4ba0      	ldr	r3, [pc, #640]	@ (8000670 <main+0x2f8>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d912      	bls.n	800041a <main+0xa2>
            HAL_GetTick() - lockTimestamp < LOCK_DURATION_MS)
 80003f4:	f000 ffc0 	bl	8001378 <HAL_GetTick>
 80003f8:	4602      	mov	r2, r0
 80003fa:	4b9e      	ldr	r3, [pc, #632]	@ (8000674 <main+0x2fc>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	1ad3      	subs	r3, r2, r3
    	if (failed_attempts >= MAX_FAILED_ATTEMPTS &&
 8000400:	4a9d      	ldr	r2, [pc, #628]	@ (8000678 <main+0x300>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d809      	bhi.n	800041a <main+0xa2>
        {
            lcd_clear();
 8000406:	f7ff ff3b 	bl	8000280 <lcd_clear>
            lcd_send_string("LOCKED 5 MIN");
 800040a:	489c      	ldr	r0, [pc, #624]	@ (800067c <main+0x304>)
 800040c:	f7ff ff9e 	bl	800034c <lcd_send_string>
            HAL_Delay(1000);
 8000410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000414:	f000 ffba 	bl	800138c <HAL_Delay>
            continue;
 8000418:	e17d      	b.n	8000716 <main+0x39e>
        }
        if (keyPressed == 42) // '*'
 800041a:	4b99      	ldr	r3, [pc, #612]	@ (8000680 <main+0x308>)
 800041c:	f993 3000 	ldrsb.w	r3, [r3]
 8000420:	2b2a      	cmp	r3, #42	@ 0x2a
 8000422:	f040 8175 	bne.w	8000710 <main+0x398>
        {
            lcd_clear();
 8000426:	f7ff ff2b 	bl	8000280 <lcd_clear>
            lcd_send_string("Enter Password:");
 800042a:	4896      	ldr	r0, [pc, #600]	@ (8000684 <main+0x30c>)
 800042c:	f7ff ff8e 	bl	800034c <lcd_send_string>
            lcd_put_cur(1, 0);
 8000430:	2100      	movs	r1, #0
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff2e 	bl	8000294 <lcd_put_cur>
            input_length = 0;
 8000438:	4b93      	ldr	r3, [pc, #588]	@ (8000688 <main+0x310>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
            memset(input_password, 0, sizeof(input_password));
 800043e:	220a      	movs	r2, #10
 8000440:	2100      	movs	r1, #0
 8000442:	4892      	ldr	r0, [pc, #584]	@ (800068c <main+0x314>)
 8000444:	f002 fb52 	bl	8002aec <memset>
            lastInteraction = HAL_GetTick();
 8000448:	f000 ff96 	bl	8001378 <HAL_GetTick>
 800044c:	4603      	mov	r3, r0
 800044e:	4a90      	ldr	r2, [pc, #576]	@ (8000690 <main+0x318>)
 8000450:	6013      	str	r3, [r2, #0]
            keyPressed = -1;
 8000452:	4b8b      	ldr	r3, [pc, #556]	@ (8000680 <main+0x308>)
 8000454:	22ff      	movs	r2, #255	@ 0xff
 8000456:	701a      	strb	r2, [r3, #0]

            bool exitInput = false;
 8000458:	2300      	movs	r3, #0
 800045a:	71fb      	strb	r3, [r7, #7]

            while (!exitInput)
 800045c:	e151      	b.n	8000702 <main+0x38a>
            {
                if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS)
 800045e:	f000 ff8b 	bl	8001378 <HAL_GetTick>
 8000462:	4602      	mov	r2, r0
 8000464:	4b8a      	ldr	r3, [pc, #552]	@ (8000690 <main+0x318>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800046e:	4293      	cmp	r3, r2
 8000470:	d91b      	bls.n	80004aa <main+0x132>
                {
                    lcd_clear();
 8000472:	f7ff ff05 	bl	8000280 <lcd_clear>
                    lcd_send_string("Timeout !");
 8000476:	4887      	ldr	r0, [pc, #540]	@ (8000694 <main+0x31c>)
 8000478:	f7ff ff68 	bl	800034c <lcd_send_string>
                    HAL_Delay(1000);
 800047c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000480:	f000 ff84 	bl	800138c <HAL_Delay>

                    lcd_clear();
 8000484:	f7ff fefc 	bl	8000280 <lcd_clear>
                    lcd_put_cur(0, 0);
 8000488:	2100      	movs	r1, #0
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff02 	bl	8000294 <lcd_put_cur>
                    lcd_send_string("Password System");
 8000490:	4875      	ldr	r0, [pc, #468]	@ (8000668 <main+0x2f0>)
 8000492:	f7ff ff5b 	bl	800034c <lcd_send_string>
                    lcd_put_cur(1, 0);
 8000496:	2100      	movs	r1, #0
 8000498:	2001      	movs	r0, #1
 800049a:	f7ff fefb 	bl	8000294 <lcd_put_cur>
                    lcd_send_string("Press * to start");
 800049e:	4873      	ldr	r0, [pc, #460]	@ (800066c <main+0x2f4>)
 80004a0:	f7ff ff54 	bl	800034c <lcd_send_string>

                    exitInput = true;
 80004a4:	2301      	movs	r3, #1
 80004a6:	71fb      	strb	r3, [r7, #7]
                    break;
 80004a8:	e132      	b.n	8000710 <main+0x398>
                }

                if (keyPressed != -1)
 80004aa:	4b75      	ldr	r3, [pc, #468]	@ (8000680 <main+0x308>)
 80004ac:	f993 3000 	ldrsb.w	r3, [r3]
 80004b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004b4:	f000 8122 	beq.w	80006fc <main+0x384>
                {
                    lastInteraction = HAL_GetTick();
 80004b8:	f000 ff5e 	bl	8001378 <HAL_GetTick>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a74      	ldr	r2, [pc, #464]	@ (8000690 <main+0x318>)
 80004c0:	6013      	str	r3, [r2, #0]
                    uint8_t tempKey = keyPressed;
 80004c2:	4b6f      	ldr	r3, [pc, #444]	@ (8000680 <main+0x308>)
 80004c4:	f993 3000 	ldrsb.w	r3, [r3]
 80004c8:	71bb      	strb	r3, [r7, #6]
                    keyPressed = -1;
 80004ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000680 <main+0x308>)
 80004cc:	22ff      	movs	r2, #255	@ 0xff
 80004ce:	701a      	strb	r2, [r3, #0]

                    if (tempKey == 35) // '#'
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	2b23      	cmp	r3, #35	@ 0x23
 80004d4:	f040 8092 	bne.w	80005fc <main+0x284>
                    {
                        if (memcmp(input_password, ADMIN_CODE, strlen(ADMIN_CODE)) == 0)
 80004d8:	2206      	movs	r2, #6
 80004da:	496f      	ldr	r1, [pc, #444]	@ (8000698 <main+0x320>)
 80004dc:	486b      	ldr	r0, [pc, #428]	@ (800068c <main+0x314>)
 80004de:	f002 faf5 	bl	8002acc <memcmp>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d11a      	bne.n	800051e <main+0x1a6>
                        {
                            memcpy(current_password, default_password, 6);
 80004e8:	4b6c      	ldr	r3, [pc, #432]	@ (800069c <main+0x324>)
 80004ea:	4a6d      	ldr	r2, [pc, #436]	@ (80006a0 <main+0x328>)
 80004ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f0:	6018      	str	r0, [r3, #0]
 80004f2:	3304      	adds	r3, #4
 80004f4:	8019      	strh	r1, [r3, #0]
                            password_length = 6;
 80004f6:	4b6b      	ldr	r3, [pc, #428]	@ (80006a4 <main+0x32c>)
 80004f8:	2206      	movs	r2, #6
 80004fa:	701a      	strb	r2, [r3, #0]
                            Save_Password_To_Flash();
 80004fc:	f000 fd8c 	bl	8001018 <Save_Password_To_Flash>
                            failed_attempts = 0;
 8000500:	4b5b      	ldr	r3, [pc, #364]	@ (8000670 <main+0x2f8>)
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
                            lcd_clear();
 8000506:	f7ff febb 	bl	8000280 <lcd_clear>
                            lcd_send_string("Admin Reset OK!");
 800050a:	4867      	ldr	r0, [pc, #412]	@ (80006a8 <main+0x330>)
 800050c:	f7ff ff1e 	bl	800034c <lcd_send_string>
                            HAL_Delay(1000);
 8000510:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000514:	f000 ff3a 	bl	800138c <HAL_Delay>
                            exitInput = true;
 8000518:	2301      	movs	r3, #1
 800051a:	71fb      	strb	r3, [r7, #7]
                            break;
 800051c:	e0f8      	b.n	8000710 <main+0x398>
                        }

                        if (Verify_Password())
 800051e:	f000 fbe1 	bl	8000ce4 <Verify_Password>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d03e      	beq.n	80005a6 <main+0x22e>
                        {
                            lcd_clear();
 8000528:	f7ff feaa 	bl	8000280 <lcd_clear>
                            lcd_send_string("Password OK!");
 800052c:	485f      	ldr	r0, [pc, #380]	@ (80006ac <main+0x334>)
 800052e:	f7ff ff0d 	bl	800034c <lcd_send_string>
                            HAL_Delay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000536:	f000 ff29 	bl	800138c <HAL_Delay>

                            lcd_clear();
 800053a:	f7ff fea1 	bl	8000280 <lcd_clear>
                            lcd_send_string("B: Change Pass");
 800053e:	485c      	ldr	r0, [pc, #368]	@ (80006b0 <main+0x338>)
 8000540:	f7ff ff04 	bl	800034c <lcd_send_string>
                            lcd_put_cur(1, 0);
 8000544:	2100      	movs	r1, #0
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff fea4 	bl	8000294 <lcd_put_cur>
                            lcd_send_string("C: Exit");
 800054c:	4859      	ldr	r0, [pc, #356]	@ (80006b4 <main+0x33c>)
 800054e:	f7ff fefd 	bl	800034c <lcd_send_string>

                            bool inMenu = true;
 8000552:	2301      	movs	r3, #1
 8000554:	73fb      	strb	r3, [r7, #15]
                            while (inMenu)
 8000556:	e010      	b.n	800057a <main+0x202>
                            {
                                if (keyPressed == 66) { Change_Password(); inMenu = false; }
 8000558:	4b49      	ldr	r3, [pc, #292]	@ (8000680 <main+0x308>)
 800055a:	f993 3000 	ldrsb.w	r3, [r3]
 800055e:	2b42      	cmp	r3, #66	@ 0x42
 8000560:	d104      	bne.n	800056c <main+0x1f4>
 8000562:	f000 fc13 	bl	8000d8c <Change_Password>
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e006      	b.n	800057a <main+0x202>
                                else if (keyPressed == 67) { inMenu = false; }
 800056c:	4b44      	ldr	r3, [pc, #272]	@ (8000680 <main+0x308>)
 800056e:	f993 3000 	ldrsb.w	r3, [r3]
 8000572:	2b43      	cmp	r3, #67	@ 0x43
 8000574:	d101      	bne.n	800057a <main+0x202>
 8000576:	2300      	movs	r3, #0
 8000578:	73fb      	strb	r3, [r7, #15]
                            while (inMenu)
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1eb      	bne.n	8000558 <main+0x1e0>
                            }

                            lcd_clear();
 8000580:	f7ff fe7e 	bl	8000280 <lcd_clear>
                            lcd_put_cur(0, 0);
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fe84 	bl	8000294 <lcd_put_cur>
                            lcd_send_string("Password System");
 800058c:	4836      	ldr	r0, [pc, #216]	@ (8000668 <main+0x2f0>)
 800058e:	f7ff fedd 	bl	800034c <lcd_send_string>
                            lcd_put_cur(1, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff fe7d 	bl	8000294 <lcd_put_cur>
                            lcd_send_string("Press * to start");
 800059a:	4834      	ldr	r0, [pc, #208]	@ (800066c <main+0x2f4>)
 800059c:	f7ff fed6 	bl	800034c <lcd_send_string>

                            exitInput = true;
 80005a0:	2301      	movs	r3, #1
 80005a2:	71fb      	strb	r3, [r7, #7]
                            break;
 80005a4:	e0b4      	b.n	8000710 <main+0x398>
                        }
                        else
                        {
                            failed_attempts++;
 80005a6:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <main+0x2f8>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <main+0x2f8>)
 80005b0:	701a      	strb	r2, [r3, #0]
                            if (failed_attempts >= MAX_FAILED_ATTEMPTS)
 80005b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <main+0x2f8>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d904      	bls.n	80005c4 <main+0x24c>
                            {
                                lockTimestamp = HAL_GetTick();
 80005ba:	f000 fedd 	bl	8001378 <HAL_GetTick>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000674 <main+0x2fc>)
 80005c2:	6013      	str	r3, [r2, #0]
                            }

                            lcd_clear();
 80005c4:	f7ff fe5c 	bl	8000280 <lcd_clear>
                            lcd_send_string("Wrong Password!");
 80005c8:	483b      	ldr	r0, [pc, #236]	@ (80006b8 <main+0x340>)
 80005ca:	f7ff febf 	bl	800034c <lcd_send_string>
                            HAL_Delay(1000);
 80005ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d2:	f000 fedb 	bl	800138c <HAL_Delay>

                            lcd_clear();
 80005d6:	f7ff fe53 	bl	8000280 <lcd_clear>
                            lcd_put_cur(0, 0);
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff fe59 	bl	8000294 <lcd_put_cur>
                            lcd_send_string("Password System");
 80005e2:	4821      	ldr	r0, [pc, #132]	@ (8000668 <main+0x2f0>)
 80005e4:	f7ff feb2 	bl	800034c <lcd_send_string>
                            lcd_put_cur(1, 0);
 80005e8:	2100      	movs	r1, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fe52 	bl	8000294 <lcd_put_cur>
                            lcd_send_string("Press * to start");
 80005f0:	481e      	ldr	r0, [pc, #120]	@ (800066c <main+0x2f4>)
 80005f2:	f7ff feab 	bl	800034c <lcd_send_string>

                            exitInput = true;
 80005f6:	2301      	movs	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
                            break;
 80005fa:	e089      	b.n	8000710 <main+0x398>
                        }
                    }
                    else if (tempKey == 68) // 'D' xóa ký tự
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	2b44      	cmp	r3, #68	@ 0x44
 8000600:	d15e      	bne.n	80006c0 <main+0x348>
                    {
                        if (input_length > 0)
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <main+0x310>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d078      	beq.n	80006fc <main+0x384>
                        {
                            input_length--;
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <main+0x310>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <main+0x310>)
 8000614:	701a      	strb	r2, [r3, #0]
                            input_password[input_length] = 0;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <main+0x310>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <main+0x314>)
 800061e:	2100      	movs	r1, #0
 8000620:	5499      	strb	r1, [r3, r2]
                            lcd_put_cur(1, 0);
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff fe35 	bl	8000294 <lcd_put_cur>
                            lcd_send_string("                ");
 800062a:	4824      	ldr	r0, [pc, #144]	@ (80006bc <main+0x344>)
 800062c:	f7ff fe8e 	bl	800034c <lcd_send_string>
                            lcd_put_cur(1, 0);
 8000630:	2100      	movs	r1, #0
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff fe2e 	bl	8000294 <lcd_put_cur>
                            for (int i = 0; i < input_length; i++)
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	e009      	b.n	8000652 <main+0x2da>
                                lcd_send_data(input_password[i]);
 800063e:	4a13      	ldr	r2, [pc, #76]	@ (800068c <main+0x314>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4413      	add	r3, r2
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe00 	bl	800024c <lcd_send_data>
                            for (int i = 0; i < input_length; i++)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3301      	adds	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <main+0x310>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4293      	cmp	r3, r2
 800065c:	dbef      	blt.n	800063e <main+0x2c6>
 800065e:	e04d      	b.n	80006fc <main+0x384>
 8000660:	20000034 	.word	0x20000034
 8000664:	40010800 	.word	0x40010800
 8000668:	08002b78 	.word	0x08002b78
 800066c:	08002b88 	.word	0x08002b88
 8000670:	200000cb 	.word	0x200000cb
 8000674:	20000098 	.word	0x20000098
 8000678:	000493df 	.word	0x000493df
 800067c:	08002b9c 	.word	0x08002b9c
 8000680:	20000000 	.word	0x20000000
 8000684:	08002bac 	.word	0x08002bac
 8000688:	200000ca 	.word	0x200000ca
 800068c:	200000a8 	.word	0x200000a8
 8000690:	20000094 	.word	0x20000094
 8000694:	08002bbc 	.word	0x08002bbc
 8000698:	08002bc8 	.word	0x08002bc8
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	20000004 	.word	0x20000004
 80006a4:	2000000a 	.word	0x2000000a
 80006a8:	08002bd0 	.word	0x08002bd0
 80006ac:	08002be0 	.word	0x08002be0
 80006b0:	08002bf0 	.word	0x08002bf0
 80006b4:	08002c00 	.word	0x08002c00
 80006b8:	08002c08 	.word	0x08002c08
 80006bc:	08002c18 	.word	0x08002c18
                        }
                    }
                    else if (input_length < 10 && tempKey != '*' && tempKey != 'A' && tempKey != 'B' && tempKey != 'C')
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <main+0x3a0>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b09      	cmp	r3, #9
 80006c6:	d819      	bhi.n	80006fc <main+0x384>
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80006cc:	d016      	beq.n	80006fc <main+0x384>
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2b41      	cmp	r3, #65	@ 0x41
 80006d2:	d013      	beq.n	80006fc <main+0x384>
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	2b42      	cmp	r3, #66	@ 0x42
 80006d8:	d010      	beq.n	80006fc <main+0x384>
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	2b43      	cmp	r3, #67	@ 0x43
 80006de:	d00d      	beq.n	80006fc <main+0x384>
                    {
                        input_password[input_length++] = tempKey;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <main+0x3a0>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	1c5a      	adds	r2, r3, #1
 80006e6:	b2d1      	uxtb	r1, r2
 80006e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <main+0x3a0>)
 80006ea:	7011      	strb	r1, [r2, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4a0b      	ldr	r2, [pc, #44]	@ (800071c <main+0x3a4>)
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	5453      	strb	r3, [r2, r1]
                        lcd_send_data(tempKey);
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff fda8 	bl	800024c <lcd_send_data>
                    }
                }
                HAL_Delay(50);
 80006fc:	2032      	movs	r0, #50	@ 0x32
 80006fe:	f000 fe45 	bl	800138c <HAL_Delay>
            while (!exitInput)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f083 0301 	eor.w	r3, r3, #1
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	f47f aea7 	bne.w	800045e <main+0xe6>
            }
        }
        HAL_Delay(10);
 8000710:	200a      	movs	r0, #10
 8000712:	f000 fe3b 	bl	800138c <HAL_Delay>
    	if (failed_attempts >= MAX_FAILED_ATTEMPTS &&
 8000716:	e669      	b.n	80003ec <main+0x74>
 8000718:	200000ca 	.word	0x200000ca
 800071c:	200000a8 	.word	0x200000a8

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b090      	sub	sp, #64	@ 0x40
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	2228      	movs	r2, #40	@ 0x28
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 f9dc 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000746:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800074a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000758:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800075e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fb0d 	bl	8001d88 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000774:	f000 fce6 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fd7a 	bl	800228c <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800079e:	f000 fcd1 	bl	8001144 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3740      	adds	r7, #64	@ 0x40
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000848 <MX_TIM1_Init+0x9c>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007d0:	2247      	movs	r2, #71	@ 0x47
 80007d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_TIM1_Init+0x98>)
 80007f6:	f001 fea5 	bl	8002544 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 fca0 	bl	8001144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <MX_TIM1_Init+0x98>)
 8000812:	f001 ff31 	bl	8002678 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800081c:	f000 fc92 	bl	8001144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_TIM1_Init+0x98>)
 800082e:	f002 f8ef 	bl	8002a10 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 fc84 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000034 	.word	0x20000034
 8000848:	40012c00 	.word	0x40012c00

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000860:	4b39      	ldr	r3, [pc, #228]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a38      	ldr	r2, [pc, #224]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <MX_GPIO_Init+0xfc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000878:	4b33      	ldr	r3, [pc, #204]	@ (8000948 <MX_GPIO_Init+0xfc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a32      	ldr	r2, [pc, #200]	@ (8000948 <MX_GPIO_Init+0xfc>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0320 	and.w	r3, r3, #32
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a2c      	ldr	r2, [pc, #176]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_GPIO_Init+0xfc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a8:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MX_GPIO_Init+0xfc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a26      	ldr	r2, [pc, #152]	@ (8000948 <MX_GPIO_Init+0xfc>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b24      	ldr	r3, [pc, #144]	@ (8000948 <MX_GPIO_Init+0xfc>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c6:	4821      	ldr	r0, [pc, #132]	@ (800094c <MX_GPIO_Init+0x100>)
 80008c8:	f001 fa2d 	bl	8001d26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008cc:	2200      	movs	r2, #0
 80008ce:	f640 717f 	movw	r1, #3967	@ 0xf7f
 80008d2:	481f      	ldr	r0, [pc, #124]	@ (8000950 <MX_GPIO_Init+0x104>)
 80008d4:	f001 fa27 	bl	8001d26 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4619      	mov	r1, r3
 80008f0:	4816      	ldr	r0, [pc, #88]	@ (800094c <MX_GPIO_Init+0x100>)
 80008f2:	f001 f87d 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA8
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008f6:	f640 737f 	movw	r3, #3967	@ 0xf7f
 80008fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	4810      	ldr	r0, [pc, #64]	@ (8000950 <MX_GPIO_Init+0x104>)
 8000910:	f001 f86e 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000914:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_GPIO_Init+0x108>)
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4619      	mov	r1, r3
 8000928:	480b      	ldr	r0, [pc, #44]	@ (8000958 <MX_GPIO_Init+0x10c>)
 800092a:	f001 f861 	bl	80019f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2028      	movs	r0, #40	@ 0x28
 8000934:	f000 fe25 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000938:	2028      	movs	r0, #40	@ 0x28
 800093a:	f000 fe3e 	bl	80015ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	40011000 	.word	0x40011000
 8000950:	40010800 	.word	0x40010800
 8000954:	10110000 	.word	0x10110000
 8000958:	40010c00 	.word	0x40010c00

0800095c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
  currentMillis = HAL_GetTick();
 8000966:	f000 fd07 	bl	8001378 <HAL_GetTick>
 800096a:	4603      	mov	r3, r0
 800096c:	4aab      	ldr	r2, [pc, #684]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x2c0>)
 800096e:	6013      	str	r3, [r2, #0]
  if (currentMillis - previousMillis > 10) {
 8000970:	4baa      	ldr	r3, [pc, #680]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4baa      	ldr	r3, [pc, #680]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	2b0a      	cmp	r3, #10
 800097c:	f240 819f 	bls.w	8000cbe <HAL_GPIO_EXTI_Callback+0x362>
    /*Configure GPIO pins : PB to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000980:	4ba8      	ldr	r3, [pc, #672]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000982:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8000986:	601a      	str	r2, [r3, #0]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000988:	4ba6      	ldr	r3, [pc, #664]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800098e:	4ba5      	ldr	r3, [pc, #660]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	4ba3      	ldr	r3, [pc, #652]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000996:	2202      	movs	r2, #2
 8000998:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 800099a:	49a2      	ldr	r1, [pc, #648]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800099c:	48a2      	ldr	r0, [pc, #648]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800099e:	f001 f827 	bl	80019f0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a8:	48a0      	ldr	r0, [pc, #640]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80009aa:	f001 f9bc 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b4:	489d      	ldr	r0, [pc, #628]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80009b6:	f001 f9b6 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c0:	489a      	ldr	r0, [pc, #616]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80009c2:	f001 f9b0 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009cc:	4897      	ldr	r0, [pc, #604]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 80009ce:	f001 f9aa 	bl	8001d26 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80009d8:	d10b      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x96>
 80009da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009de:	4892      	ldr	r0, [pc, #584]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80009e0:	f001 f98a 	bl	8001cf8 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_EXTI_Callback+0x96>
    {
      keyPressed = 68; //ASCII value of D
 80009ea:	4b91      	ldr	r3, [pc, #580]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80009ec:	2244      	movs	r2, #68	@ 0x44
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	e02e      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0xf4>
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f8:	d10b      	bne.n	8000a12 <HAL_GPIO_EXTI_Callback+0xb6>
 80009fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009fe:	488a      	ldr	r0, [pc, #552]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000a00:	f001 f97a 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_EXTI_Callback+0xb6>
    {
      keyPressed = 67; //ASCII value of C
 8000a0a:	4b89      	ldr	r3, [pc, #548]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a0c:	2243      	movs	r2, #67	@ 0x43
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e01e      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0xf4>
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000a18:	d10b      	bne.n	8000a32 <HAL_GPIO_EXTI_Callback+0xd6>
 8000a1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a1e:	4882      	ldr	r0, [pc, #520]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000a20:	f001 f96a 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_EXTI_Callback+0xd6>
    {
      keyPressed = 66; //ASCII value of B
 8000a2a:	4b81      	ldr	r3, [pc, #516]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a2c:	2242      	movs	r2, #66	@ 0x42
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e00e      	b.n	8000a50 <HAL_GPIO_EXTI_Callback+0xf4>
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a38:	d10a      	bne.n	8000a50 <HAL_GPIO_EXTI_Callback+0xf4>
 8000a3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a3e:	487a      	ldr	r0, [pc, #488]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000a40:	f001 f95a 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <HAL_GPIO_EXTI_Callback+0xf4>
    {
      keyPressed = 65; //ASCII value of A
 8000a4a:	4b79      	ldr	r3, [pc, #484]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a4c:	2241      	movs	r2, #65	@ 0x41
 8000a4e:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a56:	4875      	ldr	r0, [pc, #468]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a58:	f001 f965 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a62:	4872      	ldr	r0, [pc, #456]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a64:	f001 f95f 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a6e:	486f      	ldr	r0, [pc, #444]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a70:	f001 f959 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a7a:	486c      	ldr	r0, [pc, #432]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000a7c:	f001 f953 	bl	8001d26 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000a86:	d10b      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x144>
 8000a88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a8c:	4866      	ldr	r0, [pc, #408]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000a8e:	f001 f933 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x144>
    {
      keyPressed = 35; //ASCII value of #
 8000a98:	4b65      	ldr	r3, [pc, #404]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000a9a:	2223      	movs	r2, #35	@ 0x23
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e02e      	b.n	8000afe <HAL_GPIO_EXTI_Callback+0x1a2>
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa6:	d10b      	bne.n	8000ac0 <HAL_GPIO_EXTI_Callback+0x164>
 8000aa8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aac:	485e      	ldr	r0, [pc, #376]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000aae:	f001 f923 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_EXTI_Callback+0x164>
    {
      keyPressed = 57; //ASCII value of 9
 8000ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000aba:	2239      	movs	r2, #57	@ 0x39
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e01e      	b.n	8000afe <HAL_GPIO_EXTI_Callback+0x1a2>
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ac6:	d10b      	bne.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x184>
 8000ac8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000acc:	4856      	ldr	r0, [pc, #344]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000ace:	f001 f913 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x184>
    {
      keyPressed = 54; //ASCII value of 6
 8000ad8:	4b55      	ldr	r3, [pc, #340]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ada:	2236      	movs	r2, #54	@ 0x36
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e00e      	b.n	8000afe <HAL_GPIO_EXTI_Callback+0x1a2>
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ae6:	d10a      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x1a2>
 8000ae8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aec:	484e      	ldr	r0, [pc, #312]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000aee:	f001 f903 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_GPIO_EXTI_Callback+0x1a2>
    {
      keyPressed = 51; //ASCII value of 3
 8000af8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000afa:	2233      	movs	r2, #51	@ 0x33
 8000afc:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b04:	4849      	ldr	r0, [pc, #292]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000b06:	f001 f90e 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b10:	4846      	ldr	r0, [pc, #280]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000b12:	f001 f908 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b1c:	4843      	ldr	r0, [pc, #268]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000b1e:	f001 f902 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b28:	4840      	ldr	r0, [pc, #256]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000b2a:	f001 f8fc 	bl	8001d26 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b34:	d10b      	bne.n	8000b4e <HAL_GPIO_EXTI_Callback+0x1f2>
 8000b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b3a:	483b      	ldr	r0, [pc, #236]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000b3c:	f001 f8dc 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_EXTI_Callback+0x1f2>
    {
      keyPressed = 48; //ASCII value of 0
 8000b46:	4b3a      	ldr	r3, [pc, #232]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b48:	2230      	movs	r2, #48	@ 0x30
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e02e      	b.n	8000bac <HAL_GPIO_EXTI_Callback+0x250>
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b54:	d10b      	bne.n	8000b6e <HAL_GPIO_EXTI_Callback+0x212>
 8000b56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b5a:	4833      	ldr	r0, [pc, #204]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000b5c:	f001 f8cc 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_EXTI_Callback+0x212>
    {
      keyPressed = 56; //ASCII value of 8
 8000b66:	4b32      	ldr	r3, [pc, #200]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b68:	2238      	movs	r2, #56	@ 0x38
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e01e      	b.n	8000bac <HAL_GPIO_EXTI_Callback+0x250>
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b74:	d10b      	bne.n	8000b8e <HAL_GPIO_EXTI_Callback+0x232>
 8000b76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b7a:	482b      	ldr	r0, [pc, #172]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000b7c:	f001 f8bc 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_EXTI_Callback+0x232>
    {
      keyPressed = 53; //ASCII value of 5
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b88:	2235      	movs	r2, #53	@ 0x35
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e00e      	b.n	8000bac <HAL_GPIO_EXTI_Callback+0x250>
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b94:	d10a      	bne.n	8000bac <HAL_GPIO_EXTI_Callback+0x250>
 8000b96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b9a:	4823      	ldr	r0, [pc, #140]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000b9c:	f001 f8ac 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <HAL_GPIO_EXTI_Callback+0x250>
    {
      keyPressed = 50; //ASCII value of 2
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ba8:	2232      	movs	r2, #50	@ 0x32
 8000baa:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bb2:	481e      	ldr	r0, [pc, #120]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000bb4:	f001 f8b7 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bbe:	481b      	ldr	r0, [pc, #108]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000bc0:	f001 f8b1 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bca:	4818      	ldr	r0, [pc, #96]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000bcc:	f001 f8ab 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd6:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000bd8:	f001 f8a5 	bl	8001d26 <HAL_GPIO_WritePin>
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000be2:	d10b      	bne.n	8000bfc <HAL_GPIO_EXTI_Callback+0x2a0>
 8000be4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be8:	480f      	ldr	r0, [pc, #60]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000bea:	f001 f885 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_EXTI_Callback+0x2a0>
    {
      keyPressed = 42; //ASCII value of *
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000bf6:	222a      	movs	r2, #42	@ 0x2a
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e03a      	b.n	8000c72 <HAL_GPIO_EXTI_Callback+0x316>
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c02:	d117      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x2d8>
 8000c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c08:	4807      	ldr	r0, [pc, #28]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000c0a:	f001 f875 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00f      	beq.n	8000c34 <HAL_GPIO_EXTI_Callback+0x2d8>
    {
      keyPressed = 55; //ASCII value of 7
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000c16:	2237      	movs	r2, #55	@ 0x37
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e02a      	b.n	8000c72 <HAL_GPIO_EXTI_Callback+0x316>
 8000c1c:	20000090 	.word	0x20000090
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	2000007c 	.word	0x2000007c
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	20000000 	.word	0x20000000
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000c3a:	d10b      	bne.n	8000c54 <HAL_GPIO_EXTI_Callback+0x2f8>
 8000c3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c40:	4821      	ldr	r0, [pc, #132]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000c42:	f001 f859 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_EXTI_Callback+0x2f8>
    {
      keyPressed = 52; //ASCII value of 4
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x370>)
 8000c4e:	2234      	movs	r2, #52	@ 0x34
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e00e      	b.n	8000c72 <HAL_GPIO_EXTI_Callback+0x316>
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000c5a:	d10a      	bne.n	8000c72 <HAL_GPIO_EXTI_Callback+0x316>
 8000c5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c60:	4819      	ldr	r0, [pc, #100]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000c62:	f001 f849 	bl	8001cf8 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_GPIO_EXTI_Callback+0x316>
    {
      keyPressed = 49; //ASCII value of 1
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x370>)
 8000c6e:	2231      	movs	r2, #49	@ 0x31
 8000c70:	701a      	strb	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c78:	4815      	ldr	r0, [pc, #84]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x374>)
 8000c7a:	f001 f854 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x374>)
 8000c86:	f001 f84e 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c90:	480f      	ldr	r0, [pc, #60]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x374>)
 8000c92:	f001 f848 	bl	8001d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c9c:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x374>)
 8000c9e:	f001 f842 	bl	8001d26 <HAL_GPIO_WritePin>
    /*Configure GPIO pins : PB back to EXTI*/

    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x378>)
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x37c>)
 8000ca6:	605a      	str	r2, [r3, #4]
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x378>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
 8000cae:	4909      	ldr	r1, [pc, #36]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x378>)
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000cb2:	f000 fe9d 	bl	80019f0 <HAL_GPIO_Init>
    previousMillis = currentMillis;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x380>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x384>)
 8000cbc:	6013      	str	r3, [r2, #0]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	40010800 	.word	0x40010800
 8000cd4:	2000007c 	.word	0x2000007c
 8000cd8:	10110000 	.word	0x10110000
 8000cdc:	20000090 	.word	0x20000090
 8000ce0:	2000008c 	.word	0x2000008c

08000ce4 <Verify_Password>:
bool Verify_Password(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  if (failed_attempts >= MAX_FAILED_ATTEMPTS &&
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <Verify_Password+0x88>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	d913      	bls.n	8000d1a <Verify_Password+0x36>
	  HAL_GetTick() - lockTimestamp < LOCK_DURATION_MS)
 8000cf2:	f000 fb41 	bl	8001378 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <Verify_Password+0x8c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	1ad3      	subs	r3, r2, r3
  if (failed_attempts >= MAX_FAILED_ATTEMPTS &&
 8000cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d74 <Verify_Password+0x90>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d80a      	bhi.n	8000d1a <Verify_Password+0x36>
  {
    lcd_clear();
 8000d04:	f7ff fabc 	bl	8000280 <lcd_clear>
    lcd_send_string("Lock 5m ");
 8000d08:	481b      	ldr	r0, [pc, #108]	@ (8000d78 <Verify_Password+0x94>)
 8000d0a:	f7ff fb1f 	bl	800034c <lcd_send_string>
    HAL_Delay(1000);
 8000d0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d12:	f000 fb3b 	bl	800138c <HAL_Delay>
    return false;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e023      	b.n	8000d62 <Verify_Password+0x7e>
  }

  if (input_length != password_length)
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <Verify_Password+0x98>)
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <Verify_Password+0x9c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d001      	beq.n	8000d2a <Verify_Password+0x46>
    return false;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e01b      	b.n	8000d62 <Verify_Password+0x7e>

  for (int i = 0; i < password_length; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	e00e      	b.n	8000d4e <Verify_Password+0x6a>
    if (input_password[i] != current_password[i]) return false;
 8000d30:	4a14      	ldr	r2, [pc, #80]	@ (8000d84 <Verify_Password+0xa0>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	4913      	ldr	r1, [pc, #76]	@ (8000d88 <Verify_Password+0xa4>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	440b      	add	r3, r1
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d001      	beq.n	8000d48 <Verify_Password+0x64>
 8000d44:	2300      	movs	r3, #0
 8000d46:	e00c      	b.n	8000d62 <Verify_Password+0x7e>
  for (int i = 0; i < password_length; i++)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <Verify_Password+0x9c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	dbea      	blt.n	8000d30 <Verify_Password+0x4c>

  failed_attempts = 0;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <Verify_Password+0x88>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  return true;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000cb 	.word	0x200000cb
 8000d70:	20000098 	.word	0x20000098
 8000d74:	000493df 	.word	0x000493df
 8000d78:	08002c2c 	.word	0x08002c2c
 8000d7c:	200000ca 	.word	0x200000ca
 8000d80:	2000000a 	.word	0x2000000a
 8000d84:	200000a8 	.word	0x200000a8
 8000d88:	2000009c 	.word	0x2000009c

08000d8c <Change_Password>:
void Change_Password(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
  lcd_clear();
 8000d92:	f7ff fa75 	bl	8000280 <lcd_clear>
  lcd_send_string("New Password:");
 8000d96:	4894      	ldr	r0, [pc, #592]	@ (8000fe8 <Change_Password+0x25c>)
 8000d98:	f7ff fad8 	bl	800034c <lcd_send_string>
  lcd_put_cur(1, 0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff fa78 	bl	8000294 <lcd_put_cur>
  input_length = 0;
 8000da4:	4b91      	ldr	r3, [pc, #580]	@ (8000fec <Change_Password+0x260>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
  memset(new_password, 0, sizeof(new_password));
 8000daa:	220a      	movs	r2, #10
 8000dac:	2100      	movs	r1, #0
 8000dae:	4890      	ldr	r0, [pc, #576]	@ (8000ff0 <Change_Password+0x264>)
 8000db0:	f001 fe9c 	bl	8002aec <memset>
  lastInteraction = HAL_GetTick();
 8000db4:	f000 fae0 	bl	8001378 <HAL_GetTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a8e      	ldr	r2, [pc, #568]	@ (8000ff4 <Change_Password+0x268>)
 8000dbc:	6013      	str	r3, [r2, #0]

  while (1)
  {
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;
 8000dbe:	f000 fadb 	bl	8001378 <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b8b      	ldr	r3, [pc, #556]	@ (8000ff4 <Change_Password+0x268>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f200 8104 	bhi.w	8000fdc <Change_Password+0x250>

    if (keyPressed != -1)
 8000dd4:	4b88      	ldr	r3, [pc, #544]	@ (8000ff8 <Change_Password+0x26c>)
 8000dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8000dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dde:	d058      	beq.n	8000e92 <Change_Password+0x106>
    {
      lastInteraction = HAL_GetTick();
 8000de0:	f000 faca 	bl	8001378 <HAL_GetTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4a83      	ldr	r2, [pc, #524]	@ (8000ff4 <Change_Password+0x268>)
 8000de8:	6013      	str	r3, [r2, #0]
      uint8_t tempkey = keyPressed;
 8000dea:	4b83      	ldr	r3, [pc, #524]	@ (8000ff8 <Change_Password+0x26c>)
 8000dec:	f993 3000 	ldrsb.w	r3, [r3]
 8000df0:	70fb      	strb	r3, [r7, #3]
      keyPressed = -1;
 8000df2:	4b81      	ldr	r3, [pc, #516]	@ (8000ff8 <Change_Password+0x26c>)
 8000df4:	22ff      	movs	r2, #255	@ 0xff
 8000df6:	701a      	strb	r2, [r3, #0]

      if (tempkey == 35 && input_length == password_length) break;
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	2b23      	cmp	r3, #35	@ 0x23
 8000dfc:	d105      	bne.n	8000e0a <Change_Password+0x7e>
 8000dfe:	4b7b      	ldr	r3, [pc, #492]	@ (8000fec <Change_Password+0x260>)
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	4b7e      	ldr	r3, [pc, #504]	@ (8000ffc <Change_Password+0x270>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d047      	beq.n	8000e9a <Change_Password+0x10e>
      else if (tempkey == 68 && input_length > 0)
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2b44      	cmp	r3, #68	@ 0x44
 8000e0e:	d12e      	bne.n	8000e6e <Change_Password+0xe2>
 8000e10:	4b76      	ldr	r3, [pc, #472]	@ (8000fec <Change_Password+0x260>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d02a      	beq.n	8000e6e <Change_Password+0xe2>
      {
        input_length--;
 8000e18:	4b74      	ldr	r3, [pc, #464]	@ (8000fec <Change_Password+0x260>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b72      	ldr	r3, [pc, #456]	@ (8000fec <Change_Password+0x260>)
 8000e22:	701a      	strb	r2, [r3, #0]
        new_password[input_length] = 0;
 8000e24:	4b71      	ldr	r3, [pc, #452]	@ (8000fec <Change_Password+0x260>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b71      	ldr	r3, [pc, #452]	@ (8000ff0 <Change_Password+0x264>)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]
        lcd_put_cur(1, 0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff fa2e 	bl	8000294 <lcd_put_cur>
        lcd_send_string("                ");
 8000e38:	4871      	ldr	r0, [pc, #452]	@ (8001000 <Change_Password+0x274>)
 8000e3a:	f7ff fa87 	bl	800034c <lcd_send_string>
        lcd_put_cur(1, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fa27 	bl	8000294 <lcd_put_cur>
        for (int i = 0; i < input_length; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	e009      	b.n	8000e60 <Change_Password+0xd4>
        lcd_send_data(new_password[i]);
 8000e4c:	4a68      	ldr	r2, [pc, #416]	@ (8000ff0 <Change_Password+0x264>)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9f9 	bl	800024c <lcd_send_data>
        for (int i = 0; i < input_length; i++)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b62      	ldr	r3, [pc, #392]	@ (8000fec <Change_Password+0x260>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	dbef      	blt.n	8000e4c <Change_Password+0xc0>
 8000e6c:	e011      	b.n	8000e92 <Change_Password+0x106>
      }
      else if (input_length < 10) {
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <Change_Password+0x260>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b09      	cmp	r3, #9
 8000e74:	d80d      	bhi.n	8000e92 <Change_Password+0x106>
        new_password[input_length++] = tempkey;
 8000e76:	4b5d      	ldr	r3, [pc, #372]	@ (8000fec <Change_Password+0x260>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	b2d1      	uxtb	r1, r2
 8000e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8000fec <Change_Password+0x260>)
 8000e80:	7011      	strb	r1, [r2, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff0 <Change_Password+0x264>)
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	5453      	strb	r3, [r2, r1]
        lcd_send_data(tempkey);
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff f9dd 	bl	800024c <lcd_send_data>
      }
    }
    HAL_Delay(50);
 8000e92:	2032      	movs	r0, #50	@ 0x32
 8000e94:	f000 fa7a 	bl	800138c <HAL_Delay>
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;
 8000e98:	e791      	b.n	8000dbe <Change_Password+0x32>
  }
  lcd_clear();
 8000e9a:	f7ff f9f1 	bl	8000280 <lcd_clear>
  lcd_send_string("Confirm Pass:");
 8000e9e:	4859      	ldr	r0, [pc, #356]	@ (8001004 <Change_Password+0x278>)
 8000ea0:	f7ff fa54 	bl	800034c <lcd_send_string>
  lcd_put_cur(1, 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f7ff f9f4 	bl	8000294 <lcd_put_cur>
  memset(confirm_password, 0, sizeof(confirm_password));
 8000eac:	220a      	movs	r2, #10
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4855      	ldr	r0, [pc, #340]	@ (8001008 <Change_Password+0x27c>)
 8000eb2:	f001 fe1b 	bl	8002aec <memset>
  uint8_t confirm_length = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	72fb      	strb	r3, [r7, #11]
  lastInteraction = HAL_GetTick();
 8000eba:	f000 fa5d 	bl	8001378 <HAL_GetTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff4 <Change_Password+0x268>)
 8000ec2:	6013      	str	r3, [r2, #0]

  while (1)
  {
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;
 8000ec4:	f000 fa58 	bl	8001378 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <Change_Password+0x268>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	f200 8083 	bhi.w	8000fe0 <Change_Password+0x254>

    if (keyPressed != -1)
 8000eda:	4b47      	ldr	r3, [pc, #284]	@ (8000ff8 <Change_Password+0x26c>)
 8000edc:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d076      	beq.n	8000fd4 <Change_Password+0x248>
    {
      lastInteraction = HAL_GetTick();
 8000ee6:	f000 fa47 	bl	8001378 <HAL_GetTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a41      	ldr	r2, [pc, #260]	@ (8000ff4 <Change_Password+0x268>)
 8000eee:	6013      	str	r3, [r2, #0]
      uint8_t tempkey = keyPressed;
 8000ef0:	4b41      	ldr	r3, [pc, #260]	@ (8000ff8 <Change_Password+0x26c>)
 8000ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ef6:	70bb      	strb	r3, [r7, #2]
      keyPressed = -1;
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff8 <Change_Password+0x26c>)
 8000efa:	22ff      	movs	r2, #255	@ 0xff
 8000efc:	701a      	strb	r2, [r3, #0]

      if (tempkey == 35)
 8000efe:	78bb      	ldrb	r3, [r7, #2]
 8000f00:	2b23      	cmp	r3, #35	@ 0x23
 8000f02:	d12f      	bne.n	8000f64 <Change_Password+0x1d8>
      {
        if (confirm_length == input_length && memcmp(new_password, confirm_password, input_length) == 0)
 8000f04:	4b39      	ldr	r3, [pc, #228]	@ (8000fec <Change_Password+0x260>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	7afa      	ldrb	r2, [r7, #11]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d120      	bne.n	8000f50 <Change_Password+0x1c4>
 8000f0e:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <Change_Password+0x260>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	493c      	ldr	r1, [pc, #240]	@ (8001008 <Change_Password+0x27c>)
 8000f16:	4836      	ldr	r0, [pc, #216]	@ (8000ff0 <Change_Password+0x264>)
 8000f18:	f001 fdd8 	bl	8002acc <memcmp>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d116      	bne.n	8000f50 <Change_Password+0x1c4>
        {
          memcpy(current_password, new_password, input_length);
 8000f22:	4b32      	ldr	r3, [pc, #200]	@ (8000fec <Change_Password+0x260>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4931      	ldr	r1, [pc, #196]	@ (8000ff0 <Change_Password+0x264>)
 8000f2a:	4838      	ldr	r0, [pc, #224]	@ (800100c <Change_Password+0x280>)
 8000f2c:	f001 fe0a 	bl	8002b44 <memcpy>
          password_length = input_length;
 8000f30:	4b2e      	ldr	r3, [pc, #184]	@ (8000fec <Change_Password+0x260>)
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <Change_Password+0x270>)
 8000f36:	701a      	strb	r2, [r3, #0]
          Save_Password_To_Flash();
 8000f38:	f000 f86e 	bl	8001018 <Save_Password_To_Flash>
          lcd_clear();
 8000f3c:	f7ff f9a0 	bl	8000280 <lcd_clear>
          lcd_send_string("Password Changed");
 8000f40:	4833      	ldr	r0, [pc, #204]	@ (8001010 <Change_Password+0x284>)
 8000f42:	f7ff fa03 	bl	800034c <lcd_send_string>
          HAL_Delay(1000);
 8000f46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f4a:	f000 fa1f 	bl	800138c <HAL_Delay>
        {
          lcd_clear();
          lcd_send_string("Mismatch!");
          HAL_Delay(1000);
        }
        break;
 8000f4e:	e048      	b.n	8000fe2 <Change_Password+0x256>
          lcd_clear();
 8000f50:	f7ff f996 	bl	8000280 <lcd_clear>
          lcd_send_string("Mismatch!");
 8000f54:	482f      	ldr	r0, [pc, #188]	@ (8001014 <Change_Password+0x288>)
 8000f56:	f7ff f9f9 	bl	800034c <lcd_send_string>
          HAL_Delay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5e:	f000 fa15 	bl	800138c <HAL_Delay>
        break;
 8000f62:	e03e      	b.n	8000fe2 <Change_Password+0x256>
      }
      else if (tempkey == 68 && confirm_length > 0)
 8000f64:	78bb      	ldrb	r3, [r7, #2]
 8000f66:	2b44      	cmp	r3, #68	@ 0x44
 8000f68:	d126      	bne.n	8000fb8 <Change_Password+0x22c>
 8000f6a:	7afb      	ldrb	r3, [r7, #11]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d023      	beq.n	8000fb8 <Change_Password+0x22c>
      {
        confirm_length--;
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	72fb      	strb	r3, [r7, #11]
        confirm_password[confirm_length] = 0;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <Change_Password+0x27c>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	54d1      	strb	r1, [r2, r3]
        lcd_put_cur(1, 0);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff f987 	bl	8000294 <lcd_put_cur>
        lcd_send_string("                ");
 8000f86:	481e      	ldr	r0, [pc, #120]	@ (8001000 <Change_Password+0x274>)
 8000f88:	f7ff f9e0 	bl	800034c <lcd_send_string>
        lcd_put_cur(1, 0);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff f980 	bl	8000294 <lcd_put_cur>
        for (int i = 0; i < confirm_length; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	e009      	b.n	8000fae <Change_Password+0x222>
        lcd_send_data(confirm_password[i]);
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <Change_Password+0x27c>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff f952 	bl	800024c <lcd_send_data>
        for (int i = 0; i < confirm_length; i++)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3301      	adds	r3, #1
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dbf1      	blt.n	8000f9a <Change_Password+0x20e>
 8000fb6:	e00d      	b.n	8000fd4 <Change_Password+0x248>
      }
      else if (confirm_length < 10)
 8000fb8:	7afb      	ldrb	r3, [r7, #11]
 8000fba:	2b09      	cmp	r3, #9
 8000fbc:	d80a      	bhi.n	8000fd4 <Change_Password+0x248>
      {
        confirm_password[confirm_length++] = tempkey;
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	72fa      	strb	r2, [r7, #11]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <Change_Password+0x27c>)
 8000fc8:	78bb      	ldrb	r3, [r7, #2]
 8000fca:	5453      	strb	r3, [r2, r1]
        lcd_send_data(tempkey);
 8000fcc:	78bb      	ldrb	r3, [r7, #2]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f93c 	bl	800024c <lcd_send_data>
      }
    }
    HAL_Delay(50);
 8000fd4:	2032      	movs	r0, #50	@ 0x32
 8000fd6:	f000 f9d9 	bl	800138c <HAL_Delay>
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;
 8000fda:	e773      	b.n	8000ec4 <Change_Password+0x138>
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;
 8000fdc:	bf00      	nop
 8000fde:	e000      	b.n	8000fe2 <Change_Password+0x256>
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;
 8000fe0:	bf00      	nop
  }
}
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08002c38 	.word	0x08002c38
 8000fec:	200000ca 	.word	0x200000ca
 8000ff0:	200000b4 	.word	0x200000b4
 8000ff4:	20000094 	.word	0x20000094
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	2000000a 	.word	0x2000000a
 8001000:	08002c18 	.word	0x08002c18
 8001004:	08002c48 	.word	0x08002c48
 8001008:	200000c0 	.word	0x200000c0
 800100c:	2000009c 	.word	0x2000009c
 8001010:	08002c58 	.word	0x08002c58
 8001014:	08002c6c 	.word	0x08002c6c

08001018 <Save_Password_To_Flash>:
void Save_Password_To_Flash(void)
{
 8001018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 8001020:	f000 fb56 	bl	80016d0 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PAGEError = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]

  EraseInitStruct.Banks = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
  EraseInitStruct.NbPages = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
  EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <Save_Password_To_Flash+0x98>)
 8001032:	60fb      	str	r3, [r7, #12]
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) return;
 8001038:	463a      	mov	r2, r7
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fc2e 	bl	80018a0 <HAL_FLASHEx_Erase>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12c      	bne.n	80010a4 <Save_Password_To_Flash+0x8c>

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_USER_START_ADDR, password_length);
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <Save_Password_To_Flash+0x9c>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	4698      	mov	r8, r3
 8001054:	4691      	mov	r9, r2
 8001056:	4642      	mov	r2, r8
 8001058:	464b      	mov	r3, r9
 800105a:	4915      	ldr	r1, [pc, #84]	@ (80010b0 <Save_Password_To_Flash+0x98>)
 800105c:	2001      	movs	r0, #1
 800105e:	f000 fac7 	bl	80015f0 <HAL_FLASH_Program>
  for (int i = 0; i < password_length; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e014      	b.n	8001092 <Save_Password_To_Flash+0x7a>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_USER_START_ADDR + 2 + i * 2, current_password[i]);
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <Save_Password_To_Flash+0xa0>)
 800106c:	4413      	add	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4619      	mov	r1, r3
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <Save_Password_To_Flash+0xa4>)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2200      	movs	r2, #0
 800107e:	461c      	mov	r4, r3
 8001080:	4615      	mov	r5, r2
 8001082:	4622      	mov	r2, r4
 8001084:	462b      	mov	r3, r5
 8001086:	2001      	movs	r0, #1
 8001088:	f000 fab2 	bl	80015f0 <HAL_FLASH_Program>
  for (int i = 0; i < password_length; i++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <Save_Password_To_Flash+0x9c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	4293      	cmp	r3, r2
 800109c:	dbe4      	blt.n	8001068 <Save_Password_To_Flash+0x50>

  HAL_FLASH_Lock();
 800109e:	f000 fb3d 	bl	800171c <HAL_FLASH_Lock>
 80010a2:	e000      	b.n	80010a6 <Save_Password_To_Flash+0x8e>
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) return;
 80010a4:	bf00      	nop
}
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ae:	bf00      	nop
 80010b0:	0800f800 	.word	0x0800f800
 80010b4:	2000000a 	.word	0x2000000a
 80010b8:	04007c01 	.word	0x04007c01
 80010bc:	2000009c 	.word	0x2000009c

080010c0 <Load_Password_From_Flash>:
void Load_Password_From_Flash(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  uint8_t len = *(__IO uint16_t*)FLASH_USER_START_ADDR;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <Load_Password_From_Flash+0x70>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	70fb      	strb	r3, [r7, #3]
  if (len > 0 && len < 20)
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01c      	beq.n	800110e <Load_Password_From_Flash+0x4e>
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b13      	cmp	r3, #19
 80010d8:	d819      	bhi.n	800110e <Load_Password_From_Flash+0x4e>
  {
    password_length = len;
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <Load_Password_From_Flash+0x74>)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < len; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	e00e      	b.n	8001104 <Load_Password_From_Flash+0x44>
      current_password[i] = *(__IO uint16_t*)(FLASH_USER_START_ADDR + 2 + i * 2);
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <Load_Password_From_Flash+0x78>)
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	4a11      	ldr	r2, [pc, #68]	@ (800113c <Load_Password_From_Flash+0x7c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	460a      	mov	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < len; i++)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	dbec      	blt.n	80010e6 <Load_Password_From_Flash+0x26>
 800110c:	e00a      	b.n	8001124 <Load_Password_From_Flash+0x64>
  }
  else
  {
    memcpy(current_password, default_password, 6);
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <Load_Password_From_Flash+0x7c>)
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <Load_Password_From_Flash+0x80>)
 8001112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001116:	6018      	str	r0, [r3, #0]
 8001118:	3304      	adds	r3, #4
 800111a:	8019      	strh	r1, [r3, #0]
    password_length = 6;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <Load_Password_From_Flash+0x74>)
 800111e:	2206      	movs	r2, #6
 8001120:	701a      	strb	r2, [r3, #0]
  }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	0800f800 	.word	0x0800f800
 8001134:	2000000a 	.word	0x2000000a
 8001138:	04007c01 	.word	0x04007c01
 800113c:	2000009c 	.word	0x2000009c
 8001140:	20000004 	.word	0x20000004

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_MspInit+0x5c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <HAL_MspInit+0x5c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_MspInit+0x60>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <HAL_MspInit+0x60>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <HAL_TIM_Base_MspInit+0x34>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10b      	bne.n	80011de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_TIM_Base_MspInit+0x38>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <HAL_TIM_Base_MspInit+0x38>)
 80011cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_TIM_Base_MspInit+0x38>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	40021000 	.word	0x40021000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f888 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800124c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001250:	f000 fd82 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001254:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001258:	f000 fd7e 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800125c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001260:	f000 fd7a 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001264:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001268:	f000 fd76 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff fff8 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001282:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001298:	4c09      	ldr	r4, [pc, #36]	@ (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f001 fc29 	bl	8002afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff f865 	bl	8000378 <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012b8:	08002ca4 	.word	0x08002ca4
  ldr r2, =_sbss
 80012bc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012c0:	200000f0 	.word	0x200000f0

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f947 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff ff34 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f95f 	bl	80015d6 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f927 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000014 	.word	0x20000014
 8001350:	20000010 	.word	0x20000010

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a03      	ldr	r2, [pc, #12]	@ (8001374 <HAL_IncTick+0x20>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000014 	.word	0x20000014
 8001374:	200000cc 	.word	0x200000cc

08001378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	@ (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	200000cc 	.word	0x200000cc

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fff0 	bl	8001378 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffe0 	bl	8001378 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000014 	.word	0x20000014

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	@ (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	@ (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	@ (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800160a:	4b2f      	ldr	r3, [pc, #188]	@ (80016c8 <HAL_FLASH_Program+0xd8>)
 800160c:	7e1b      	ldrb	r3, [r3, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_FLASH_Program+0x26>
 8001612:	2302      	movs	r3, #2
 8001614:	e054      	b.n	80016c0 <HAL_FLASH_Program+0xd0>
 8001616:	4b2c      	ldr	r3, [pc, #176]	@ (80016c8 <HAL_FLASH_Program+0xd8>)
 8001618:	2201      	movs	r2, #1
 800161a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800161c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001620:	f000 f8a8 	bl	8001774 <FLASH_WaitForLastOperation>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d144      	bne.n	80016b8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d102      	bne.n	800163a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001634:	2301      	movs	r3, #1
 8001636:	757b      	strb	r3, [r7, #21]
 8001638:	e007      	b.n	800164a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d102      	bne.n	8001646 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001640:	2302      	movs	r3, #2
 8001642:	757b      	strb	r3, [r7, #21]
 8001644:	e001      	b.n	800164a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001646:	2304      	movs	r3, #4
 8001648:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800164a:	2300      	movs	r3, #0
 800164c:	75bb      	strb	r3, [r7, #22]
 800164e:	e02d      	b.n	80016ac <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	005a      	lsls	r2, r3, #1
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	eb02 0c03 	add.w	ip, r2, r3
 800165a:	7dbb      	ldrb	r3, [r7, #22]
 800165c:	0119      	lsls	r1, r3, #4
 800165e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001662:	f1c1 0620 	rsb	r6, r1, #32
 8001666:	f1a1 0020 	sub.w	r0, r1, #32
 800166a:	fa22 f401 	lsr.w	r4, r2, r1
 800166e:	fa03 f606 	lsl.w	r6, r3, r6
 8001672:	4334      	orrs	r4, r6
 8001674:	fa23 f000 	lsr.w	r0, r3, r0
 8001678:	4304      	orrs	r4, r0
 800167a:	fa23 f501 	lsr.w	r5, r3, r1
 800167e:	b2a3      	uxth	r3, r4
 8001680:	4619      	mov	r1, r3
 8001682:	4660      	mov	r0, ip
 8001684:	f000 f85a 	bl	800173c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001688:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800168c:	f000 f872 	bl	8001774 <FLASH_WaitForLastOperation>
 8001690:	4603      	mov	r3, r0
 8001692:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001694:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_FLASH_Program+0xdc>)
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	4a0c      	ldr	r2, [pc, #48]	@ (80016cc <HAL_FLASH_Program+0xdc>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80016a6:	7dbb      	ldrb	r3, [r7, #22]
 80016a8:	3301      	adds	r3, #1
 80016aa:	75bb      	strb	r3, [r7, #22]
 80016ac:	7dba      	ldrb	r2, [r7, #22]
 80016ae:	7d7b      	ldrb	r3, [r7, #21]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3cd      	bcc.n	8001650 <HAL_FLASH_Program+0x60>
 80016b4:	e000      	b.n	80016b8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80016b6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016b8:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <HAL_FLASH_Program+0xd8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	761a      	strb	r2, [r3, #24]

  return status;
 80016be:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c8:	200000d0 	.word	0x200000d0
 80016cc:	40022000 	.word	0x40022000

080016d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <HAL_FLASH_Unlock+0x40>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00d      	beq.n	8001702 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_FLASH_Unlock+0x40>)
 80016e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <HAL_FLASH_Unlock+0x44>)
 80016ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016ec:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <HAL_FLASH_Unlock+0x40>)
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <HAL_FLASH_Unlock+0x48>)
 80016f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016f2:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <HAL_FLASH_Unlock+0x40>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001702:	79fb      	ldrb	r3, [r7, #7]
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000
 8001714:	45670123 	.word	0x45670123
 8001718:	cdef89ab 	.word	0xcdef89ab

0800171c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <HAL_FLASH_Lock+0x1c>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <HAL_FLASH_Lock+0x1c>)
 8001726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800172a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000

0800173c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <FLASH_Program_HalfWord+0x30>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800174e:	4b08      	ldr	r3, [pc, #32]	@ (8001770 <FLASH_Program_HalfWord+0x34>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	4a07      	ldr	r2, [pc, #28]	@ (8001770 <FLASH_Program_HalfWord+0x34>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	887a      	ldrh	r2, [r7, #2]
 800175e:	801a      	strh	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200000d0 	.word	0x200000d0
 8001770:	40022000 	.word	0x40022000

08001774 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff fdfc 	bl	8001378 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001782:	e010      	b.n	80017a6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178a:	d00c      	beq.n	80017a6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <FLASH_WaitForLastOperation+0x2e>
 8001792:	f7ff fdf1 	bl	8001378 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d201      	bcs.n	80017a6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e025      	b.n	80017f2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1e8      	bne.n	8001784 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017c0:	2220      	movs	r2, #32
 80017c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017c4:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10b      	bne.n	80017e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <FLASH_WaitForLastOperation+0x88>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80017e8:	f000 f80a 	bl	8001800 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40022000 	.word	0x40022000

08001800 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800180a:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001816:	4b21      	ldr	r3, [pc, #132]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	4a1f      	ldr	r2, [pc, #124]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001820:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800182a:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001836:	4b19      	ldr	r3, [pc, #100]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	4a17      	ldr	r2, [pc, #92]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001840:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	4a0f      	ldr	r2, [pc, #60]	@ (800189c <FLASH_SetErrorCode+0x9c>)
 8001860:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f240 1201 	movw	r2, #257	@ 0x101
 8001874:	4293      	cmp	r3, r2
 8001876:	d106      	bne.n	8001886 <FLASH_SetErrorCode+0x86>
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 800187e:	f023 0301 	bic.w	r3, r3, #1
 8001882:	61d3      	str	r3, [r2, #28]
}  
 8001884:	e002      	b.n	800188c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001886:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <FLASH_SetErrorCode+0x98>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60d3      	str	r3, [r2, #12]
}  
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40022000 	.word	0x40022000
 800189c:	200000d0 	.word	0x200000d0

080018a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <HAL_FLASHEx_Erase+0xd0>)
 80018b4:	7e1b      	ldrb	r3, [r3, #24]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <HAL_FLASHEx_Erase+0x1e>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e053      	b.n	8001966 <HAL_FLASHEx_Erase+0xc6>
 80018be:	4b2c      	ldr	r3, [pc, #176]	@ (8001970 <HAL_FLASHEx_Erase+0xd0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018d0:	f7ff ff50 	bl	8001774 <FLASH_WaitForLastOperation>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d141      	bne.n	800195e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 f84c 	bl	8001978 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018e4:	f7ff ff46 	bl	8001774 <FLASH_WaitForLastOperation>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	4a20      	ldr	r2, [pc, #128]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6113      	str	r3, [r2, #16]
 80018f8:	e031      	b.n	800195e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80018fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018fe:	f7ff ff39 	bl	8001774 <FLASH_WaitForLastOperation>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d12a      	bne.n	800195e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
 800190e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	e019      	b.n	800194c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f000 f849 	bl	80019b0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800191e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001922:	f7ff ff27 	bl	8001774 <FLASH_WaitForLastOperation>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <HAL_FLASHEx_Erase+0xd4>)
 8001930:	f023 0302 	bic.w	r3, r3, #2
 8001934:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	601a      	str	r2, [r3, #0]
            break;
 8001942:	e00c      	b.n	800195e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800194a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	029a      	lsls	r2, r3, #10
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4413      	add	r3, r2
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	d3dc      	bcc.n	8001918 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_FLASHEx_Erase+0xd0>)
 8001960:	2200      	movs	r2, #0
 8001962:	761a      	strb	r2, [r3, #24]

  return status;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200000d0 	.word	0x200000d0
 8001974:	40022000 	.word	0x40022000

08001978 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <FLASH_MassErase+0x30>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <FLASH_MassErase+0x34>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <FLASH_MassErase+0x34>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <FLASH_MassErase+0x34>)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <FLASH_MassErase+0x34>)
 8001998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800199c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	200000d0 	.word	0x200000d0
 80019ac:	40022000 	.word	0x40022000

080019b0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <FLASH_PageErase+0x38>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <FLASH_PageErase+0x3c>)
 80019d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	200000d0 	.word	0x200000d0
 80019ec:	40022000 	.word	0x40022000

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b08b      	sub	sp, #44	@ 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	e169      	b.n	8001cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a04:	2201      	movs	r2, #1
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8158 	bne.w	8001cd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a9a      	ldr	r2, [pc, #616]	@ (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d05e      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a2c:	4a98      	ldr	r2, [pc, #608]	@ (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d875      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a32:	4a98      	ldr	r2, [pc, #608]	@ (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d058      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a38:	4a96      	ldr	r2, [pc, #600]	@ (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d86f      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a3e:	4a96      	ldr	r2, [pc, #600]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d052      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a44:	4a94      	ldr	r2, [pc, #592]	@ (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d869      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a4a:	4a94      	ldr	r2, [pc, #592]	@ (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04c      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a50:	4a92      	ldr	r2, [pc, #584]	@ (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d863      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a56:	4a92      	ldr	r2, [pc, #584]	@ (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d046      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a5c:	4a90      	ldr	r2, [pc, #576]	@ (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d85d      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d82a      	bhi.n	8001abc <HAL_GPIO_Init+0xcc>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d859      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a70 <HAL_GPIO_Init+0x80>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001ac5 	.word	0x08001ac5
 8001a78:	08001ad7 	.word	0x08001ad7
 8001a7c:	08001b19 	.word	0x08001b19
 8001a80:	08001b1f 	.word	0x08001b1f
 8001a84:	08001b1f 	.word	0x08001b1f
 8001a88:	08001b1f 	.word	0x08001b1f
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b1f 	.word	0x08001b1f
 8001a98:	08001b1f 	.word	0x08001b1f
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b1f 	.word	0x08001b1f
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001b1f 	.word	0x08001b1f
 8001aac:	08001b1f 	.word	0x08001b1f
 8001ab0:	08001b1f 	.word	0x08001b1f
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	4a79      	ldr	r2, [pc, #484]	@ (8001ca4 <HAL_GPIO_Init+0x2b4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac2:	e02c      	b.n	8001b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e029      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e024      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	3308      	adds	r3, #8
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e01f      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e01a      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af2:	2304      	movs	r3, #4
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	611a      	str	r2, [r3, #16]
          break;
 8001b0a:	e009      	b.n	8001b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	615a      	str	r2, [r3, #20]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          break;
 8001b1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	@ 0xff
 8001b24:	d801      	bhi.n	8001b2a <HAL_GPIO_Init+0x13a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_Init+0x13e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	@ 0xff
 8001b34:	d802      	bhi.n	8001b3c <HAL_GPIO_Init+0x14c>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x152>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80b1 	beq.w	8001cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b70:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b88:	4a48      	ldr	r2, [pc, #288]	@ (8001cac <HAL_GPIO_Init+0x2bc>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a40      	ldr	r2, [pc, #256]	@ (8001cb0 <HAL_GPIO_Init+0x2c0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_GPIO_Init+0x1ec>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cb4 <HAL_GPIO_Init+0x2c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00d      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <HAL_GPIO_Init+0x1e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3d      	ldr	r2, [pc, #244]	@ (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_GPIO_Init+0x1e0>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e006      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e004      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be0:	f002 0203 	and.w	r2, r2, #3
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	4093      	lsls	r3, r2
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bee:	492f      	ldr	r1, [pc, #188]	@ (8001cac <HAL_GPIO_Init+0x2bc>)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c08:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	492c      	ldr	r1, [pc, #176]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4928      	ldr	r1, [pc, #160]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c30:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4922      	ldr	r1, [pc, #136]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	60cb      	str	r3, [r1, #12]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	491e      	ldr	r1, [pc, #120]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4918      	ldr	r1, [pc, #96]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4914      	ldr	r1, [pc, #80]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d021      	beq.n	8001cc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	490e      	ldr	r1, [pc, #56]	@ (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e021      	b.n	8001cd2 <HAL_GPIO_Init+0x2e2>
 8001c8e:	bf00      	nop
 8001c90:	10320000 	.word	0x10320000
 8001c94:	10310000 	.word	0x10310000
 8001c98:	10220000 	.word	0x10220000
 8001c9c:	10210000 	.word	0x10210000
 8001ca0:	10120000 	.word	0x10120000
 8001ca4:	10110000 	.word	0x10110000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	40010c00 	.word	0x40010c00
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40011400 	.word	0x40011400
 8001cc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4909      	ldr	r1, [pc, #36]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f ae8e 	bne.w	8001a04 <HAL_GPIO_Init+0x14>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	372c      	adds	r7, #44	@ 0x2c
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
 8001d14:	e001      	b.n	8001d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]
 8001d32:	4613      	mov	r3, r2
 8001d34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d36:	787b      	ldrb	r3, [r7, #1]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3c:	887a      	ldrh	r2, [r7, #2]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d42:	e003      	b.n	8001d4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	041a      	lsls	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	611a      	str	r2, [r3, #16]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fdf0 	bl	800095c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e272      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b92      	ldr	r3, [pc, #584]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b89      	ldr	r3, [pc, #548]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e24c      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x76>
 8001df0:	4b80      	ldr	r3, [pc, #512]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b78      	ldr	r3, [pc, #480]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xbc>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e44:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b68      	ldr	r3, [pc, #416]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a67      	ldr	r2, [pc, #412]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fa88 	bl	8001378 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fa84 	bl	8001378 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e200      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe4>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fa74 	bl	8001378 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fa70 	bl	8001378 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ec      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x10c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ece:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001eda:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1c0      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4939      	ldr	r1, [pc, #228]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa29 	bl	8001378 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa25 	bl	8001378 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1a1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4927      	ldr	r1, [pc, #156]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa08 	bl	8001378 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa04 	bl	8001378 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e180      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03a      	beq.n	800200c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7ff f9e8 	bl	8001378 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff f9e4 	bl	8001378 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e160      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 fa9c 	bl	8002508 <RCC_Delay>
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff f9ce 	bl	8001378 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff f9ca 	bl	8001378 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e146      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	42420000 	.word	0x42420000
 8001ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b92      	ldr	r3, [pc, #584]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e9      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a6 	beq.w	8002166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b8b      	ldr	r3, [pc, #556]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b88      	ldr	r3, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a87      	ldr	r2, [pc, #540]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b7f      	ldr	r3, [pc, #508]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7e      	ldr	r2, [pc, #504]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7ff f98b 	bl	8001378 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7ff f987 	bl	8001378 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	@ 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e103      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x312>
 800208c:	4b6f      	ldr	r3, [pc, #444]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e02d      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020a2:	4b6a      	ldr	r3, [pc, #424]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a69      	ldr	r2, [pc, #420]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b67      	ldr	r3, [pc, #412]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a66      	ldr	r2, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x356>
 80020c4:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a60      	ldr	r2, [pc, #384]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020de:	4b5b      	ldr	r3, [pc, #364]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b58      	ldr	r3, [pc, #352]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a57      	ldr	r2, [pc, #348]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7ff f93b 	bl	8001378 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7ff f937 	bl	8001378 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0b1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b4b      	ldr	r3, [pc, #300]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x37e>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7ff f925 	bl	8001378 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7ff f921 	bl	8001378 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e09b      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b40      	ldr	r3, [pc, #256]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a3b      	ldr	r2, [pc, #236]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b36      	ldr	r3, [pc, #216]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d061      	beq.n	8002240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d146      	bne.n	8002212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff f8f5 	bl	8001378 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff f8f1 	bl	8001378 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e06d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ba:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4921      	ldr	r1, [pc, #132]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	430b      	orrs	r3, r1
 80021de:	491b      	ldr	r1, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f8c5 	bl	8001378 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff f8c1 	bl	8001378 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46a>
 8002210:	e035      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f8ae 	bl	8001378 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7ff f8aa 	bl	8001378 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e026      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x498>
 800223e:	e01e      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e019      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_OscConfig+0x500>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b6a      	ldr	r3, [pc, #424]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b67      	ldr	r3, [pc, #412]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4965      	ldr	r1, [pc, #404]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800230a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e073      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4936      	ldr	r1, [pc, #216]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fffc 	bl	8001378 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fff8 	bl	8001378 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4922      	ldr	r1, [pc, #136]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <HAL_RCC_ClockConfig+0x1cc>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe ff5a 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	08002c78 	.word	0x08002c78
 8002458:	2000000c 	.word	0x2000000c
 800245c:	20000010 	.word	0x20000010

08002460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x30>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x36>
 800248e:	e027      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e027      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0c5b      	lsrs	r3, r3, #17
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e004      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08002c88 	.word	0x08002c88
 8002500:	08002c98 	.word	0x08002c98
 8002504:	003d0900 	.word	0x003d0900

08002508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <RCC_Delay+0x34>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <RCC_Delay+0x38>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002524:	bf00      	nop
  }
  while (Delay --);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <RCC_Delay+0x1c>
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	2000000c 	.word	0x2000000c
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e041      	b.n	80025da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe fe22 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 f940 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d001      	beq.n	80025fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a18      	ldr	r2, [pc, #96]	@ (800266c <HAL_TIM_Base_Start+0x88>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_TIM_Base_Start+0x48>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002616:	d009      	beq.n	800262c <HAL_TIM_Base_Start+0x48>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a14      	ldr	r2, [pc, #80]	@ (8002670 <HAL_TIM_Base_Start+0x8c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIM_Base_Start+0x48>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <HAL_TIM_Base_Start+0x90>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d010      	beq.n	8002660 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	e007      	b.n	8002660 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800

08002678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_TIM_ConfigClockSource+0x1c>
 8002690:	2302      	movs	r3, #2
 8002692:	e0b4      	b.n	80027fe <HAL_TIM_ConfigClockSource+0x186>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026cc:	d03e      	beq.n	800274c <HAL_TIM_ConfigClockSource+0xd4>
 80026ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d2:	f200 8087 	bhi.w	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026da:	f000 8086 	beq.w	80027ea <HAL_TIM_ConfigClockSource+0x172>
 80026de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e2:	d87f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b70      	cmp	r3, #112	@ 0x70
 80026e6:	d01a      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xa6>
 80026e8:	2b70      	cmp	r3, #112	@ 0x70
 80026ea:	d87b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b60      	cmp	r3, #96	@ 0x60
 80026ee:	d050      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x11a>
 80026f0:	2b60      	cmp	r3, #96	@ 0x60
 80026f2:	d877      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b50      	cmp	r3, #80	@ 0x50
 80026f6:	d03c      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xfa>
 80026f8:	2b50      	cmp	r3, #80	@ 0x50
 80026fa:	d873      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 80026fc:	2b40      	cmp	r3, #64	@ 0x40
 80026fe:	d058      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d86f      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002704:	2b30      	cmp	r3, #48	@ 0x30
 8002706:	d064      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002708:	2b30      	cmp	r3, #48	@ 0x30
 800270a:	d86b      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b20      	cmp	r3, #32
 800270e:	d060      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d867      	bhi.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b00      	cmp	r3, #0
 8002716:	d05c      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002718:	2b10      	cmp	r3, #16
 800271a:	d05a      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	e062      	b.n	80027e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	f000 f950 	bl	80029d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	609a      	str	r2, [r3, #8]
      break;
 800274a:	e04f      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800275c:	f000 f939 	bl	80029d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800276e:	609a      	str	r2, [r3, #8]
      break;
 8002770:	e03c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277e:	461a      	mov	r2, r3
 8002780:	f000 f8b0 	bl	80028e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2150      	movs	r1, #80	@ 0x50
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f907 	bl	800299e <TIM_ITRx_SetConfig>
      break;
 8002790:	e02c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 f8ce 	bl	8002940 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2160      	movs	r1, #96	@ 0x60
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8f7 	bl	800299e <TIM_ITRx_SetConfig>
      break;
 80027b0:	e01c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f890 	bl	80028e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2140      	movs	r1, #64	@ 0x40
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f8e7 	bl	800299e <TIM_ITRx_SetConfig>
      break;
 80027d0:	e00c      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	4610      	mov	r0, r2
 80027de:	f000 f8de 	bl	800299e <TIM_ITRx_SetConfig>
      break;
 80027e2:	e003      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      break;
 80027e8:	e000      	b.n	80027ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a2f      	ldr	r2, [pc, #188]	@ (80028d8 <TIM_Base_SetConfig+0xd0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00b      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002826:	d007      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <TIM_Base_SetConfig+0xd4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a2b      	ldr	r2, [pc, #172]	@ (80028e0 <TIM_Base_SetConfig+0xd8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <TIM_Base_SetConfig+0xd0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <TIM_Base_SetConfig+0xd4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <TIM_Base_SetConfig+0xd8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <TIM_Base_SetConfig+0xd0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f023 0201 	bic.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]
  }
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800

080028e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0201 	bic.w	r2, r3, #1
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800290e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f023 030a 	bic.w	r3, r3, #10
 8002920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	621a      	str	r2, [r3, #32]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f023 0210 	bic.w	r2, r3, #16
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800296a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	031b      	lsls	r3, r3, #12
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800297c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	621a      	str	r2, [r3, #32]
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f043 0307 	orr.w	r3, r3, #7
 80029c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	609a      	str	r2, [r3, #8]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	021a      	lsls	r2, r3, #8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	609a      	str	r2, [r3, #8]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e046      	b.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a16      	ldr	r2, [pc, #88]	@ (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a74:	d009      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a10      	ldr	r2, [pc, #64]	@ (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10c      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40000800 	.word	0x40000800

08002acc <memcmp>:
 8002acc:	b510      	push	{r4, lr}
 8002ace:	3901      	subs	r1, #1
 8002ad0:	4402      	add	r2, r0
 8002ad2:	4290      	cmp	r0, r2
 8002ad4:	d101      	bne.n	8002ada <memcmp+0xe>
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e005      	b.n	8002ae6 <memcmp+0x1a>
 8002ada:	7803      	ldrb	r3, [r0, #0]
 8002adc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	d001      	beq.n	8002ae8 <memcmp+0x1c>
 8002ae4:	1b18      	subs	r0, r3, r4
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	3001      	adds	r0, #1
 8002aea:	e7f2      	b.n	8002ad2 <memcmp+0x6>

08002aec <memset>:
 8002aec:	4603      	mov	r3, r0
 8002aee:	4402      	add	r2, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	2600      	movs	r6, #0
 8002b00:	4d0c      	ldr	r5, [pc, #48]	@ (8002b34 <__libc_init_array+0x38>)
 8002b02:	4c0d      	ldr	r4, [pc, #52]	@ (8002b38 <__libc_init_array+0x3c>)
 8002b04:	1b64      	subs	r4, r4, r5
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	f000 f828 	bl	8002b60 <_init>
 8002b10:	2600      	movs	r6, #0
 8002b12:	4d0a      	ldr	r5, [pc, #40]	@ (8002b3c <__libc_init_array+0x40>)
 8002b14:	4c0a      	ldr	r4, [pc, #40]	@ (8002b40 <__libc_init_array+0x44>)
 8002b16:	1b64      	subs	r4, r4, r5
 8002b18:	10a4      	asrs	r4, r4, #2
 8002b1a:	42a6      	cmp	r6, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b24:	4798      	blx	r3
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2e:	4798      	blx	r3
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08002c9c 	.word	0x08002c9c
 8002b38:	08002c9c 	.word	0x08002c9c
 8002b3c:	08002c9c 	.word	0x08002c9c
 8002b40:	08002ca0 	.word	0x08002ca0

08002b44 <memcpy>:
 8002b44:	440a      	add	r2, r1
 8002b46:	4291      	cmp	r1, r2
 8002b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b4c:	d100      	bne.n	8002b50 <memcpy+0xc>
 8002b4e:	4770      	bx	lr
 8002b50:	b510      	push	{r4, lr}
 8002b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b56:	4291      	cmp	r1, r2
 8002b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b5c:	d1f9      	bne.n	8002b52 <memcpy+0xe>
 8002b5e:	bd10      	pop	{r4, pc}

08002b60 <_init>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr

08002b6c <_fini>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr
