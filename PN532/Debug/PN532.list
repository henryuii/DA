
PN532.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080063d8  080063d8  000073d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006568  08006568  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006568  08006568  00007568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006570  08006570  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006570  08006570  00007570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006574  08006574  00007574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006578  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  080065d4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080065d4  000082d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc6f  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  00014cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00016ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000951  00000000  00000000  00017788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017971  00000000  00000000  000180d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f259  00000000  00000000  0002fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086735  00000000  00000000  0003eca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c53d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000c541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c8ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080063c0 	.word	0x080063c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080063c0 	.word	0x080063c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <print_debug>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_debug(char* str)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	2364      	movs	r3, #100	@ 0x64
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4803      	ldr	r0, [pc, #12]	@ (8000180 <print_debug+0x24>)
 8000174:	f004 fe9f 	bl	8004eb6 <HAL_UART_Transmit>
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	20000124 	.word	0x20000124

08000184 <print_hex>:

// Hàm hiển thị hex
void print_hex(uint8_t* data, uint8_t length)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	70fb      	strb	r3, [r7, #3]
  char buffer[3];
  for (uint8_t i = 0; i < length; i++) {
 8000190:	2300      	movs	r3, #0
 8000192:	73fb      	strb	r3, [r7, #15]
 8000194:	e007      	b.n	80001a6 <print_hex+0x22>
   // sprintf(buffer, "%02X ", data[i]);
    print_debug(buffer);
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	4618      	mov	r0, r3
 800019c:	f7ff ffde 	bl	800015c <print_debug>
  for (uint8_t i = 0; i < length; i++) {
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	3301      	adds	r3, #1
 80001a4:	73fb      	strb	r3, [r7, #15]
 80001a6:	7bfa      	ldrb	r2, [r7, #15]
 80001a8:	78fb      	ldrb	r3, [r7, #3]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d3f3      	bcc.n	8000196 <print_hex+0x12>
  }
}
 80001ae:	bf00      	nop
 80001b0:	bf00      	nop
 80001b2:	3710      	adds	r7, #16
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b0a4      	sub	sp, #144	@ 0x90
 80001bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001be:	f000 ff79 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c2:	f000 f8b1 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c6:	f000 f983 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001ca:	f000 f921 	bl	8000410 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80001ce:	f000 f955 	bl	800047c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80001d2:	f000 f8ef 	bl	80003b4 <MX_I2C1_Init>


  char buffer[100];

  // Initialize PN532
  print_debug("Initializing PN532 NFC reader...\r\n");
 80001d6:	4846      	ldr	r0, [pc, #280]	@ (80002f0 <main+0x138>)
 80001d8:	f7ff ffc0 	bl	800015c <print_debug>
  if (!pn532_init(&nfc_reader, &hi2c1, GPIOA, GPIO_PIN_1)) {
 80001dc:	2302      	movs	r3, #2
 80001de:	4a45      	ldr	r2, [pc, #276]	@ (80002f4 <main+0x13c>)
 80001e0:	4945      	ldr	r1, [pc, #276]	@ (80002f8 <main+0x140>)
 80001e2:	4846      	ldr	r0, [pc, #280]	@ (80002fc <main+0x144>)
 80001e4:	f000 f9f4 	bl	80005d0 <pn532_init>
 80001e8:	4603      	mov	r3, r0
 80001ea:	f083 0301 	eor.w	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d004      	beq.n	80001fe <main+0x46>
    print_debug("Error: Could not initialize PN532\r\n");
 80001f4:	4842      	ldr	r0, [pc, #264]	@ (8000300 <main+0x148>)
 80001f6:	f7ff ffb1 	bl	800015c <print_debug>
    Error_Handler();
 80001fa:	f000 f9e3 	bl	80005c4 <Error_Handler>
  }

  // Get firmware version
  uint32_t firmware_version = pn532_get_firmware_version(&nfc_reader);
 80001fe:	483f      	ldr	r0, [pc, #252]	@ (80002fc <main+0x144>)
 8000200:	f000 fa14 	bl	800062c <pn532_get_firmware_version>
 8000204:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  if (firmware_version) {
 8000208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800020c:	2b00      	cmp	r3, #0
 800020e:	d012      	beq.n	8000236 <main+0x7e>
	  sprintf(buffer, "Found PN532 with firmware version: %u.%u\r\n",
	          (unsigned int)((firmware_version >> 16) & 0xFF),
 8000210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000214:	0c1b      	lsrs	r3, r3, #16
	  sprintf(buffer, "Found PN532 with firmware version: %u.%u\r\n",
 8000216:	b2da      	uxtb	r2, r3
	          (unsigned int)((firmware_version >> 8) & 0xFF));
 8000218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800021c:	0a1b      	lsrs	r3, r3, #8
	  sprintf(buffer, "Found PN532 with firmware version: %u.%u\r\n",
 800021e:	b2db      	uxtb	r3, r3
 8000220:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000224:	4937      	ldr	r1, [pc, #220]	@ (8000304 <main+0x14c>)
 8000226:	f005 fc0b 	bl	8005a40 <siprintf>
    print_debug(buffer);
 800022a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022e:	4618      	mov	r0, r3
 8000230:	f7ff ff94 	bl	800015c <print_debug>
 8000234:	e004      	b.n	8000240 <main+0x88>
  } else {
    print_debug("Error: Could not get firmware version\r\n");
 8000236:	4834      	ldr	r0, [pc, #208]	@ (8000308 <main+0x150>)
 8000238:	f7ff ff90 	bl	800015c <print_debug>
    Error_Handler();
 800023c:	f000 f9c2 	bl	80005c4 <Error_Handler>
  }

  print_debug("Waiting for RFID/NFC card...\r\n");
 8000240:	4832      	ldr	r0, [pc, #200]	@ (800030c <main+0x154>)
 8000242:	f7ff ff8b 	bl	800015c <print_debug>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (pn532_read_passive_target(&nfc_reader)) {
 8000246:	482d      	ldr	r0, [pc, #180]	@ (80002fc <main+0x144>)
 8000248:	f000 fa72 	bl	8000730 <pn532_read_passive_target>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d049      	beq.n	80002e6 <main+0x12e>
	       // Get UID
	       uint8_t uid[MIFARE_UID_MAX_LENGTH];
	       uint8_t uid_length;

	       if (pn532_get_uid(&nfc_reader, uid, &uid_length)) {
 8000252:	f107 021b 	add.w	r2, r7, #27
 8000256:	f107 031c 	add.w	r3, r7, #28
 800025a:	4619      	mov	r1, r3
 800025c:	4827      	ldr	r0, [pc, #156]	@ (80002fc <main+0x144>)
 800025e:	f000 fac1 	bl	80007e4 <pn532_get_uid>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d03e      	beq.n	80002e6 <main+0x12e>
	         print_debug("Card detected! UID: ");
 8000268:	4829      	ldr	r0, [pc, #164]	@ (8000310 <main+0x158>)
 800026a:	f7ff ff77 	bl	800015c <print_debug>
	         print_hex(uid, uid_length);
 800026e:	7efa      	ldrb	r2, [r7, #27]
 8000270:	f107 031c 	add.w	r3, r7, #28
 8000274:	4611      	mov	r1, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ff84 	bl	8000184 <print_hex>
	         print_debug("\r\n");
 800027c:	4825      	ldr	r0, [pc, #148]	@ (8000314 <main+0x15c>)
 800027e:	f7ff ff6d 	bl	800015c <print_debug>

	         // Example: Read data from block 4 (first data block in Mifare Classic)
	         // Note: You need authentication before reading
	         uint8_t mifare_key[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; // Default key
 8000282:	4a25      	ldr	r2, [pc, #148]	@ (8000318 <main+0x160>)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800028c:	6018      	str	r0, [r3, #0]
 800028e:	3304      	adds	r3, #4
 8000290:	8019      	strh	r1, [r3, #0]

	         if (pn532_mifare_auth(&nfc_reader, 4, mifare_key, MIFARE_CMD_AUTH_A)) {
 8000292:	f107 0214 	add.w	r2, r7, #20
 8000296:	2360      	movs	r3, #96	@ 0x60
 8000298:	2104      	movs	r1, #4
 800029a:	4818      	ldr	r0, [pc, #96]	@ (80002fc <main+0x144>)
 800029c:	f000 fac0 	bl	8000820 <pn532_mifare_auth>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d018      	beq.n	80002d8 <main+0x120>
	           uint8_t block_data[16];

	           if (pn532_mifare_read_block(&nfc_reader, 4, block_data)) {
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	461a      	mov	r2, r3
 80002aa:	2104      	movs	r1, #4
 80002ac:	4813      	ldr	r0, [pc, #76]	@ (80002fc <main+0x144>)
 80002ae:	f000 fb4a 	bl	8000946 <pn532_mifare_read_block>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <main+0x118>
	             print_debug("Block 4 data: ");
 80002b8:	4818      	ldr	r0, [pc, #96]	@ (800031c <main+0x164>)
 80002ba:	f7ff ff4f 	bl	800015c <print_debug>
	             print_hex(block_data, 16);
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2110      	movs	r1, #16
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ff5e 	bl	8000184 <print_hex>
	             print_debug("\r\n");
 80002c8:	4812      	ldr	r0, [pc, #72]	@ (8000314 <main+0x15c>)
 80002ca:	f7ff ff47 	bl	800015c <print_debug>
 80002ce:	e006      	b.n	80002de <main+0x126>
	           } else {
	             print_debug("Failed to read block 4\r\n");
 80002d0:	4813      	ldr	r0, [pc, #76]	@ (8000320 <main+0x168>)
 80002d2:	f7ff ff43 	bl	800015c <print_debug>
 80002d6:	e002      	b.n	80002de <main+0x126>
	           }
	         } else {
	           print_debug("Authentication failed\r\n");
 80002d8:	4812      	ldr	r0, [pc, #72]	@ (8000324 <main+0x16c>)
 80002da:	f7ff ff3f 	bl	800015c <print_debug>
	         }

	         // Wait before checking for a new card
	         HAL_Delay(1000);
 80002de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002e2:	f000 ff49 	bl	8001178 <HAL_Delay>
	       }
	     }

	     HAL_Delay(100); // Small delay between checks
 80002e6:	2064      	movs	r0, #100	@ 0x64
 80002e8:	f000 ff46 	bl	8001178 <HAL_Delay>
	  if (pn532_read_passive_target(&nfc_reader)) {
 80002ec:	e7ab      	b.n	8000246 <main+0x8e>
 80002ee:	bf00      	nop
 80002f0:	080063d8 	.word	0x080063d8
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000078 	.word	0x20000078
 80002fc:	2000016c 	.word	0x2000016c
 8000300:	080063fc 	.word	0x080063fc
 8000304:	08006420 	.word	0x08006420
 8000308:	0800644c 	.word	0x0800644c
 800030c:	08006474 	.word	0x08006474
 8000310:	08006494 	.word	0x08006494
 8000314:	080064ac 	.word	0x080064ac
 8000318:	080064f4 	.word	0x080064f4
 800031c:	080064b0 	.word	0x080064b0
 8000320:	080064c0 	.word	0x080064c0
 8000324:	080064dc 	.word	0x080064dc

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	@ 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	@ 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f005 fbb2 	bl	8005aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	2302      	movs	r3, #2
 800035e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000366:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800036a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0318 	add.w	r3, r7, #24
 8000370:	4618      	mov	r0, r3
 8000372:	f003 ffc1 	bl	80042f8 <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800037c:	f000 f922 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000384:	2302      	movs	r3, #2
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000390:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2102      	movs	r1, #2
 800039a:	4618      	mov	r0, r3
 800039c:	f004 fa2e 	bl	80047fc <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003a6:	f000 f90d 	bl	80005c4 <Error_Handler>
  }
}
 80003aa:	bf00      	nop
 80003ac:	3740      	adds	r7, #64	@ 0x40
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003ba:	4a13      	ldr	r2, [pc, #76]	@ (8000408 <MX_I2C1_Init+0x54>)
 80003bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003be:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003c0:	4a12      	ldr	r2, [pc, #72]	@ (800040c <MX_I2C1_Init+0x58>)
 80003c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_I2C1_Init+0x50>)
 80003f2:	f001 fa67 	bl	80018c4 <HAL_I2C_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003fc:	f000 f8e2 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000078 	.word	0x20000078
 8000408:	40005400 	.word	0x40005400
 800040c:	000186a0 	.word	0x000186a0

08000410 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000414:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000416:	4a18      	ldr	r2, [pc, #96]	@ (8000478 <MX_SPI1_Init+0x68>)
 8000418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800041a:	4b16      	ldr	r3, [pc, #88]	@ (8000474 <MX_SPI1_Init+0x64>)
 800041c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000422:	4b14      	ldr	r3, [pc, #80]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_SPI1_Init+0x64>)
 800043c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000444:	2218      	movs	r2, #24
 8000446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MX_SPI1_Init+0x64>)
 800045c:	220a      	movs	r2, #10
 800045e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	@ (8000474 <MX_SPI1_Init+0x64>)
 8000462:	f004 fb59 	bl	8004b18 <HAL_SPI_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800046c:	f000 f8aa 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	200000cc 	.word	0x200000cc
 8000478:	40013000 	.word	0x40013000

0800047c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000480:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000482:	4a12      	ldr	r2, [pc, #72]	@ (80004cc <MX_USART1_UART_Init+0x50>)
 8000484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000486:	4b10      	ldr	r3, [pc, #64]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800048c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <MX_USART1_UART_Init+0x4c>)
 80004b4:	f004 fcaf 	bl	8004e16 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004be:	f000 f881 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000124 	.word	0x20000124
 80004cc:	40013800 	.word	0x40013800

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e4:	4b33      	ldr	r3, [pc, #204]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a32      	ldr	r2, [pc, #200]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b30      	ldr	r3, [pc, #192]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0310 	and.w	r3, r3, #16
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fc:	4b2d      	ldr	r3, [pc, #180]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2c      	ldr	r2, [pc, #176]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2a      	ldr	r3, [pc, #168]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a26      	ldr	r2, [pc, #152]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a20      	ldr	r2, [pc, #128]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <MX_GPIO_Init+0xe4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054a:	481b      	ldr	r0, [pc, #108]	@ (80005b8 <MX_GPIO_Init+0xe8>)
 800054c:	f001 f9a1 	bl	8001892 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2101      	movs	r1, #1
 8000554:	4819      	ldr	r0, [pc, #100]	@ (80005bc <MX_GPIO_Init+0xec>)
 8000556:	f001 f99c 	bl	8001892 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800055a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4811      	ldr	r0, [pc, #68]	@ (80005b8 <MX_GPIO_Init+0xe8>)
 8000574:	f000 fff2 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_GPIO_Init+0xf0>)
 800058c:	f000 ffe6 	bl	800155c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000590:	2301      	movs	r3, #1
 8000592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <MX_GPIO_Init+0xec>)
 80005a8:	f000 ffd8 	bl	800155c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40011000 	.word	0x40011000
 80005bc:	40010c00 	.word	0x40010c00
 80005c0:	40010800 	.word	0x40010800

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <Error_Handler+0x8>

080005d0 <pn532_init>:
static bool pn532_read_ack(PN532 *pn532);
static bool pn532_write_command(PN532 *pn532, uint8_t *command, uint8_t command_length);
static bool pn532_read_response(PN532 *pn532, uint8_t *response, uint8_t *response_length, uint16_t timeout);
static uint8_t pn532_calculate_checksum(uint8_t *data, uint8_t length);

bool pn532_init(PN532 *pn532, I2C_HandleTypeDef *hi2c, GPIO_TypeDef *irq_port, uint16_t irq_pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	807b      	strh	r3, [r7, #2]
    pn532->i2c = hi2c;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	601a      	str	r2, [r3, #0]
    pn532->irq_port = irq_port;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	605a      	str	r2, [r3, #4]
    pn532->irq_pin = irq_pin;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	811a      	strh	r2, [r3, #8]
    
    // Reset UID data
    memset(pn532->uid, 0, MIFARE_UID_MAX_LENGTH);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	330a      	adds	r3, #10
 80005f4:	220a      	movs	r2, #10
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 fa51 	bl	8005aa0 <memset>
    pn532->uid_length = 0;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2200      	movs	r2, #0
 8000602:	751a      	strb	r2, [r3, #20]
    
    // Delay for PN532 initialization
    HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	@ 0x64
 8000606:	f000 fdb7 	bl	8001178 <HAL_Delay>
    
    // Check if we can communicate with PN532
    uint32_t firmware_version = pn532_get_firmware_version(pn532);
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f000 f80e 	bl	800062c <pn532_get_firmware_version>
 8000610:	6178      	str	r0, [r7, #20]
    if (firmware_version == 0) {
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d101      	bne.n	800061c <pn532_init+0x4c>
        return false;
 8000618:	2300      	movs	r3, #0
 800061a:	e003      	b.n	8000624 <pn532_init+0x54>
    }
    
    // Configure SAM
    return pn532_sam_config(pn532);
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 f849 	bl	80006b4 <pn532_sam_config>
 8000622:	4603      	mov	r3, r0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <pn532_get_firmware_version>:

uint32_t pn532_get_firmware_version(PN532 *pn532) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    uint8_t command[] = {
 8000634:	2302      	movs	r3, #2
 8000636:	763b      	strb	r3, [r7, #24]
        PN532_COMMAND_GETFIRMWAREVERSION
    };
    
    if (!pn532_write_command(pn532, command, sizeof(command))) {
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 fa11 	bl	8000a68 <pn532_write_command>
 8000646:	4603      	mov	r3, r0
 8000648:	f083 0301 	eor.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <pn532_get_firmware_version+0x2a>
        return 0;
 8000652:	2300      	movs	r3, #0
 8000654:	e029      	b.n	80006aa <pn532_get_firmware_version+0x7e>
    }
    
    uint8_t response[12];
    uint8_t response_length = sizeof(response);
 8000656:	230c      	movs	r3, #12
 8000658:	72fb      	strb	r3, [r7, #11]
    
    if (!pn532_read_response(pn532, response, &response_length, PN532_DEFAULT_TIMEOUT)) {
 800065a:	f107 020b 	add.w	r2, r7, #11
 800065e:	f107 010c 	add.w	r1, r7, #12
 8000662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 fa8f 	bl	8000b8a <pn532_read_response>
 800066c:	4603      	mov	r3, r0
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <pn532_get_firmware_version+0x50>
        return 0;
 8000678:	2300      	movs	r3, #0
 800067a:	e016      	b.n	80006aa <pn532_get_firmware_version+0x7e>
    }
    
    // Check if the response is correct
    if (response_length < 6 || response[0] != PN532_PN532TOHOST || response[1] != PN532_COMMAND_GETFIRMWAREVERSION + 1) {
 800067c:	7afb      	ldrb	r3, [r7, #11]
 800067e:	2b05      	cmp	r3, #5
 8000680:	d905      	bls.n	800068e <pn532_get_firmware_version+0x62>
 8000682:	7b3b      	ldrb	r3, [r7, #12]
 8000684:	2bd5      	cmp	r3, #213	@ 0xd5
 8000686:	d102      	bne.n	800068e <pn532_get_firmware_version+0x62>
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	2b03      	cmp	r3, #3
 800068c:	d001      	beq.n	8000692 <pn532_get_firmware_version+0x66>
        return 0;
 800068e:	2300      	movs	r3, #0
 8000690:	e00b      	b.n	80006aa <pn532_get_firmware_version+0x7e>
    }
    
    // Extract firmware version
    uint32_t firmware_version = ((uint32_t)response[2] << 24) | 
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	061a      	lsls	r2, r3, #24
                               ((uint32_t)response[3] << 16) | 
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	041b      	lsls	r3, r3, #16
    uint32_t firmware_version = ((uint32_t)response[2] << 24) | 
 800069a:	431a      	orrs	r2, r3
                               ((uint32_t)response[4] << 8) | 
 800069c:	7c3b      	ldrb	r3, [r7, #16]
 800069e:	021b      	lsls	r3, r3, #8
                               ((uint32_t)response[3] << 16) | 
 80006a0:	4313      	orrs	r3, r2
                               response[5];
 80006a2:	7c7a      	ldrb	r2, [r7, #17]
    uint32_t firmware_version = ((uint32_t)response[2] << 24) | 
 80006a4:	4313      	orrs	r3, r2
 80006a6:	61fb      	str	r3, [r7, #28]
    
    return firmware_version;
 80006a8:	69fb      	ldr	r3, [r7, #28]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3720      	adds	r7, #32
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <pn532_sam_config>:

bool pn532_sam_config(PN532 *pn532) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    uint8_t command[] = {
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <pn532_sam_config+0x78>)
 80006be:	617b      	str	r3, [r7, #20]
        0x01,  // Normal mode
        0x14,  // Timeout: 50ms * 20 = 1 second
        0x01   // Use IRQ pin
    };
    
    if (!pn532_write_command(pn532, command, sizeof(command))) {
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2204      	movs	r2, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f9cd 	bl	8000a68 <pn532_write_command>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f083 0301 	eor.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <pn532_sam_config+0x2a>
        return false;
 80006da:	2300      	movs	r3, #0
 80006dc:	e021      	b.n	8000722 <pn532_sam_config+0x6e>
    }
    
    uint8_t response[8];
    uint8_t response_length = sizeof(response);
 80006de:	2308      	movs	r3, #8
 80006e0:	72fb      	strb	r3, [r7, #11]
    
    if (!pn532_read_response(pn532, response, &response_length, PN532_DEFAULT_TIMEOUT)) {
 80006e2:	f107 020b 	add.w	r2, r7, #11
 80006e6:	f107 010c 	add.w	r1, r7, #12
 80006ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 fa4b 	bl	8000b8a <pn532_read_response>
 80006f4:	4603      	mov	r3, r0
 80006f6:	f083 0301 	eor.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <pn532_sam_config+0x50>
        return false;
 8000700:	2300      	movs	r3, #0
 8000702:	e00e      	b.n	8000722 <pn532_sam_config+0x6e>
    }
    
    // Check if the response is correct
    if (response_length < 3 || response[0] != PN532_PN532TOHOST || response[1] != PN532_COMMAND_SAMCONFIGURATION + 1 || response[2] != 0x00) {
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d908      	bls.n	800071c <pn532_sam_config+0x68>
 800070a:	7b3b      	ldrb	r3, [r7, #12]
 800070c:	2bd5      	cmp	r3, #213	@ 0xd5
 800070e:	d105      	bne.n	800071c <pn532_sam_config+0x68>
 8000710:	7b7b      	ldrb	r3, [r7, #13]
 8000712:	2b15      	cmp	r3, #21
 8000714:	d102      	bne.n	800071c <pn532_sam_config+0x68>
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <pn532_sam_config+0x6c>
        return false;
 800071c:	2300      	movs	r3, #0
 800071e:	e000      	b.n	8000722 <pn532_sam_config+0x6e>
    }
    
    return true;
 8000720:	2301      	movs	r3, #1
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	01140114 	.word	0x01140114

08000730 <pn532_read_passive_target>:

bool pn532_read_passive_target(PN532 *pn532) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	@ 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    // Command to detect ISO14443A cards
    uint8_t command[] = {
 8000738:	4a29      	ldr	r2, [pc, #164]	@ (80007e0 <pn532_read_passive_target+0xb0>)
 800073a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800073e:	6812      	ldr	r2, [r2, #0]
 8000740:	4611      	mov	r1, r2
 8000742:	8019      	strh	r1, [r3, #0]
 8000744:	3302      	adds	r3, #2
 8000746:	0c12      	lsrs	r2, r2, #16
 8000748:	701a      	strb	r2, [r3, #0]
        PN532_COMMAND_INLISTPASSIVETARGET,
        0x01,  // Max 1 card
        0x00   // ISO14443A (Mifare)
    };
    
    if (!pn532_write_command(pn532, command, sizeof(command))) {
 800074a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800074e:	2203      	movs	r2, #3
 8000750:	4619      	mov	r1, r3
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f000 f988 	bl	8000a68 <pn532_write_command>
 8000758:	4603      	mov	r3, r0
 800075a:	f083 0301 	eor.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <pn532_read_passive_target+0x38>
        return false;
 8000764:	2300      	movs	r3, #0
 8000766:	e037      	b.n	80007d8 <pn532_read_passive_target+0xa8>
    }
    
    uint8_t response[25];
    uint8_t response_length = sizeof(response);
 8000768:	2319      	movs	r3, #25
 800076a:	73fb      	strb	r3, [r7, #15]
    
    if (!pn532_read_response(pn532, response, &response_length, PN532_DEFAULT_TIMEOUT)) {
 800076c:	f107 020f 	add.w	r2, r7, #15
 8000770:	f107 0110 	add.w	r1, r7, #16
 8000774:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 fa06 	bl	8000b8a <pn532_read_response>
 800077e:	4603      	mov	r3, r0
 8000780:	f083 0301 	eor.w	r3, r3, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <pn532_read_passive_target+0x5e>
        return false;
 800078a:	2300      	movs	r3, #0
 800078c:	e024      	b.n	80007d8 <pn532_read_passive_target+0xa8>
    }
    
    // Check if the response is correct and a card was found
    if (response_length < 5 || response[0] != PN532_PN532TOHOST || response[1] != PN532_COMMAND_INLISTPASSIVETARGET + 1 || response[2] != 0x01) {
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	2b04      	cmp	r3, #4
 8000792:	d908      	bls.n	80007a6 <pn532_read_passive_target+0x76>
 8000794:	7c3b      	ldrb	r3, [r7, #16]
 8000796:	2bd5      	cmp	r3, #213	@ 0xd5
 8000798:	d105      	bne.n	80007a6 <pn532_read_passive_target+0x76>
 800079a:	7c7b      	ldrb	r3, [r7, #17]
 800079c:	2b4b      	cmp	r3, #75	@ 0x4b
 800079e:	d102      	bne.n	80007a6 <pn532_read_passive_target+0x76>
 80007a0:	7cbb      	ldrb	r3, [r7, #18]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d001      	beq.n	80007aa <pn532_read_passive_target+0x7a>
        return false;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e016      	b.n	80007d8 <pn532_read_passive_target+0xa8>
    }
    
    // Extract UID length and UID
    pn532->uid_length = response[7];
 80007aa:	7dfa      	ldrb	r2, [r7, #23]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	751a      	strb	r2, [r3, #20]
    if (pn532->uid_length > MIFARE_UID_MAX_LENGTH) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7d1b      	ldrb	r3, [r3, #20]
 80007b4:	2b0a      	cmp	r3, #10
 80007b6:	d902      	bls.n	80007be <pn532_read_passive_target+0x8e>
        pn532->uid_length = MIFARE_UID_MAX_LENGTH;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	220a      	movs	r2, #10
 80007bc:	751a      	strb	r2, [r3, #20]
    }
    
    memcpy(pn532->uid, &response[8], pn532->uid_length);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f103 000a 	add.w	r0, r3, #10
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7d1b      	ldrb	r3, [r3, #20]
 80007c8:	461a      	mov	r2, r3
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	3308      	adds	r3, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	f005 f999 	bl	8005b08 <memcpy>
    
    return true;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3730      	adds	r7, #48	@ 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	080064fc 	.word	0x080064fc

080007e4 <pn532_get_uid>:

bool pn532_get_uid(PN532 *pn532, uint8_t *uid, uint8_t *length) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
    if (pn532->uid_length == 0) {
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	7d1b      	ldrb	r3, [r3, #20]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <pn532_get_uid+0x18>
        return false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e00d      	b.n	8000818 <pn532_get_uid+0x34>
    }
    
    *length = pn532->uid_length;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	7d1a      	ldrb	r2, [r3, #20]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	701a      	strb	r2, [r3, #0]
    memcpy(uid, pn532->uid, pn532->uid_length);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f103 010a 	add.w	r1, r3, #10
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	7d1b      	ldrb	r3, [r3, #20]
 800080e:	461a      	mov	r2, r3
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f005 f979 	bl	8005b08 <memcpy>
    
    return true;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <pn532_mifare_auth>:

bool pn532_mifare_auth(PN532 *pn532, uint8_t block_number, uint8_t *key, uint8_t auth_type) {
 8000820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000824:	b08b      	sub	sp, #44	@ 0x2c
 8000826:	af00      	add	r7, sp, #0
 8000828:	60f8      	str	r0, [r7, #12]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	461a      	mov	r2, r3
 800082e:	460b      	mov	r3, r1
 8000830:	72fb      	strb	r3, [r7, #11]
 8000832:	4613      	mov	r3, r2
 8000834:	72bb      	strb	r3, [r7, #10]
 8000836:	466b      	mov	r3, sp
 8000838:	461e      	mov	r6, r3
    // Ensure we have a card
    if (pn532->uid_length == 0) {
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	7d1b      	ldrb	r3, [r3, #20]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <pn532_mifare_auth+0x26>
        return false;
 8000842:	2300      	movs	r3, #0
 8000844:	e079      	b.n	800093a <pn532_mifare_auth+0x11a>
    }
    
    // Authentication command
    uint8_t command[13 + pn532->uid_length];
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	7d1b      	ldrb	r3, [r3, #20]
 800084a:	f103 010d 	add.w	r1, r3, #13
 800084e:	1e4b      	subs	r3, r1, #1
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
 8000852:	460a      	mov	r2, r1
 8000854:	2300      	movs	r3, #0
 8000856:	4690      	mov	r8, r2
 8000858:	4699      	mov	r9, r3
 800085a:	f04f 0200 	mov.w	r2, #0
 800085e:	f04f 0300 	mov.w	r3, #0
 8000862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800086a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800086e:	460a      	mov	r2, r1
 8000870:	2300      	movs	r3, #0
 8000872:	4614      	mov	r4, r2
 8000874:	461d      	mov	r5, r3
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	00eb      	lsls	r3, r5, #3
 8000880:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000884:	00e2      	lsls	r2, r4, #3
 8000886:	460b      	mov	r3, r1
 8000888:	3307      	adds	r3, #7
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	ebad 0d03 	sub.w	sp, sp, r3
 8000892:	466b      	mov	r3, sp
 8000894:	3300      	adds	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
    command[0] = PN532_COMMAND_INDATAEXCHANGE;
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	2240      	movs	r2, #64	@ 0x40
 800089c:	701a      	strb	r2, [r3, #0]
    command[1] = 0x01;  // Card number 1
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	2201      	movs	r2, #1
 80008a2:	705a      	strb	r2, [r3, #1]
    command[2] = auth_type;  // MIFARE_CMD_AUTH_A or MIFARE_CMD_AUTH_B
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	7aba      	ldrb	r2, [r7, #10]
 80008a8:	709a      	strb	r2, [r3, #2]
    command[3] = block_number;
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	7afa      	ldrb	r2, [r7, #11]
 80008ae:	70da      	strb	r2, [r3, #3]
    
    // Copy authentication key (6 bytes)
    memcpy(&command[4], key, 6);
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	3304      	adds	r3, #4
 80008b4:	2206      	movs	r2, #6
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f005 f925 	bl	8005b08 <memcpy>
    
    // Copy UID
    memcpy(&command[10], pn532->uid, pn532->uid_length);
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	f103 000a 	add.w	r0, r3, #10
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f103 010a 	add.w	r1, r3, #10
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	7d1b      	ldrb	r3, [r3, #20]
 80008ce:	461a      	mov	r2, r3
 80008d0:	f005 f91a 	bl	8005b08 <memcpy>
    
    if (!pn532_write_command(pn532, command, 10 + pn532->uid_length)) {
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	7d1b      	ldrb	r3, [r3, #20]
 80008d8:	330a      	adds	r3, #10
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	6a39      	ldr	r1, [r7, #32]
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 f8c1 	bl	8000a68 <pn532_write_command>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f083 0301 	eor.w	r3, r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <pn532_mifare_auth+0xd6>
        return false;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e021      	b.n	800093a <pn532_mifare_auth+0x11a>
    }
    
    uint8_t response[8];
    uint8_t response_length = sizeof(response);
 80008f6:	2308      	movs	r3, #8
 80008f8:	75fb      	strb	r3, [r7, #23]
    
    if (!pn532_read_response(pn532, response, &response_length, PN532_DEFAULT_TIMEOUT)) {
 80008fa:	f107 0217 	add.w	r2, r7, #23
 80008fe:	f107 0118 	add.w	r1, r7, #24
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f000 f93f 	bl	8000b8a <pn532_read_response>
 800090c:	4603      	mov	r3, r0
 800090e:	f083 0301 	eor.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <pn532_mifare_auth+0xfc>
        return false;
 8000918:	2300      	movs	r3, #0
 800091a:	e00e      	b.n	800093a <pn532_mifare_auth+0x11a>
    }
    
    // Check if authentication was successful
    if (response_length < 3 || response[0] != PN532_PN532TOHOST || response[1] != PN532_COMMAND_INDATAEXCHANGE + 1 || response[2] != 0x00) {
 800091c:	7dfb      	ldrb	r3, [r7, #23]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d908      	bls.n	8000934 <pn532_mifare_auth+0x114>
 8000922:	7e3b      	ldrb	r3, [r7, #24]
 8000924:	2bd5      	cmp	r3, #213	@ 0xd5
 8000926:	d105      	bne.n	8000934 <pn532_mifare_auth+0x114>
 8000928:	7e7b      	ldrb	r3, [r7, #25]
 800092a:	2b41      	cmp	r3, #65	@ 0x41
 800092c:	d102      	bne.n	8000934 <pn532_mifare_auth+0x114>
 800092e:	7ebb      	ldrb	r3, [r7, #26]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <pn532_mifare_auth+0x118>
        return false;
 8000934:	2300      	movs	r3, #0
 8000936:	e000      	b.n	800093a <pn532_mifare_auth+0x11a>
    }
    
    return true;
 8000938:	2301      	movs	r3, #1
 800093a:	46b5      	mov	sp, r6
}
 800093c:	4618      	mov	r0, r3
 800093e:	372c      	adds	r7, #44	@ 0x2c
 8000940:	46bd      	mov	sp, r7
 8000942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000946 <pn532_mifare_read_block>:

bool pn532_mifare_read_block(PN532 *pn532, uint8_t block_number, uint8_t *data) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b08e      	sub	sp, #56	@ 0x38
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	460b      	mov	r3, r1
 8000950:	607a      	str	r2, [r7, #4]
 8000952:	72fb      	strb	r3, [r7, #11]
    uint8_t command[] = {
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800095a:	2301      	movs	r3, #1
 800095c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000960:	2330      	movs	r3, #48	@ 0x30
 8000962:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        0x01,  // Card number 1
        MIFARE_CMD_READ,
        block_number
    };
    
    if (!pn532_write_command(pn532, command, sizeof(command))) {
 800096c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000970:	2204      	movs	r2, #4
 8000972:	4619      	mov	r1, r3
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f877 	bl	8000a68 <pn532_write_command>
 800097a:	4603      	mov	r3, r0
 800097c:	f083 0301 	eor.w	r3, r3, #1
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <pn532_mifare_read_block+0x44>
        return false;
 8000986:	2300      	movs	r3, #0
 8000988:	e029      	b.n	80009de <pn532_mifare_read_block+0x98>
    }
    
    uint8_t response[26];  // 3 header bytes + 16 data bytes + more
    uint8_t response_length = sizeof(response);
 800098a:	231a      	movs	r3, #26
 800098c:	75fb      	strb	r3, [r7, #23]
    
    if (!pn532_read_response(pn532, response, &response_length, PN532_DEFAULT_TIMEOUT)) {
 800098e:	f107 0217 	add.w	r2, r7, #23
 8000992:	f107 0118 	add.w	r1, r7, #24
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f000 f8f5 	bl	8000b8a <pn532_read_response>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f083 0301 	eor.w	r3, r3, #1
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <pn532_mifare_read_block+0x6a>
        return false;
 80009ac:	2300      	movs	r3, #0
 80009ae:	e016      	b.n	80009de <pn532_mifare_read_block+0x98>
    }
    
    // Check if read was successful
    if (response_length < 19 || response[0] != PN532_PN532TOHOST || response[1] != PN532_COMMAND_INDATAEXCHANGE + 1 || response[2] != 0x00) {
 80009b0:	7dfb      	ldrb	r3, [r7, #23]
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d908      	bls.n	80009c8 <pn532_mifare_read_block+0x82>
 80009b6:	7e3b      	ldrb	r3, [r7, #24]
 80009b8:	2bd5      	cmp	r3, #213	@ 0xd5
 80009ba:	d105      	bne.n	80009c8 <pn532_mifare_read_block+0x82>
 80009bc:	7e7b      	ldrb	r3, [r7, #25]
 80009be:	2b41      	cmp	r3, #65	@ 0x41
 80009c0:	d102      	bne.n	80009c8 <pn532_mifare_read_block+0x82>
 80009c2:	7ebb      	ldrb	r3, [r7, #26]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <pn532_mifare_read_block+0x86>
        return false;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e008      	b.n	80009de <pn532_mifare_read_block+0x98>
    }
    
    // Copy 16 bytes of data
    memcpy(data, &response[3], 16);
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	3303      	adds	r3, #3
 80009d2:	2210      	movs	r2, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f005 f896 	bl	8005b08 <memcpy>
    
    return true;
 80009dc:	2301      	movs	r3, #1
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3738      	adds	r7, #56	@ 0x38
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <pn532_read_ack>:
    }
    
    return true;
}

static bool pn532_read_ack(PN532 *pn532) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
    uint8_t ack_buf[6];
    HAL_StatusTypeDef status;
    uint8_t retries = 5;
 80009f0:	2305      	movs	r3, #5
 80009f2:	75fb      	strb	r3, [r7, #23]
    
    // Expected ACK packet
    const uint8_t PN532_ACK[6] = {0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00};
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <pn532_read_ack+0x7c>)
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fe:	6018      	str	r0, [r3, #0]
 8000a00:	3304      	adds	r3, #4
 8000a02:	8019      	strh	r1, [r3, #0]
    
    // Wait for ACK
    do {
        HAL_Delay(5);
 8000a04:	2005      	movs	r0, #5
 8000a06:	f000 fbb7 	bl	8001178 <HAL_Delay>
        status = HAL_I2C_Master_Receive(pn532->i2c, PN532_I2C_ADDRESS << 1, ack_buf, 6, PN532_ACK_WAIT_TIME);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f107 0210 	add.w	r2, r7, #16
 8000a12:	231e      	movs	r3, #30
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2306      	movs	r3, #6
 8000a18:	2148      	movs	r1, #72	@ 0x48
 8000a1a:	f001 f9a9 	bl	8001d70 <HAL_I2C_Master_Receive>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75bb      	strb	r3, [r7, #22]
        retries--;
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	75fb      	strb	r3, [r7, #23]
    } while (status != HAL_OK && retries > 0);
 8000a28:	7dbb      	ldrb	r3, [r7, #22]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <pn532_read_ack+0x4c>
 8000a2e:	7dfb      	ldrb	r3, [r7, #23]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1e7      	bne.n	8000a04 <pn532_read_ack+0x1c>
    
    if (status != HAL_OK) {
 8000a34:	7dbb      	ldrb	r3, [r7, #22]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <pn532_read_ack+0x56>
        return false;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e00d      	b.n	8000a5a <pn532_read_ack+0x72>
    }
    
    // Check if the ACK matches
    return (memcmp(ack_buf, PN532_ACK, 6) == 0);
 8000a3e:	f107 0108 	add.w	r1, r7, #8
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2206      	movs	r2, #6
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 f819 	bl	8005a80 <memcmp>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	08006500 	.word	0x08006500

08000a68 <pn532_write_command>:

static bool pn532_write_command(PN532 *pn532, uint8_t *command, uint8_t command_length) {
 8000a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a6c:	b08b      	sub	sp, #44	@ 0x2c
 8000a6e:	af02      	add	r7, sp, #8
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	4613      	mov	r3, r2
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	466b      	mov	r3, sp
 8000a7a:	461e      	mov	r6, r3
    // Construct the command frame
    // Frame format: Preamble (1) + Start codes (2) + Length (1) + LCS (1) + TFI (1) + Command data + DCS (1) + Postamble (1)
    // Total length = command_length + 7
    
    uint8_t length = command_length + 1; // Add TFI
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	777b      	strb	r3, [r7, #29]
    uint8_t frame[command_length + 9];
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	f103 0109 	add.w	r1, r3, #9
 8000a88:	1e4b      	subs	r3, r1, #1
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	2300      	movs	r3, #0
 8000a90:	4690      	mov	r8, r2
 8000a92:	4699      	mov	r9, r3
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000aa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	2300      	movs	r3, #0
 8000aac:	4614      	mov	r4, r2
 8000aae:	461d      	mov	r5, r3
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	00eb      	lsls	r3, r5, #3
 8000aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000abe:	00e2      	lsls	r2, r4, #3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	3307      	adds	r3, #7
 8000ac4:	08db      	lsrs	r3, r3, #3
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	ebad 0d03 	sub.w	sp, sp, r3
 8000acc:	ab02      	add	r3, sp, #8
 8000ace:	3300      	adds	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
    uint8_t checksum = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	77fb      	strb	r3, [r7, #31]
    uint8_t i;
    
    frame[0] = PN532_PREAMBLE;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	22ff      	movs	r2, #255	@ 0xff
 8000ae6:	709a      	strb	r2, [r3, #2]
    frame[3] = length;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	7f7a      	ldrb	r2, [r7, #29]
 8000aec:	70da      	strb	r2, [r3, #3]
    frame[4] = ~length + 1; // LCS: Length checksum
 8000aee:	7f7b      	ldrb	r3, [r7, #29]
 8000af0:	425b      	negs	r3, r3
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	711a      	strb	r2, [r3, #4]
    frame[5] = PN532_HOSTTOPN532; // TFI: Frame Identifier (Host to PN532)
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	22d4      	movs	r2, #212	@ 0xd4
 8000afc:	715a      	strb	r2, [r3, #5]
    
    // Calculate data checksum
    checksum += PN532_HOSTTOPN532;
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	3b2c      	subs	r3, #44	@ 0x2c
 8000b02:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < command_length; i++) {
 8000b04:	2300      	movs	r3, #0
 8000b06:	77bb      	strb	r3, [r7, #30]
 8000b08:	e011      	b.n	8000b2e <pn532_write_command+0xc6>
        frame[6 + i] = command[i];
 8000b0a:	7fbb      	ldrb	r3, [r7, #30]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	441a      	add	r2, r3
 8000b10:	7fbb      	ldrb	r3, [r7, #30]
 8000b12:	3306      	adds	r3, #6
 8000b14:	7811      	ldrb	r1, [r2, #0]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	54d1      	strb	r1, [r2, r3]
        checksum += command[i];
 8000b1a:	7fbb      	ldrb	r3, [r7, #30]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781a      	ldrb	r2, [r3, #0]
 8000b22:	7ffb      	ldrb	r3, [r7, #31]
 8000b24:	4413      	add	r3, r2
 8000b26:	77fb      	strb	r3, [r7, #31]
    for (i = 0; i < command_length; i++) {
 8000b28:	7fbb      	ldrb	r3, [r7, #30]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	77bb      	strb	r3, [r7, #30]
 8000b2e:	7fba      	ldrb	r2, [r7, #30]
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d3e9      	bcc.n	8000b0a <pn532_write_command+0xa2>
    }
    
    frame[6 + command_length] = ~checksum + 1; // DCS: Data checksum
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	3306      	adds	r3, #6
 8000b3a:	7ffa      	ldrb	r2, [r7, #31]
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	b2d1      	uxtb	r1, r2
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	54d1      	strb	r1, [r2, r3]
    frame[7 + command_length] = PN532_POSTAMBLE;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	3307      	adds	r3, #7
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	54d1      	strb	r1, [r2, r3]
    
    // Send the command frame
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(pn532->i2c, PN532_I2C_ADDRESS << 1, frame, command_length + 8, PN532_DEFAULT_TIMEOUT);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	3308      	adds	r3, #8
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b5e:	9200      	str	r2, [sp, #0]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	2148      	movs	r1, #72	@ 0x48
 8000b64:	f001 f806 	bl	8001b74 <HAL_I2C_Master_Transmit>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	74fb      	strb	r3, [r7, #19]
    if (status != HAL_OK) {
 8000b6c:	7cfb      	ldrb	r3, [r7, #19]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <pn532_write_command+0x10e>
        return false;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e003      	b.n	8000b7e <pn532_write_command+0x116>
    }
    
    // Wait for ACK
    return pn532_read_ack(pn532);
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff ff36 	bl	80009e8 <pn532_read_ack>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	46b5      	mov	sp, r6
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3724      	adds	r7, #36	@ 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000b8a <pn532_read_response>:

static bool pn532_read_response(PN532 *pn532, uint8_t *response, uint8_t *response_length, uint16_t timeout) {
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b08c      	sub	sp, #48	@ 0x30
 8000b8e:	af02      	add	r7, sp, #8
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	807b      	strh	r3, [r7, #2]
    // Read response header
    uint8_t header[7];
    uint32_t start_time = HAL_GetTick();
 8000b98:	f000 fae4 	bl	8001164 <HAL_GetTick>
 8000b9c:	6238      	str	r0, [r7, #32]
    HAL_StatusTypeDef status;
    
    // Wait for IRQ pin to go low or timeout
    if (pn532->irq_port != NULL) {
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d019      	beq.n	8000bda <pn532_read_response+0x50>
        while (HAL_GPIO_ReadPin(pn532->irq_port, pn532->irq_pin) == GPIO_PIN_SET) {
 8000ba6:	e00c      	b.n	8000bc2 <pn532_read_response+0x38>
            if ((HAL_GetTick() - start_time) > timeout) {
 8000ba8:	f000 fadc 	bl	8001164 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	1ad2      	subs	r2, r2, r3
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d901      	bls.n	8000bbc <pn532_read_response+0x32>
                return false; // Timeout
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e09a      	b.n	8000cf2 <pn532_read_response+0x168>
            }
            HAL_Delay(5);
 8000bbc:	2005      	movs	r0, #5
 8000bbe:	f000 fadb 	bl	8001178 <HAL_Delay>
        while (HAL_GPIO_ReadPin(pn532->irq_port, pn532->irq_pin) == GPIO_PIN_SET) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	891b      	ldrh	r3, [r3, #8]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4610      	mov	r0, r2
 8000bce:	f000 fe49 	bl	8001864 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d0e7      	beq.n	8000ba8 <pn532_read_response+0x1e>
 8000bd8:	e002      	b.n	8000be0 <pn532_read_response+0x56>
        }
    } else {
        HAL_Delay(50); // No IRQ pin, just wait a bit
 8000bda:	2032      	movs	r0, #50	@ 0x32
 8000bdc:	f000 facc 	bl	8001178 <HAL_Delay>
    }
    
    // Read the response header
    status = HAL_I2C_Master_Receive(pn532->i2c, PN532_I2C_ADDRESS << 1, header, 7, timeout);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	887b      	ldrh	r3, [r7, #2]
 8000be6:	f107 0218 	add.w	r2, r7, #24
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2307      	movs	r3, #7
 8000bee:	2148      	movs	r1, #72	@ 0x48
 8000bf0:	f001 f8be 	bl	8001d70 <HAL_I2C_Master_Receive>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <pn532_read_response+0x78>
        return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e077      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    // Check header format
    if (header[0] != PN532_PREAMBLE || header[1] != PN532_STARTCODE1 || header[2] != PN532_STARTCODE2) {
 8000c02:	7e3b      	ldrb	r3, [r7, #24]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d105      	bne.n	8000c14 <pn532_read_response+0x8a>
 8000c08:	7e7b      	ldrb	r3, [r7, #25]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <pn532_read_response+0x8a>
 8000c0e:	7ebb      	ldrb	r3, [r7, #26]
 8000c10:	2bff      	cmp	r3, #255	@ 0xff
 8000c12:	d001      	beq.n	8000c18 <pn532_read_response+0x8e>
        return false;
 8000c14:	2300      	movs	r3, #0
 8000c16:	e06c      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    // Extract length
    uint8_t length = header[3];
 8000c18:	7efb      	ldrb	r3, [r7, #27]
 8000c1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    
    // Verify length checksum
    if (header[4] != ((~length) & 0xFF) + 1) {
 8000c1e:	7f3b      	ldrb	r3, [r7, #28]
 8000c20:	461a      	mov	r2, r3
 8000c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c26:	43db      	mvns	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d001      	beq.n	8000c34 <pn532_read_response+0xaa>
        return false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e05e      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    // Make sure we have enough space in the buffer
    if (length > *response_length) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d903      	bls.n	8000c48 <pn532_read_response+0xbe>
        length = *response_length;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    
    // Read the actual data
    status = HAL_I2C_Master_Receive(pn532->i2c, PN532_I2C_ADDRESS << 1, response, length, timeout);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	6818      	ldr	r0, [r3, #0]
 8000c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4613      	mov	r3, r2
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	2148      	movs	r1, #72	@ 0x48
 8000c5c:	f001 f888 	bl	8001d70 <HAL_I2C_Master_Receive>
 8000c60:	4603      	mov	r3, r0
 8000c62:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8000c64:	7ffb      	ldrb	r3, [r7, #31]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <pn532_read_response+0xe4>
        return false;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e041      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    // Update actual response length
    *response_length = length;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c74:	701a      	strb	r2, [r3, #0]
    
    // Read the checksum and postamble
    uint8_t trailer[2];
    status = HAL_I2C_Master_Receive(pn532->i2c, PN532_I2C_ADDRESS << 1, trailer, 2, timeout);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	f107 0214 	add.w	r2, r7, #20
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2302      	movs	r3, #2
 8000c84:	2148      	movs	r1, #72	@ 0x48
 8000c86:	f001 f873 	bl	8001d70 <HAL_I2C_Master_Receive>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <pn532_read_response+0x10e>
        return false;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e02c      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    // Verify data checksum (simple implementation)
    uint8_t checksum = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (uint8_t i = 0; i < length; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000ca4:	e00e      	b.n	8000cc4 <pn532_read_response+0x13a>
        checksum += response[i];
 8000ca6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	4413      	add	r3, r2
 8000cae:	781a      	ldrb	r2, [r3, #0]
 8000cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cb4:	4413      	add	r3, r2
 8000cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    for (uint8_t i = 0; i < length; i++) {
 8000cba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000cc4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3ea      	bcc.n	8000ca6 <pn532_read_response+0x11c>
    }
    
    if (trailer[0] != ((~checksum) & 0xFF) + 1) {
 8000cd0:	7d3b      	ldrb	r3, [r7, #20]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d001      	beq.n	8000ce6 <pn532_read_response+0x15c>
        return false;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e005      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    // Verify postamble
    if (trailer[1] != PN532_POSTAMBLE) {
 8000ce6:	7d7b      	ldrb	r3, [r7, #21]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <pn532_read_response+0x166>
        return false;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e000      	b.n	8000cf2 <pn532_read_response+0x168>
    }
    
    return true;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a14      	ldr	r2, [pc, #80]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <HAL_MspInit+0x5c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_MspInit+0x60>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <HAL_MspInit+0x60>)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000

08000d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000df0 <HAL_I2C_MspInit+0x90>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d133      	bne.n	8000de8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_I2C_MspInit+0x94>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <HAL_I2C_MspInit+0x94>)
 8000d86:	f043 0308 	orr.w	r3, r3, #8
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_I2C_MspInit+0x94>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d98:	23c0      	movs	r3, #192	@ 0xc0
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	4813      	ldr	r0, [pc, #76]	@ (8000df8 <HAL_I2C_MspInit+0x98>)
 8000dac:	f000 fbd6 	bl	800155c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db0:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_I2C_MspInit+0x94>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4a0f      	ldr	r2, [pc, #60]	@ (8000df4 <HAL_I2C_MspInit+0x94>)
 8000db6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dba:	61d3      	str	r3, [r2, #28]
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_I2C_MspInit+0x94>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	201f      	movs	r0, #31
 8000dce:	f000 face 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000dd2:	201f      	movs	r0, #31
 8000dd4:	f000 fae7 	bl	80013a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2020      	movs	r0, #32
 8000dde:	f000 fac6 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000de2:	2020      	movs	r0, #32
 8000de4:	f000 fadf 	bl	80013a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <HAL_SPI_MspInit+0x98>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d137      	bne.n	8000e8c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <HAL_SPI_MspInit+0x9c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	@ (8000e98 <HAL_SPI_MspInit+0x9c>)
 8000e22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <HAL_SPI_MspInit+0x9c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_SPI_MspInit+0x9c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a17      	ldr	r2, [pc, #92]	@ (8000e98 <HAL_SPI_MspInit+0x9c>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_SPI_MspInit+0x9c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000e4c:	23b0      	movs	r3, #176	@ 0xb0
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480f      	ldr	r0, [pc, #60]	@ (8000e9c <HAL_SPI_MspInit+0xa0>)
 8000e60:	f000 fb7c 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e64:	2340      	movs	r3, #64	@ 0x40
 8000e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <HAL_SPI_MspInit+0xa0>)
 8000e78:	f000 fb70 	bl	800155c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2023      	movs	r0, #35	@ 0x23
 8000e82:	f000 fa74 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e86:	2023      	movs	r0, #35	@ 0x23
 8000e88:	f000 fa8d 	bl	80013a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40013000 	.word	0x40013000
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a20      	ldr	r2, [pc, #128]	@ (8000f3c <HAL_UART_MspInit+0x9c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d139      	bne.n	8000f34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <HAL_UART_MspInit+0xa0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ef0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4619      	mov	r1, r3
 8000f04:	480f      	ldr	r0, [pc, #60]	@ (8000f44 <HAL_UART_MspInit+0xa4>)
 8000f06:	f000 fb29 	bl	800155c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <HAL_UART_MspInit+0xa4>)
 8000f20:	f000 fb1c 	bl	800155c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	2025      	movs	r0, #37	@ 0x25
 8000f2a:	f000 fa20 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f2e:	2025      	movs	r0, #37	@ 0x25
 8000f30:	f000 fa39 	bl	80013a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f34:	bf00      	nop
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40013800 	.word	0x40013800
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010800 	.word	0x40010800

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f98:	f000 f8d2 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <I2C1_EV_IRQHandler+0x10>)
 8000fa6:	f001 f94f 	bl	8002248 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000078 	.word	0x20000078

08000fb4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <I2C1_ER_IRQHandler+0x10>)
 8000fba:	f001 fa98 	bl	80024ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000078 	.word	0x20000078

08000fc8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <SPI1_IRQHandler+0x10>)
 8000fce:	f003 fe27 	bl	8004c20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000cc 	.word	0x200000cc

08000fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <USART1_IRQHandler+0x10>)
 8000fe2:	f003 fff3 	bl	8004fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000124 	.word	0x20000124

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f004 fd46 	bl	8005ab0 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20005000 	.word	0x20005000
 8001050:	00000400 	.word	0x00000400
 8001054:	20000184 	.word	0x20000184
 8001058:	200002d8 	.word	0x200002d8

0800105c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff fff8 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480b      	ldr	r0, [pc, #44]	@ (800109c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106e:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001084:	4c09      	ldr	r4, [pc, #36]	@ (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f004 fd13 	bl	8005abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff f88f 	bl	80001b8 <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010a4:	08006578 	.word	0x08006578
  ldr r2, =_sbss
 80010a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010ac:	200002d4 	.word	0x200002d4

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f947 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe14 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f95f 	bl	80013c2 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f927 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a03      	ldr	r2, [pc, #12]	@ (8001160 <HAL_IncTick+0x20>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	20000008 	.word	0x20000008
 8001160:	20000188 	.word	0x20000188

08001164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000188 	.word	0x20000188

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff fff0 	bl	8001164 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffe0 	bl	8001164 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4906      	ldr	r1, [pc, #24]	@ (8001258 <__NVIC_EnableIRQ+0x34>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	@ (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff2d 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff42 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff35 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d008      	beq.n	8001404 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2204      	movs	r2, #4
 80013f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e020      	b.n	8001446 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d005      	beq.n	8001474 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e051      	b.n	8001518 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0201 	bic.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a22      	ldr	r2, [pc, #136]	@ (8001524 <HAL_DMA_Abort_IT+0xd4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d029      	beq.n	80014f2 <HAL_DMA_Abort_IT+0xa2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a21      	ldr	r2, [pc, #132]	@ (8001528 <HAL_DMA_Abort_IT+0xd8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d022      	beq.n	80014ee <HAL_DMA_Abort_IT+0x9e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_DMA_Abort_IT+0xdc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01a      	beq.n	80014e8 <HAL_DMA_Abort_IT+0x98>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001530 <HAL_DMA_Abort_IT+0xe0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d012      	beq.n	80014e2 <HAL_DMA_Abort_IT+0x92>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <HAL_DMA_Abort_IT+0xe4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00a      	beq.n	80014dc <HAL_DMA_Abort_IT+0x8c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <HAL_DMA_Abort_IT+0xe8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d102      	bne.n	80014d6 <HAL_DMA_Abort_IT+0x86>
 80014d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014d4:	e00e      	b.n	80014f4 <HAL_DMA_Abort_IT+0xa4>
 80014d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014da:	e00b      	b.n	80014f4 <HAL_DMA_Abort_IT+0xa4>
 80014dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e0:	e008      	b.n	80014f4 <HAL_DMA_Abort_IT+0xa4>
 80014e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e6:	e005      	b.n	80014f4 <HAL_DMA_Abort_IT+0xa4>
 80014e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ec:	e002      	b.n	80014f4 <HAL_DMA_Abort_IT+0xa4>
 80014ee:	2310      	movs	r3, #16
 80014f0:	e000      	b.n	80014f4 <HAL_DMA_Abort_IT+0xa4>
 80014f2:	2301      	movs	r3, #1
 80014f4:	4a11      	ldr	r2, [pc, #68]	@ (800153c <HAL_DMA_Abort_IT+0xec>)
 80014f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	4798      	blx	r3
    } 
  }
  return status;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40020008 	.word	0x40020008
 8001528:	4002001c 	.word	0x4002001c
 800152c:	40020030 	.word	0x40020030
 8001530:	40020044 	.word	0x40020044
 8001534:	40020058 	.word	0x40020058
 8001538:	4002006c 	.word	0x4002006c
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800154e:	b2db      	uxtb	r3, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b08b      	sub	sp, #44	@ 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e169      	b.n	8001844 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001570:	2201      	movs	r2, #1
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 8158 	bne.w	800183e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a9a      	ldr	r2, [pc, #616]	@ (80017fc <HAL_GPIO_Init+0x2a0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d05e      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 8001598:	4a98      	ldr	r2, [pc, #608]	@ (80017fc <HAL_GPIO_Init+0x2a0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d875      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 800159e:	4a98      	ldr	r2, [pc, #608]	@ (8001800 <HAL_GPIO_Init+0x2a4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d058      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015a4:	4a96      	ldr	r2, [pc, #600]	@ (8001800 <HAL_GPIO_Init+0x2a4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d86f      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015aa:	4a96      	ldr	r2, [pc, #600]	@ (8001804 <HAL_GPIO_Init+0x2a8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d052      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015b0:	4a94      	ldr	r2, [pc, #592]	@ (8001804 <HAL_GPIO_Init+0x2a8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d869      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015b6:	4a94      	ldr	r2, [pc, #592]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04c      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015bc:	4a92      	ldr	r2, [pc, #584]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d863      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015c2:	4a92      	ldr	r2, [pc, #584]	@ (800180c <HAL_GPIO_Init+0x2b0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d046      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015c8:	4a90      	ldr	r2, [pc, #576]	@ (800180c <HAL_GPIO_Init+0x2b0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d85d      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d82a      	bhi.n	8001628 <HAL_GPIO_Init+0xcc>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d859      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015d6:	a201      	add	r2, pc, #4	@ (adr r2, 80015dc <HAL_GPIO_Init+0x80>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001631 	.word	0x08001631
 80015e4:	08001643 	.word	0x08001643
 80015e8:	08001685 	.word	0x08001685
 80015ec:	0800168b 	.word	0x0800168b
 80015f0:	0800168b 	.word	0x0800168b
 80015f4:	0800168b 	.word	0x0800168b
 80015f8:	0800168b 	.word	0x0800168b
 80015fc:	0800168b 	.word	0x0800168b
 8001600:	0800168b 	.word	0x0800168b
 8001604:	0800168b 	.word	0x0800168b
 8001608:	0800168b 	.word	0x0800168b
 800160c:	0800168b 	.word	0x0800168b
 8001610:	0800168b 	.word	0x0800168b
 8001614:	0800168b 	.word	0x0800168b
 8001618:	0800168b 	.word	0x0800168b
 800161c:	0800168b 	.word	0x0800168b
 8001620:	08001639 	.word	0x08001639
 8001624:	0800164d 	.word	0x0800164d
 8001628:	4a79      	ldr	r2, [pc, #484]	@ (8001810 <HAL_GPIO_Init+0x2b4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162e:	e02c      	b.n	800168a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e029      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	3304      	adds	r3, #4
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e024      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	3308      	adds	r3, #8
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e01f      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	330c      	adds	r3, #12
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e01a      	b.n	800168c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	2304      	movs	r3, #4
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e013      	b.n	800168c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	611a      	str	r2, [r3, #16]
          break;
 8001676:	e009      	b.n	800168c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	615a      	str	r2, [r3, #20]
          break;
 8001682:	e003      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x130>
          break;
 800168a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	d801      	bhi.n	8001696 <HAL_GPIO_Init+0x13a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	e001      	b.n	800169a <HAL_GPIO_Init+0x13e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d802      	bhi.n	80016a8 <HAL_GPIO_Init+0x14c>
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x152>
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	3b08      	subs	r3, #8
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	210f      	movs	r1, #15
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80b1 	beq.w	800183e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f4:	4a48      	ldr	r2, [pc, #288]	@ (8001818 <HAL_GPIO_Init+0x2bc>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a40      	ldr	r2, [pc, #256]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d013      	beq.n	8001748 <HAL_GPIO_Init+0x1ec>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3f      	ldr	r2, [pc, #252]	@ (8001820 <HAL_GPIO_Init+0x2c4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d00d      	beq.n	8001744 <HAL_GPIO_Init+0x1e8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3e      	ldr	r2, [pc, #248]	@ (8001824 <HAL_GPIO_Init+0x2c8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x1e4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a3d      	ldr	r2, [pc, #244]	@ (8001828 <HAL_GPIO_Init+0x2cc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_GPIO_Init+0x1e0>
 8001738:	2303      	movs	r3, #3
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 800173c:	2304      	movs	r3, #4
 800173e:	e004      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001740:	2302      	movs	r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_GPIO_Init+0x1ee>
 8001748:	2300      	movs	r3, #0
 800174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174c:	f002 0203 	and.w	r2, r2, #3
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	4093      	lsls	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800175a:	492f      	ldr	r1, [pc, #188]	@ (8001818 <HAL_GPIO_Init+0x2bc>)
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001774:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	492c      	ldr	r1, [pc, #176]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001782:	4b2a      	ldr	r3, [pc, #168]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4928      	ldr	r1, [pc, #160]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800179c:	4b23      	ldr	r3, [pc, #140]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	4922      	ldr	r1, [pc, #136]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017aa:	4b20      	ldr	r3, [pc, #128]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	491e      	ldr	r1, [pc, #120]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4918      	ldr	r1, [pc, #96]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	4914      	ldr	r1, [pc, #80]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d021      	beq.n	8001830 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	490e      	ldr	r1, [pc, #56]	@ (800182c <HAL_GPIO_Init+0x2d0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x2e2>
 80017fa:	bf00      	nop
 80017fc:	10320000 	.word	0x10320000
 8001800:	10310000 	.word	0x10310000
 8001804:	10220000 	.word	0x10220000
 8001808:	10210000 	.word	0x10210000
 800180c:	10120000 	.word	0x10120000
 8001810:	10110000 	.word	0x10110000
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000
 800181c:	40010800 	.word	0x40010800
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40011000 	.word	0x40011000
 8001828:	40011400 	.word	0x40011400
 800182c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_GPIO_Init+0x304>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	43db      	mvns	r3, r3
 8001838:	4909      	ldr	r1, [pc, #36]	@ (8001860 <HAL_GPIO_Init+0x304>)
 800183a:	4013      	ands	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	3301      	adds	r3, #1
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	fa22 f303 	lsr.w	r3, r2, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f ae8e 	bne.w	8001570 <HAL_GPIO_Init+0x14>
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	372c      	adds	r7, #44	@ 0x2c
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	40010400 	.word	0x40010400

08001864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	887b      	ldrh	r3, [r7, #2]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d002      	beq.n	8001882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
 8001880:	e001      	b.n	8001886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a2:	787b      	ldrb	r3, [r7, #1]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ae:	e003      	b.n	80018b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	041a      	lsls	r2, r3, #16
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	611a      	str	r2, [r3, #16]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e12b      	b.n	8001b2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fa38 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2224      	movs	r2, #36	@ 0x24
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001928:	f003 f8b0 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 800192c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a81      	ldr	r2, [pc, #516]	@ (8001b38 <HAL_I2C_Init+0x274>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d807      	bhi.n	8001948 <HAL_I2C_Init+0x84>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a80      	ldr	r2, [pc, #512]	@ (8001b3c <HAL_I2C_Init+0x278>)
 800193c:	4293      	cmp	r3, r2
 800193e:	bf94      	ite	ls
 8001940:	2301      	movls	r3, #1
 8001942:	2300      	movhi	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e006      	b.n	8001956 <HAL_I2C_Init+0x92>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b40 <HAL_I2C_Init+0x27c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	bf94      	ite	ls
 8001950:	2301      	movls	r3, #1
 8001952:	2300      	movhi	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0e7      	b.n	8001b2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a78      	ldr	r2, [pc, #480]	@ (8001b44 <HAL_I2C_Init+0x280>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9b      	lsrs	r3, r3, #18
 8001968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a6a      	ldr	r2, [pc, #424]	@ (8001b38 <HAL_I2C_Init+0x274>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d802      	bhi.n	8001998 <HAL_I2C_Init+0xd4>
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	e009      	b.n	80019ac <HAL_I2C_Init+0xe8>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800199e:	fb02 f303 	mul.w	r3, r2, r3
 80019a2:	4a69      	ldr	r2, [pc, #420]	@ (8001b48 <HAL_I2C_Init+0x284>)
 80019a4:	fba2 2303 	umull	r2, r3, r2, r3
 80019a8:	099b      	lsrs	r3, r3, #6
 80019aa:	3301      	adds	r3, #1
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	430b      	orrs	r3, r1
 80019b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	495c      	ldr	r1, [pc, #368]	@ (8001b38 <HAL_I2C_Init+0x274>)
 80019c8:	428b      	cmp	r3, r1
 80019ca:	d819      	bhi.n	8001a00 <HAL_I2C_Init+0x13c>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e59      	subs	r1, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019da:	1c59      	adds	r1, r3, #1
 80019dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019e0:	400b      	ands	r3, r1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00a      	beq.n	80019fc <HAL_I2C_Init+0x138>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1e59      	subs	r1, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fa:	e051      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 80019fc:	2304      	movs	r3, #4
 80019fe:	e04f      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d111      	bne.n	8001a2c <HAL_I2C_Init+0x168>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	440b      	add	r3, r1
 8001a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	e012      	b.n	8001a52 <HAL_I2C_Init+0x18e>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a42:	3301      	adds	r3, #1
 8001a44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Init+0x196>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e022      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <HAL_I2C_Init+0x1bc>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e58      	subs	r0, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	440b      	add	r3, r1
 8001a70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a7e:	e00f      	b.n	8001aa0 <HAL_I2C_Init+0x1dc>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	0099      	lsls	r1, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	6809      	ldr	r1, [r1, #0]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ace:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6911      	ldr	r1, [r2, #16]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68d2      	ldr	r2, [r2, #12]
 8001ada:	4311      	orrs	r1, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	430b      	orrs	r3, r1
 8001ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	000186a0 	.word	0x000186a0
 8001b3c:	001e847f 	.word	0x001e847f
 8001b40:	003d08ff 	.word	0x003d08ff
 8001b44:	431bde83 	.word	0x431bde83
 8001b48:	10624dd3 	.word	0x10624dd3

08001b4c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b5e:	2b80      	cmp	r3, #128	@ 0x80
 8001b60:	d103      	bne.n	8001b6a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	460b      	mov	r3, r1
 8001b82:	817b      	strh	r3, [r7, #10]
 8001b84:	4613      	mov	r3, r2
 8001b86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff faec 	bl	8001164 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	f040 80e0 	bne.w	8001d5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4970      	ldr	r1, [pc, #448]	@ (8001d68 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f002 f924 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0d3      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2C_Master_Transmit+0x50>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0cc      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d007      	beq.n	8001bea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0201 	orr.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2221      	movs	r2, #33	@ 0x21
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2210      	movs	r2, #16
 8001c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a50      	ldr	r2, [pc, #320]	@ (8001d6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c2c:	8979      	ldrh	r1, [r7, #10]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a3a      	ldr	r2, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f001 fee6 	bl	8003a04 <I2C_MasterRequestWrite>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e08d      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c58:	e066      	b.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f002 f9e2 	bl	8004028 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d107      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f002 f9d9 	bl	80040b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e01a      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d194      	bne.n	8001c5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	00100002 	.word	0x00100002
 8001d6c:	ffff0000 	.word	0xffff0000

08001d70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
 8001d80:	4613      	mov	r3, r2
 8001d82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff f9ec 	bl	8001164 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	f040 824b 	bne.w	8002232 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2319      	movs	r3, #25
 8001da2:	2201      	movs	r2, #1
 8001da4:	497f      	ldr	r1, [pc, #508]	@ (8001fa4 <HAL_I2C_Master_Receive+0x234>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f002 f824 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
 8001db4:	e23e      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_I2C_Master_Receive+0x54>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e237      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d007      	beq.n	8001dea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2222      	movs	r2, #34	@ 0x22
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2210      	movs	r2, #16
 8001e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	893a      	ldrh	r2, [r7, #8]
 8001e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a5f      	ldr	r2, [pc, #380]	@ (8001fa8 <HAL_I2C_Master_Receive+0x238>)
 8001e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e2c:	8979      	ldrh	r1, [r7, #10]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f001 fe68 	bl	8003b08 <I2C_MasterRequestRead>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1f8      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d113      	bne.n	8001e72 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e1cc      	b.n	800220c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d11e      	bne.n	8001eb8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8a:	b672      	cpsid	i
}
 8001e8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001eb4:	b662      	cpsie	i
}
 8001eb6:	e035      	b.n	8001f24 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d11e      	bne.n	8001efe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001efa:	b662      	cpsie	i
}
 8001efc:	e012      	b.n	8001f24 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001f24:	e172      	b.n	800220c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	f200 811f 	bhi.w	800216e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d123      	bne.n	8001f80 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f002 f935 	bl	80041ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e173      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f7e:	e145      	b.n	800220c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d152      	bne.n	800202e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4906      	ldr	r1, [pc, #24]	@ (8001fac <HAL_I2C_Master_Receive+0x23c>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f001 ff2e 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e148      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
 8001fa2:	bf00      	nop
 8001fa4:	00100002 	.word	0x00100002
 8001fa8:	ffff0000 	.word	0xffff0000
 8001fac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ff6:	b662      	cpsie	i
}
 8001ff8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800202c:	e0ee      	b.n	800220c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002034:	2200      	movs	r2, #0
 8002036:	4981      	ldr	r1, [pc, #516]	@ (800223c <HAL_I2C_Master_Receive+0x4cc>)
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f001 fedb 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0f5      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800208e:	4b6c      	ldr	r3, [pc, #432]	@ (8002240 <HAL_I2C_Master_Receive+0x4d0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	08db      	lsrs	r3, r3, #3
 8002094:	4a6b      	ldr	r2, [pc, #428]	@ (8002244 <HAL_I2C_Master_Receive+0x4d4>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0a1a      	lsrs	r2, r3, #8
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00da      	lsls	r2, r3, #3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d118      	bne.n	80020e6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2220      	movs	r2, #32
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80020d6:	b662      	cpsie	i
}
 80020d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0a6      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d1d9      	bne.n	80020a8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002136:	b662      	cpsie	i
}
 8002138:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800216c:	e04e      	b.n	800220c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002170:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f002 f81a 	bl	80041ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e058      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d124      	bne.n	800220c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021d8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	f47f ae88 	bne.w	8001f26 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3728      	adds	r7, #40	@ 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	00010004 	.word	0x00010004
 8002240:	20000000 	.word	0x20000000
 8002244:	14f8b589 	.word	0x14f8b589

08002248 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002268:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002270:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b10      	cmp	r3, #16
 8002276:	d003      	beq.n	8002280 <HAL_I2C_EV_IRQHandler+0x38>
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b40      	cmp	r3, #64	@ 0x40
 800227c:	f040 80b1 	bne.w	80023e2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_I2C_EV_IRQHandler+0x6e>
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80022a0:	d003      	beq.n	80022aa <HAL_I2C_EV_IRQHandler+0x62>
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_EV_IRQHandler+0x66>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <HAL_I2C_EV_IRQHandler+0x68>
 80022ae:	2300      	movs	r3, #0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	f000 8114 	beq.w	80024de <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_I2C_EV_IRQHandler+0x90>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f001 fff9 	bl	80042c2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fd74 	bl	8002dbe <I2C_Master_SB>
 80022d6:	e083      	b.n	80023e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0xac>
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fdeb 	bl	8002ec8 <I2C_Master_ADD10>
 80022f2:	e075      	b.n	80023e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_I2C_EV_IRQHandler+0xc8>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fe06 	bl	8002f1a <I2C_Master_ADDR>
 800230e:	e067      	b.n	80023e0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d036      	beq.n	8002388 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002328:	f000 80db 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00d      	beq.n	8002352 <HAL_I2C_EV_IRQHandler+0x10a>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_I2C_EV_IRQHandler+0x10a>
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f9d4 	bl	80026f8 <I2C_MasterTransmit_TXE>
 8002350:	e046      	b.n	80023e0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80c2 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80bc 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800236a:	7bbb      	ldrb	r3, [r7, #14]
 800236c:	2b21      	cmp	r3, #33	@ 0x21
 800236e:	d103      	bne.n	8002378 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fa5d 	bl	8002830 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002376:	e0b4      	b.n	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	f040 80b1 	bne.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 facb 	bl	800291c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002386:	e0ac      	b.n	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002396:	f000 80a4 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_I2C_EV_IRQHandler+0x178>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_I2C_EV_IRQHandler+0x178>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fb47 	bl	8002a4c <I2C_MasterReceive_RXNE>
 80023be:	e00f      	b.n	80023e0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0304 	and.w	r3, r3, #4
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 808b 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8085 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fbff 	bl	8002bdc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023de:	e080      	b.n	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
 80023e0:	e07f      	b.n	80024e2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e007      	b.n	8002404 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d011      	beq.n	8002432 <HAL_I2C_EV_IRQHandler+0x1ea>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00c      	beq.n	8002432 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002428:	69b9      	ldr	r1, [r7, #24]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 ffcc 	bl	80033c8 <I2C_Slave_ADDR>
 8002430:	e05a      	b.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_I2C_EV_IRQHandler+0x206>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f001 f806 	bl	8003458 <I2C_Slave_STOPF>
 800244c:	e04c      	b.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800244e:	7bbb      	ldrb	r3, [r7, #14]
 8002450:	2b21      	cmp	r3, #33	@ 0x21
 8002452:	d002      	beq.n	800245a <HAL_I2C_EV_IRQHandler+0x212>
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	2b29      	cmp	r3, #41	@ 0x29
 8002458:	d120      	bne.n	800249c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <HAL_I2C_EV_IRQHandler+0x238>
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_I2C_EV_IRQHandler+0x238>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d103      	bne.n	8002480 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fee9 	bl	8003250 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800247e:	e032      	b.n	80024e6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02d      	beq.n	80024e6 <HAL_I2C_EV_IRQHandler+0x29e>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002490:	2b00      	cmp	r3, #0
 8002492:	d028      	beq.n	80024e6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 ff18 	bl	80032ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800249a:	e024      	b.n	80024e6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <HAL_I2C_EV_IRQHandler+0x27a>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_I2C_EV_IRQHandler+0x27a>
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 ff25 	bl	800330a <I2C_SlaveReceive_RXNE>
 80024c0:	e012      	b.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00d      	beq.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 ff55 	bl	8003386 <I2C_SlaveReceive_BTF>
 80024dc:	e004      	b.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80024de:	bf00      	nop
 80024e0:	e002      	b.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b08a      	sub	sp, #40	@ 0x28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002510:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_I2C_ER_IRQHandler+0x5a>
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002536:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <HAL_I2C_ER_IRQHandler+0x80>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800256c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03e      	beq.n	80025f6 <HAL_I2C_ER_IRQHandler+0x108>
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d039      	beq.n	80025f6 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002582:	7efb      	ldrb	r3, [r7, #27]
 8002584:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002594:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800259c:	7ebb      	ldrb	r3, [r7, #26]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d112      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xda>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xda>
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b21      	cmp	r3, #33	@ 0x21
 80025ac:	d008      	beq.n	80025c0 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	2b29      	cmp	r3, #41	@ 0x29
 80025b2:	d005      	beq.n	80025c0 <HAL_I2C_ER_IRQHandler+0xd2>
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b28      	cmp	r3, #40	@ 0x28
 80025b8:	d106      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b21      	cmp	r3, #33	@ 0x21
 80025be:	d103      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f001 f879 	bl	80036b8 <I2C_Slave_AF>
 80025c6:	e016      	b.n	80025f6 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025da:	7efb      	ldrb	r3, [r7, #27]
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d002      	beq.n	80025e6 <HAL_I2C_ER_IRQHandler+0xf8>
 80025e0:	7efb      	ldrb	r3, [r7, #27]
 80025e2:	2b40      	cmp	r3, #64	@ 0x40
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <HAL_I2C_ER_IRQHandler+0x12e>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f043 0308 	orr.w	r3, r3, #8
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800261a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f001 f8b6 	bl	80037a0 <I2C_ITError>
  }
}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	@ 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
 8002690:	4613      	mov	r3, r2
 8002692:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002706:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800270e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002714:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d150      	bne.n	80027c0 <I2C_MasterTransmit_TXE+0xc8>
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b21      	cmp	r3, #33	@ 0x21
 8002722:	d14d      	bne.n	80027c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d01d      	beq.n	8002766 <I2C_MasterTransmit_TXE+0x6e>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b20      	cmp	r3, #32
 800272e:	d01a      	beq.n	8002766 <I2C_MasterTransmit_TXE+0x6e>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002736:	d016      	beq.n	8002766 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002746:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2211      	movs	r2, #17
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff6c 	bl	800263c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002764:	e060      	b.n	8002828 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002774:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002784:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	d107      	bne.n	80027b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff81 	bl	80026b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027ae:	e03b      	b.n	8002828 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff3f 	bl	800263c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027be:	e033      	b.n	8002828 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	2b21      	cmp	r3, #33	@ 0x21
 80027c4:	d005      	beq.n	80027d2 <I2C_MasterTransmit_TXE+0xda>
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	2b40      	cmp	r3, #64	@ 0x40
 80027ca:	d12d      	bne.n	8002828 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b22      	cmp	r3, #34	@ 0x22
 80027d0:	d12a      	bne.n	8002828 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d108      	bne.n	80027ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80027ec:	e01c      	b.n	8002828 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b40      	cmp	r3, #64	@ 0x40
 80027f8:	d103      	bne.n	8002802 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f88e 	bl	800291c <I2C_MemoryTransmit_TXE_BTF>
}
 8002800:	e012      	b.n	8002828 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002826:	e7ff      	b.n	8002828 <I2C_MasterTransmit_TXE+0x130>
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b21      	cmp	r3, #33	@ 0x21
 8002848:	d164      	bne.n	8002914 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d012      	beq.n	800287a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002878:	e04c      	b.n	8002914 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d01d      	beq.n	80028bc <I2C_MasterTransmit_BTF+0x8c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b20      	cmp	r3, #32
 8002884:	d01a      	beq.n	80028bc <I2C_MasterTransmit_BTF+0x8c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800288c:	d016      	beq.n	80028bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800289c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2211      	movs	r2, #17
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fec1 	bl	800263c <HAL_I2C_MasterTxCpltCallback>
}
 80028ba:	e02b      	b.n	8002914 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b40      	cmp	r3, #64	@ 0x40
 80028f4:	d107      	bne.n	8002906 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fed6 	bl	80026b0 <HAL_I2C_MemTxCpltCallback>
}
 8002904:	e006      	b.n	8002914 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fe94 	bl	800263c <HAL_I2C_MasterTxCpltCallback>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d11d      	bne.n	8002970 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10b      	bne.n	8002954 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002940:	b2da      	uxtb	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002952:	e077      	b.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002958:	b29b      	uxth	r3, r3
 800295a:	121b      	asrs	r3, r3, #8
 800295c:	b2da      	uxtb	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800296e:	e069      	b.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10b      	bne.n	8002990 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297c:	b2da      	uxtb	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800298e:	e059      	b.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002994:	2b02      	cmp	r3, #2
 8002996:	d152      	bne.n	8002a3e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b22      	cmp	r3, #34	@ 0x22
 800299c:	d10d      	bne.n	80029ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80029b8:	e044      	b.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b21      	cmp	r3, #33	@ 0x21
 80029c8:	d112      	bne.n	80029f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80029ee:	e029      	b.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d124      	bne.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b21      	cmp	r3, #33	@ 0x21
 80029fe:	d121      	bne.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fe3a 	bl	80026b0 <HAL_I2C_MemTxCpltCallback>
}
 8002a3c:	e002      	b.n	8002a44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff f884 	bl	8001b4c <I2C_Flush_DR>
}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b22      	cmp	r3, #34	@ 0x22
 8002a5e:	f040 80b9 	bne.w	8002bd4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d921      	bls.n	8002aba <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	f040 8096 	bne.w	8002bd4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002ab8:	e08c      	b.n	8002bd4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d07f      	beq.n	8002bc2 <I2C_MasterReceive_RXNE+0x176>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d002      	beq.n	8002ace <I2C_MasterReceive_RXNE+0x82>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d179      	bne.n	8002bc2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f001 fb3a 	bl	8004148 <I2C_WaitOnSTOPRequestThroughIT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d14c      	bne.n	8002b74 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002af8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b40      	cmp	r3, #64	@ 0x40
 8002b32:	d10a      	bne.n	8002b4a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff fdbd 	bl	80026c2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b48:	e044      	b.n	8002bd4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d002      	beq.n	8002b5e <I2C_MasterReceive_RXNE+0x112>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d103      	bne.n	8002b66 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b64:	e002      	b.n	8002b6c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2212      	movs	r2, #18
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff fd6e 	bl	800264e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b72:	e02f      	b.n	8002bd4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b82:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fd8a 	bl	80026d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bc0:	e008      	b.n	8002bd4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd0:	605a      	str	r2, [r3, #4]
}
 8002bd2:	e7ff      	b.n	8002bd4 <I2C_MasterReceive_RXNE+0x188>
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c02:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c2a:	e0c4      	b.n	8002db6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d129      	bne.n	8002c8a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c44:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00a      	beq.n	8002c62 <I2C_MasterReceive_BTF+0x86>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d007      	beq.n	8002c62 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c88:	e095      	b.n	8002db6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d17d      	bne.n	8002d90 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d002      	beq.n	8002ca0 <I2C_MasterReceive_BTF+0xc4>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d108      	bne.n	8002cb2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e016      	b.n	8002ce0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d002      	beq.n	8002cbe <I2C_MasterReceive_BTF+0xe2>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d108      	bne.n	8002cd0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	e007      	b.n	8002ce0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cde:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002d3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b40      	cmp	r3, #64	@ 0x40
 8002d4e:	d10a      	bne.n	8002d66 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff fcaf 	bl	80026c2 <HAL_I2C_MemRxCpltCallback>
}
 8002d64:	e027      	b.n	8002db6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d002      	beq.n	8002d7a <I2C_MasterReceive_BTF+0x19e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d103      	bne.n	8002d82 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d80:	e002      	b.n	8002d88 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2212      	movs	r2, #18
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fc60 	bl	800264e <HAL_I2C_MasterRxCpltCallback>
}
 8002d8e:	e012      	b.n	8002db6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b40      	cmp	r3, #64	@ 0x40
 8002dd0:	d117      	bne.n	8002e02 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002dec:	e067      	b.n	8002ebe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
}
 8002e00:	e05d      	b.n	8002ebe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e0a:	d133      	bne.n	8002e74 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b21      	cmp	r3, #33	@ 0x21
 8002e16:	d109      	bne.n	8002e2c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e28:	611a      	str	r2, [r3, #16]
 8002e2a:	e008      	b.n	8002e3e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <I2C_Master_SB+0x92>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d032      	beq.n	8002ebe <I2C_Master_SB+0x100>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d02d      	beq.n	8002ebe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e70:	605a      	str	r2, [r3, #4]
}
 8002e72:	e024      	b.n	8002ebe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10e      	bne.n	8002e9a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	11db      	asrs	r3, r3, #7
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0306 	and.w	r3, r3, #6
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f063 030f 	orn	r3, r3, #15
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]
}
 8002e98:	e011      	b.n	8002ebe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10d      	bne.n	8002ebe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	11db      	asrs	r3, r3, #7
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0306 	and.w	r3, r3, #6
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f063 030e 	orn	r3, r3, #14
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d004      	beq.n	8002eee <I2C_Master_ADD10+0x26>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00c      	beq.n	8002f10 <I2C_Master_ADD10+0x48>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	605a      	str	r2, [r3, #4]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b091      	sub	sp, #68	@ 0x44
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b22      	cmp	r3, #34	@ 0x22
 8002f42:	f040 8174 	bne.w	800322e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <I2C_Master_ADDR+0x54>
 8002f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d10b      	bne.n	8002f6e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6c:	e16b      	b.n	8003246 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11d      	bne.n	8002fb2 <I2C_Master_ADDR+0x98>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f7e:	d118      	bne.n	8002fb2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f80:	2300      	movs	r3, #0
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fa4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	651a      	str	r2, [r3, #80]	@ 0x50
 8002fb0:	e149      	b.n	8003246 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d113      	bne.n	8002fe4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e120      	b.n	8003226 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	f040 808a 	bne.w	8003104 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ff6:	d137      	bne.n	8003068 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003006:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003016:	d113      	bne.n	8003040 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003026:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	e0f2      	b.n	8003226 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	623b      	str	r3, [r7, #32]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	623b      	str	r3, [r7, #32]
 8003054:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e0de      	b.n	8003226 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306a:	2b08      	cmp	r3, #8
 800306c:	d02e      	beq.n	80030cc <I2C_Master_ADDR+0x1b2>
 800306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003070:	2b20      	cmp	r3, #32
 8003072:	d02b      	beq.n	80030cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	2b12      	cmp	r3, #18
 8003078:	d102      	bne.n	8003080 <I2C_Master_ADDR+0x166>
 800307a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307c:	2b01      	cmp	r3, #1
 800307e:	d125      	bne.n	80030cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003082:	2b04      	cmp	r3, #4
 8003084:	d00e      	beq.n	80030a4 <I2C_Master_ADDR+0x18a>
 8003086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003088:	2b02      	cmp	r3, #2
 800308a:	d00b      	beq.n	80030a4 <I2C_Master_ADDR+0x18a>
 800308c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308e:	2b10      	cmp	r3, #16
 8003090:	d008      	beq.n	80030a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e007      	b.n	80030b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	e0ac      	b.n	8003226 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e090      	b.n	8003226 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d158      	bne.n	80031c0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003110:	2b04      	cmp	r3, #4
 8003112:	d021      	beq.n	8003158 <I2C_Master_ADDR+0x23e>
 8003114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003116:	2b02      	cmp	r3, #2
 8003118:	d01e      	beq.n	8003158 <I2C_Master_ADDR+0x23e>
 800311a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311c:	2b10      	cmp	r3, #16
 800311e:	d01b      	beq.n	8003158 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e012      	b.n	800317e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003166:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800318c:	d14b      	bne.n	8003226 <I2C_Master_ADDR+0x30c>
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003194:	d00b      	beq.n	80031ae <I2C_Master_ADDR+0x294>
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	2b01      	cmp	r3, #1
 800319a:	d008      	beq.n	80031ae <I2C_Master_ADDR+0x294>
 800319c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d005      	beq.n	80031ae <I2C_Master_ADDR+0x294>
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d002      	beq.n	80031ae <I2C_Master_ADDR+0x294>
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d13b      	bne.n	8003226 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	e032      	b.n	8003226 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031ce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031de:	d117      	bne.n	8003210 <I2C_Master_ADDR+0x2f6>
 80031e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031e6:	d00b      	beq.n	8003200 <I2C_Master_ADDR+0x2e6>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d008      	beq.n	8003200 <I2C_Master_ADDR+0x2e6>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d005      	beq.n	8003200 <I2C_Master_ADDR+0x2e6>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d002      	beq.n	8003200 <I2C_Master_ADDR+0x2e6>
 80031fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d107      	bne.n	8003210 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800320e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800322c:	e00b      	b.n	8003246 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
}
 8003244:	e7ff      	b.n	8003246 <I2C_Master_ADDR+0x32c>
 8003246:	bf00      	nop
 8003248:	3744      	adds	r7, #68	@ 0x44
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02b      	beq.n	80032c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d114      	bne.n	80032c2 <I2C_SlaveTransmit_TXE+0x72>
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b29      	cmp	r3, #41	@ 0x29
 800329c:	d111      	bne.n	80032c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2221      	movs	r2, #33	@ 0x21
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2228      	movs	r2, #40	@ 0x28
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff f9cf 	bl	8002660 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003318:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02c      	beq.n	800337e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <I2C_SlaveReceive_RXNE+0x74>
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b2a      	cmp	r3, #42	@ 0x2a
 8003358:	d111      	bne.n	800337e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003368:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2222      	movs	r2, #34	@ 0x22
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2228      	movs	r2, #40	@ 0x28
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff f97a 	bl	8002672 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033e2:	2b28      	cmp	r3, #40	@ 0x28
 80033e4:	d125      	bne.n	8003432 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	81bb      	strh	r3, [r7, #12]
 8003414:	e002      	b.n	800341c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003424:	89ba      	ldrh	r2, [r7, #12]
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff f92a 	bl	8002684 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003430:	e00e      	b.n	8003450 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b4:	d172      	bne.n	800359c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b22      	cmp	r3, #34	@ 0x22
 80034ba:	d002      	beq.n	80034c2 <I2C_Slave_STOPF+0x6a>
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b2a      	cmp	r3, #42	@ 0x2a
 80034c0:	d135      	bne.n	800352e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe f820 	bl	8001540 <HAL_DMA_GetState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d049      	beq.n	800359a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350a:	4a69      	ldr	r2, [pc, #420]	@ (80036b0 <I2C_Slave_STOPF+0x258>)
 800350c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd ff9c 	bl	8001450 <HAL_DMA_Abort_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d03d      	beq.n	800359a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800352c:	e035      	b.n	800359a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003566:	4618      	mov	r0, r3
 8003568:	f7fd ffea 	bl	8001540 <HAL_DMA_GetState>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d014      	beq.n	800359c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003576:	4a4e      	ldr	r2, [pc, #312]	@ (80036b0 <I2C_Slave_STOPF+0x258>)
 8003578:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd ff66 	bl	8001450 <HAL_DMA_Abort_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
 8003598:	e000      	b.n	800359c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800359a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03e      	beq.n	8003624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d112      	bne.n	80035da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d112      	bne.n	800360e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	f043 0204 	orr.w	r2, r3, #4
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f8b7 	bl	80037a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003632:	e039      	b.n	80036a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b2a      	cmp	r3, #42	@ 0x2a
 8003638:	d109      	bne.n	800364e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2228      	movs	r2, #40	@ 0x28
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7ff f812 	bl	8002672 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b28      	cmp	r3, #40	@ 0x28
 8003658:	d111      	bne.n	800367e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <I2C_Slave_STOPF+0x25c>)
 800365e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff f811 	bl	800269e <HAL_I2C_ListenCpltCallback>
}
 800367c:	e014      	b.n	80036a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	2b22      	cmp	r3, #34	@ 0x22
 8003684:	d002      	beq.n	800368c <I2C_Slave_STOPF+0x234>
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b22      	cmp	r3, #34	@ 0x22
 800368a:	d10d      	bne.n	80036a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe ffe5 	bl	8002672 <HAL_I2C_SlaveRxCpltCallback>
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08003ca5 	.word	0x08003ca5
 80036b4:	ffff0000 	.word	0xffff0000

080036b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d002      	beq.n	80036da <I2C_Slave_AF+0x22>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d129      	bne.n	800372e <I2C_Slave_AF+0x76>
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b28      	cmp	r3, #40	@ 0x28
 80036de:	d126      	bne.n	800372e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a2e      	ldr	r2, [pc, #184]	@ (800379c <I2C_Slave_AF+0xe4>)
 80036e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fe ffb9 	bl	800269e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800372c:	e031      	b.n	8003792 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b21      	cmp	r3, #33	@ 0x21
 8003732:	d129      	bne.n	8003788 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a19      	ldr	r2, [pc, #100]	@ (800379c <I2C_Slave_AF+0xe4>)
 8003738:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2221      	movs	r2, #33	@ 0x21
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800375e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003768:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003778:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe f9e6 	bl	8001b4c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fe ff6d 	bl	8002660 <HAL_I2C_SlaveTxCpltCallback>
}
 8003786:	e004      	b.n	8003792 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003790:	615a      	str	r2, [r3, #20]
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	ffff0000 	.word	0xffff0000

080037a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037b8:	7bbb      	ldrb	r3, [r7, #14]
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d002      	beq.n	80037c4 <I2C_ITError+0x24>
 80037be:	7bbb      	ldrb	r3, [r7, #14]
 80037c0:	2b40      	cmp	r3, #64	@ 0x40
 80037c2:	d10a      	bne.n	80037da <I2C_ITError+0x3a>
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b22      	cmp	r3, #34	@ 0x22
 80037c8:	d107      	bne.n	80037da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037e0:	2b28      	cmp	r3, #40	@ 0x28
 80037e2:	d107      	bne.n	80037f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2228      	movs	r2, #40	@ 0x28
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037f2:	e015      	b.n	8003820 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003802:	d00a      	beq.n	800381a <I2C_ITError+0x7a>
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b60      	cmp	r3, #96	@ 0x60
 8003808:	d007      	beq.n	800381a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800382e:	d162      	bne.n	80038f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800383e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003844:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d020      	beq.n	8003890 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003852:	4a6a      	ldr	r2, [pc, #424]	@ (80039fc <I2C_ITError+0x25c>)
 8003854:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fdf8 	bl	8001450 <HAL_DMA_Abort_IT>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8089 	beq.w	800397a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800388a:	4610      	mov	r0, r2
 800388c:	4798      	blx	r3
 800388e:	e074      	b.n	800397a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	4a59      	ldr	r2, [pc, #356]	@ (80039fc <I2C_ITError+0x25c>)
 8003896:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	4618      	mov	r0, r3
 800389e:	f7fd fdd7 	bl	8001450 <HAL_DMA_Abort_IT>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d068      	beq.n	800397a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b2:	2b40      	cmp	r3, #64	@ 0x40
 80038b4:	d10b      	bne.n	80038ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038f0:	4610      	mov	r0, r2
 80038f2:	4798      	blx	r3
 80038f4:	e041      	b.n	800397a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b60      	cmp	r3, #96	@ 0x60
 8003900:	d125      	bne.n	800394e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d10b      	bne.n	8003936 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fecd 	bl	80026e6 <HAL_I2C_AbortCpltCallback>
 800394c:	e015      	b.n	800397a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003958:	2b40      	cmp	r3, #64	@ 0x40
 800395a:	d10b      	bne.n	8003974 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fe fead 	bl	80026d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10e      	bne.n	80039a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d113      	bne.n	80039f4 <I2C_ITError+0x254>
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b28      	cmp	r3, #40	@ 0x28
 80039d0:	d110      	bne.n	80039f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a00 <I2C_ITError+0x260>)
 80039d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fe fe55 	bl	800269e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	08003ca5 	.word	0x08003ca5
 8003a00:	ffff0000 	.word	0xffff0000

08003a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d006      	beq.n	8003a2e <I2C_MasterRequestWrite+0x2a>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d003      	beq.n	8003a2e <I2C_MasterRequestWrite+0x2a>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a2c:	d108      	bne.n	8003a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e00b      	b.n	8003a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	2b12      	cmp	r3, #18
 8003a46:	d107      	bne.n	8003a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9c5 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00d      	beq.n	8003a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7e:	d103      	bne.n	8003a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e035      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a94:	d108      	bne.n	8003aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e01b      	b.n	8003ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aa8:	897b      	ldrh	r3, [r7, #10]
 8003aaa:	11db      	asrs	r3, r3, #7
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 0306 	and.w	r3, r3, #6
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f063 030f 	orn	r3, r3, #15
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	490e      	ldr	r1, [pc, #56]	@ (8003b00 <I2C_MasterRequestWrite+0xfc>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa0e 	bl	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e010      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4907      	ldr	r1, [pc, #28]	@ (8003b04 <I2C_MasterRequestWrite+0x100>)
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f9fe 	bl	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	00010008 	.word	0x00010008
 8003b04:	00010002 	.word	0x00010002

08003b08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d006      	beq.n	8003b42 <I2C_MasterRequestRead+0x3a>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d003      	beq.n	8003b42 <I2C_MasterRequestRead+0x3a>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b40:	d108      	bne.n	8003b54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e00b      	b.n	8003b6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	2b11      	cmp	r3, #17
 8003b5a:	d107      	bne.n	8003b6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f93b 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b92:	d103      	bne.n	8003b9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e079      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba8:	d108      	bne.n	8003bbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]
 8003bba:	e05f      	b.n	8003c7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bbc:	897b      	ldrh	r3, [r7, #10]
 8003bbe:	11db      	asrs	r3, r3, #7
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0306 	and.w	r3, r3, #6
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	f063 030f 	orn	r3, r3, #15
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4930      	ldr	r1, [pc, #192]	@ (8003c9c <I2C_MasterRequestRead+0x194>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f984 	bl	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e054      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bea:	897b      	ldrh	r3, [r7, #10]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4929      	ldr	r1, [pc, #164]	@ (8003ca0 <I2C_MasterRequestRead+0x198>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f974 	bl	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e044      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f8d9 	bl	8003df4 <I2C_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00d      	beq.n	8003c64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c56:	d103      	bne.n	8003c60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e017      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c64:	897b      	ldrh	r3, [r7, #10]
 8003c66:	11db      	asrs	r3, r3, #7
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f003 0306 	and.w	r3, r3, #6
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f063 030e 	orn	r3, r3, #14
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4907      	ldr	r1, [pc, #28]	@ (8003ca0 <I2C_MasterRequestRead+0x198>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f930 	bl	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010008 	.word	0x00010008
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8003dec <I2C_DMAAbort+0x148>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	08db      	lsrs	r3, r3, #3
 8003cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8003df0 <I2C_DMAAbort+0x14c>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0a1a      	lsrs	r2, r3, #8
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00da      	lsls	r2, r3, #3
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	f043 0220 	orr.w	r2, r3, #32
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003cea:	e00a      	b.n	8003d02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d00:	d0ea      	beq.n	8003cd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0e:	2200      	movs	r2, #0
 8003d10:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	2200      	movs	r2, #0
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d44:	2200      	movs	r2, #0
 8003d46:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d54:	2200      	movs	r2, #0
 8003d56:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b60      	cmp	r3, #96	@ 0x60
 8003d72:	d10e      	bne.n	8003d92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7fe fcab 	bl	80026e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d90:	e027      	b.n	8003de2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d92:	7cfb      	ldrb	r3, [r7, #19]
 8003d94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d98:	2b28      	cmp	r3, #40	@ 0x28
 8003d9a:	d117      	bne.n	8003dcc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2228      	movs	r2, #40	@ 0x28
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003dca:	e007      	b.n	8003ddc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ddc:	6978      	ldr	r0, [r7, #20]
 8003dde:	f7fe fc79 	bl	80026d4 <HAL_I2C_ErrorCallback>
}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000000 	.word	0x20000000
 8003df0:	14f8b589 	.word	0x14f8b589

08003df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e04:	e048      	b.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d044      	beq.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fd f9a9 	bl	8001164 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d139      	bne.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10d      	bne.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	43da      	mvns	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	e00c      	b.n	8003e64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf0c      	ite	eq
 8003e5c:	2301      	moveq	r3, #1
 8003e5e:	2300      	movne	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d116      	bne.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e023      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d10d      	bne.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	4013      	ands	r3, r2
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	e00c      	b.n	8003ed8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	43da      	mvns	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d093      	beq.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef6:	e071      	b.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f06:	d123      	bne.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e067      	b.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d041      	beq.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fd f904 	bl	8001164 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d136      	bne.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d10c      	bne.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e00b      	b.n	8003faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	43da      	mvns	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e021      	b.n	8004020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10c      	bne.n	8004000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf14      	ite	ne
 8003ff8:	2301      	movne	r3, #1
 8003ffa:	2300      	moveq	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	e00b      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	43da      	mvns	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f af6d 	bne.w	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004034:	e034      	b.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f915 	bl	8004266 <I2C_IsAcknowledgeFailed>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e034      	b.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d028      	beq.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fd f889 	bl	8001164 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11d      	bne.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b80      	cmp	r3, #128	@ 0x80
 8004070:	d016      	beq.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e007      	b.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b80      	cmp	r3, #128	@ 0x80
 80040ac:	d1c3      	bne.n	8004036 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040c4:	e034      	b.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f8cd 	bl	8004266 <I2C_IsAcknowledgeFailed>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e034      	b.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d028      	beq.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fd f841 	bl	8001164 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d11d      	bne.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d016      	beq.n	8004130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e007      	b.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b04      	cmp	r3, #4
 800413c:	d1c3      	bne.n	80040c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	0a1a      	lsrs	r2, r3, #8
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e008      	b.n	8004198 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004194:	d0e9      	beq.n	800416a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000000 	.word	0x20000000
 80041a8:	14f8b589 	.word	0x14f8b589

080041ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b8:	e049      	b.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d119      	bne.n	80041fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0210 	mvn.w	r2, #16
 80041d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e030      	b.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fc:	f7fc ffb2 	bl	8001164 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	429a      	cmp	r2, r3
 800420a:	d302      	bcc.n	8004212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11d      	bne.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421c:	2b40      	cmp	r3, #64	@ 0x40
 800421e:	d016      	beq.n	800424e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e007      	b.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004258:	2b40      	cmp	r3, #64	@ 0x40
 800425a:	d1ae      	bne.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427c:	d11b      	bne.n	80042b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f043 0204 	orr.w	r2, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80042d2:	d103      	bne.n	80042dc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042da:	e007      	b.n	80042ec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042e4:	d102      	bne.n	80042ec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e272      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8087 	beq.w	8004426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004318:	4b92      	ldr	r3, [pc, #584]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	2b04      	cmp	r3, #4
 8004322:	d00c      	beq.n	800433e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004324:	4b8f      	ldr	r3, [pc, #572]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d112      	bne.n	8004356 <HAL_RCC_OscConfig+0x5e>
 8004330:	4b8c      	ldr	r3, [pc, #560]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433c:	d10b      	bne.n	8004356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433e:	4b89      	ldr	r3, [pc, #548]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d06c      	beq.n	8004424 <HAL_RCC_OscConfig+0x12c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d168      	bne.n	8004424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e24c      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x76>
 8004360:	4b80      	ldr	r3, [pc, #512]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a7f      	ldr	r2, [pc, #508]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e02e      	b.n	80043cc <HAL_RCC_OscConfig+0xd4>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x98>
 8004376:	4b7b      	ldr	r3, [pc, #492]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a7a      	ldr	r2, [pc, #488]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 800437c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	4b78      	ldr	r3, [pc, #480]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a77      	ldr	r2, [pc, #476]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e01d      	b.n	80043cc <HAL_RCC_OscConfig+0xd4>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0xbc>
 800439a:	4b72      	ldr	r3, [pc, #456]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a71      	ldr	r2, [pc, #452]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0xd4>
 80043b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b68      	ldr	r3, [pc, #416]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a67      	ldr	r2, [pc, #412]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fc fec6 	bl	8001164 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fc fec2 	bl	8001164 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	@ 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e200      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0xe4>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fc feb2 	bl	8001164 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004404:	f7fc feae 	bl	8001164 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	@ 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e1ec      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	4b53      	ldr	r3, [pc, #332]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x10c>
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d063      	beq.n	80044fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004432:	4b4c      	ldr	r3, [pc, #304]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800443e:	4b49      	ldr	r3, [pc, #292]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	d11c      	bne.n	8004484 <HAL_RCC_OscConfig+0x18c>
 800444a:	4b46      	ldr	r3, [pc, #280]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004456:	4b43      	ldr	r3, [pc, #268]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x176>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e1c0      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	4b3d      	ldr	r3, [pc, #244]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4939      	ldr	r1, [pc, #228]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	e03a      	b.n	80044fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448c:	4b36      	ldr	r3, [pc, #216]	@ (8004568 <HAL_RCC_OscConfig+0x270>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004492:	f7fc fe67 	bl	8001164 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449a:	f7fc fe63 	bl	8001164 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e1a1      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4927      	ldr	r1, [pc, #156]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
 80044cc:	e015      	b.n	80044fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ce:	4b26      	ldr	r3, [pc, #152]	@ (8004568 <HAL_RCC_OscConfig+0x270>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fc fe46 	bl	8001164 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044dc:	f7fc fe42 	bl	8001164 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e180      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d03a      	beq.n	800457c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d019      	beq.n	8004542 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450e:	4b17      	ldr	r3, [pc, #92]	@ (800456c <HAL_RCC_OscConfig+0x274>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004514:	f7fc fe26 	bl	8001164 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451c:	f7fc fe22 	bl	8001164 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e160      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <HAL_RCC_OscConfig+0x26c>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800453a:	2001      	movs	r0, #1
 800453c:	f000 face 	bl	8004adc <RCC_Delay>
 8004540:	e01c      	b.n	800457c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_RCC_OscConfig+0x274>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004548:	f7fc fe0c 	bl	8001164 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800454e:	e00f      	b.n	8004570 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004550:	f7fc fe08 	bl	8001164 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d908      	bls.n	8004570 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e146      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	42420000 	.word	0x42420000
 800456c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b92      	ldr	r3, [pc, #584]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e9      	bne.n	8004550 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a6 	beq.w	80046d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b8b      	ldr	r3, [pc, #556]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	4b88      	ldr	r3, [pc, #544]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4a87      	ldr	r2, [pc, #540]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a4:	61d3      	str	r3, [r2, #28]
 80045a6:	4b85      	ldr	r3, [pc, #532]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	4b82      	ldr	r3, [pc, #520]	@ (80047c0 <HAL_RCC_OscConfig+0x4c8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c2:	4b7f      	ldr	r3, [pc, #508]	@ (80047c0 <HAL_RCC_OscConfig+0x4c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7e      	ldr	r2, [pc, #504]	@ (80047c0 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fc fdc9 	bl	8001164 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fc fdc5 	bl	8001164 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	@ 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e103      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	4b75      	ldr	r3, [pc, #468]	@ (80047c0 <HAL_RCC_OscConfig+0x4c8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x312>
 80045fc:	4b6f      	ldr	r3, [pc, #444]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4a6e      	ldr	r2, [pc, #440]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6213      	str	r3, [r2, #32]
 8004608:	e02d      	b.n	8004666 <HAL_RCC_OscConfig+0x36e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x334>
 8004612:	4b6a      	ldr	r3, [pc, #424]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4a69      	ldr	r2, [pc, #420]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6213      	str	r3, [r2, #32]
 800461e:	4b67      	ldr	r3, [pc, #412]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a66      	ldr	r2, [pc, #408]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	6213      	str	r3, [r2, #32]
 800462a:	e01c      	b.n	8004666 <HAL_RCC_OscConfig+0x36e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10c      	bne.n	800464e <HAL_RCC_OscConfig+0x356>
 8004634:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4a60      	ldr	r2, [pc, #384]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	6213      	str	r3, [r2, #32]
 8004640:	4b5e      	ldr	r3, [pc, #376]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4a5d      	ldr	r2, [pc, #372]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6213      	str	r3, [r2, #32]
 800464c:	e00b      	b.n	8004666 <HAL_RCC_OscConfig+0x36e>
 800464e:	4b5b      	ldr	r3, [pc, #364]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	4a5a      	ldr	r2, [pc, #360]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6213      	str	r3, [r2, #32]
 800465a:	4b58      	ldr	r3, [pc, #352]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a57      	ldr	r2, [pc, #348]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466e:	f7fc fd79 	bl	8001164 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fc fd75 	bl	8001164 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0b1      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	4b4b      	ldr	r3, [pc, #300]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ee      	beq.n	8004676 <HAL_RCC_OscConfig+0x37e>
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fc fd63 	bl	8001164 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fc fd5f 	bl	8001164 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e09b      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	4b40      	ldr	r3, [pc, #256]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ee      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d105      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b3c      	ldr	r3, [pc, #240]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a3b      	ldr	r2, [pc, #236]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8087 	beq.w	80047ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e0:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d061      	beq.n	80047b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d146      	bne.n	8004782 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f4:	4b33      	ldr	r3, [pc, #204]	@ (80047c4 <HAL_RCC_OscConfig+0x4cc>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fa:	f7fc fd33 	bl	8001164 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004702:	f7fc fd2f 	bl	8001164 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e06d      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004714:	4b29      	ldr	r3, [pc, #164]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d108      	bne.n	800473c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800472a:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	4921      	ldr	r1, [pc, #132]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473c:	4b1f      	ldr	r3, [pc, #124]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a19      	ldr	r1, [r3, #32]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	430b      	orrs	r3, r1
 800474e:	491b      	ldr	r1, [pc, #108]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004754:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fc fd03 	bl	8001164 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004762:	f7fc fcff 	bl	8001164 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e03d      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x46a>
 8004780:	e035      	b.n	80047ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <HAL_RCC_OscConfig+0x4cc>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fc fcec 	bl	8001164 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fc fce8 	bl	8001164 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e026      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a2:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x498>
 80047ae:	e01e      	b.n	80047ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e019      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
 80047c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_RCC_OscConfig+0x500>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d106      	bne.n	80047ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0d0      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b6a      	ldr	r3, [pc, #424]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d910      	bls.n	8004840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b67      	ldr	r3, [pc, #412]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	4965      	ldr	r1, [pc, #404]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b8      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004858:	4b59      	ldr	r3, [pc, #356]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4a58      	ldr	r2, [pc, #352]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004870:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a52      	ldr	r2, [pc, #328]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800487a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b50      	ldr	r3, [pc, #320]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	494d      	ldr	r1, [pc, #308]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d040      	beq.n	800491c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b47      	ldr	r3, [pc, #284]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d115      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	4b41      	ldr	r3, [pc, #260]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e073      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	4b3d      	ldr	r3, [pc, #244]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e06b      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048da:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4936      	ldr	r1, [pc, #216]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ec:	f7fc fc3a 	bl	8001164 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fc fc36 	bl	8001164 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e053      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 020c 	and.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1eb      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d210      	bcs.n	800494c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b24      	ldr	r3, [pc, #144]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 0207 	bic.w	r2, r3, #7
 8004932:	4922      	ldr	r1, [pc, #136]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4916      	ldr	r1, [pc, #88]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498a:	f000 f821 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490a      	ldr	r1, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1cc>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_ClockConfig+0x1d0>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc fb98 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40022000 	.word	0x40022000
 80049c0:	40021000 	.word	0x40021000
 80049c4:	08006508 	.word	0x08006508
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x94>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d002      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x30>
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d003      	beq.n	8004a06 <HAL_RCC_GetSysClockFreq+0x36>
 80049fe:	e027      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a00:	4b19      	ldr	r3, [pc, #100]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a02:	613b      	str	r3, [r7, #16]
      break;
 8004a04:	e027      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	0c9b      	lsrs	r3, r3, #18
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a10:	5cd3      	ldrb	r3, [r2, r3]
 8004a12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d010      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	0c5b      	lsrs	r3, r3, #17
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	4a11      	ldr	r2, [pc, #68]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a2a:	5cd3      	ldrb	r3, [r2, r3]
 8004a2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a0d      	ldr	r2, [pc, #52]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a32:	fb03 f202 	mul.w	r2, r3, r2
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e004      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	613b      	str	r3, [r7, #16]
      break;
 8004a4e:	e002      	b.n	8004a56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a52:	613b      	str	r3, [r7, #16]
      break;
 8004a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a56:	693b      	ldr	r3, [r7, #16]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	007a1200 	.word	0x007a1200
 8004a6c:	08006520 	.word	0x08006520
 8004a70:	08006530 	.word	0x08006530
 8004a74:	003d0900 	.word	0x003d0900

08004a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b02      	ldr	r3, [pc, #8]	@ (8004a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	20000000 	.word	0x20000000

08004a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a90:	f7ff fff2 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4903      	ldr	r1, [pc, #12]	@ (8004ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	08006518 	.word	0x08006518

08004ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ab8:	f7ff ffde 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004abc:	4602      	mov	r2, r0
 8004abe:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	0adb      	lsrs	r3, r3, #11
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	4903      	ldr	r1, [pc, #12]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08006518 	.word	0x08006518

08004adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b10 <RCC_Delay+0x34>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <RCC_Delay+0x38>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004af8:	bf00      	nop
  }
  while (Delay --);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e5a      	subs	r2, r3, #1
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f9      	bne.n	8004af8 <RCC_Delay+0x1c>
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	20000000 	.word	0x20000000
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e076      	b.n	8004c18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b3a:	d009      	beq.n	8004b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	61da      	str	r2, [r3, #28]
 8004b42:	e005      	b.n	8004b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fc f946 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	0c1a      	lsrs	r2, r3, #16
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f002 0204 	and.w	r2, r2, #4
 8004bf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10e      	bne.n	8004c60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
    return;
 8004c5e:	e0b7      	b.n	8004dd0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_SPI_IRQHandler+0x5e>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4798      	blx	r3
    return;
 8004c7c:	e0a8      	b.n	8004dd0 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_SPI_IRQHandler+0x74>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 809e 	beq.w	8004dd0 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8098 	beq.w	8004dd0 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d023      	beq.n	8004cf2 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d011      	beq.n	8004cda <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cba:	f043 0204 	orr.w	r2, r3, #4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	e00b      	b.n	8004cf2 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	693b      	ldr	r3, [r7, #16]
        return;
 8004cf0:	e06e      	b.n	8004dd0 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d014      	beq.n	8004d26 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d04f      	beq.n	8004dce <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <HAL_SPI_IRQHandler+0x13a>
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d034      	beq.n	8004dc4 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0203 	bic.w	r2, r2, #3
 8004d68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d011      	beq.n	8004d96 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d76:	4a18      	ldr	r2, [pc, #96]	@ (8004dd8 <HAL_SPI_IRQHandler+0x1b8>)
 8004d78:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fc fb66 	bl	8001450 <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da2:	4a0d      	ldr	r2, [pc, #52]	@ (8004dd8 <HAL_SPI_IRQHandler+0x1b8>)
 8004da4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fc fb50 	bl	8001450 <HAL_DMA_Abort_IT>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004dc2:	e003      	b.n	8004dcc <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f809 	bl	8004ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004dca:	e000      	b.n	8004dce <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004dcc:	bf00      	nop
    return;
 8004dce:	bf00      	nop
  }
}
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	08004def 	.word	0x08004def

08004ddc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7ff ffe7 	bl	8004ddc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e042      	b.n	8004eae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7fc f82f 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2224      	movs	r2, #36	@ 0x24
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fd62 	bl	8005924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695a      	ldr	r2, [r3, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b08a      	sub	sp, #40	@ 0x28
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d175      	bne.n	8004fc2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_UART_Transmit+0x2c>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06e      	b.n	8004fc4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2221      	movs	r2, #33	@ 0x21
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ef4:	f7fc f936 	bl	8001164 <HAL_GetTick>
 8004ef8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	88fa      	ldrh	r2, [r7, #6]
 8004efe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	88fa      	ldrh	r2, [r7, #6]
 8004f04:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0e:	d108      	bne.n	8004f22 <HAL_UART_Transmit+0x6c>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e003      	b.n	8004f2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f2a:	e02e      	b.n	8004f8a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	@ 0x80
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 fb00 	bl	800553c <UART_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e03a      	b.n	8004fc4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f62:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	3302      	adds	r3, #2
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e007      	b.n	8004f7c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1cb      	bne.n	8004f2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2140      	movs	r1, #64	@ 0x40
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 facc 	bl	800553c <UART_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e006      	b.n	8004fc4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b0ba      	sub	sp, #232	@ 0xe8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800500a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10f      	bne.n	8005032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_UART_IRQHandler+0x66>
 800501e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fbbc 	bl	80057a8 <UART_Receive_IT>
      return;
 8005030:	e25b      	b.n	80054ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 80de 	beq.w	80051f8 <HAL_UART_IRQHandler+0x22c>
 800503c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800504c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80d1 	beq.w	80051f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_UART_IRQHandler+0xae>
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00b      	beq.n	800509e <HAL_UART_IRQHandler+0xd2>
 8005086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f043 0202 	orr.w	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0xf6>
 80050aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d011      	beq.n	80050f2 <HAL_UART_IRQHandler+0x126>
 80050ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ea:	f043 0208 	orr.w	r2, r3, #8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 81f2 	beq.w	80054e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_UART_IRQHandler+0x14e>
 8005108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fb47 	bl	80057a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <HAL_UART_IRQHandler+0x17a>
 800513e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d04f      	beq.n	80051e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa51 	bl	80055ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d041      	beq.n	80051de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3314      	adds	r3, #20
 8005182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005186:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800518a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1d9      	bne.n	800515a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d013      	beq.n	80051d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b2:	4a7e      	ldr	r2, [pc, #504]	@ (80053ac <HAL_UART_IRQHandler+0x3e0>)
 80051b4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fc f948 	bl	8001450 <HAL_DMA_Abort_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e00e      	b.n	80051f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f99c 	bl	8005514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	e00a      	b.n	80051f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f998 	bl	8005514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e006      	b.n	80051f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f994 	bl	8005514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051f2:	e175      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f4:	bf00      	nop
    return;
 80051f6:	e173      	b.n	80054e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f040 814f 	bne.w	80054a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 8148 	beq.w	80054a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8141 	beq.w	80054a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60bb      	str	r3, [r7, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80b6 	beq.w	80053b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 8145 	beq.w	80054e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800525e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005262:	429a      	cmp	r2, r3
 8005264:	f080 813e 	bcs.w	80054e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800526e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b20      	cmp	r3, #32
 8005278:	f000 8088 	beq.w	800538c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	330c      	adds	r3, #12
 8005282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005292:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005296:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800529a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052a8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1d9      	bne.n	800527c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3314      	adds	r3, #20
 80052ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e1      	bne.n	80052c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3314      	adds	r3, #20
 800530a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005314:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005316:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800531a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3314      	adds	r3, #20
 8005324:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005328:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800532a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800532e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e3      	bne.n	8005304 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800535a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800536e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005370:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005374:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800537c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e3      	bne.n	800534a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc f827 	bl	80013da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800539a:	b29b      	uxth	r3, r3
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	b29b      	uxth	r3, r3
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8bf 	bl	8005526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a8:	e09c      	b.n	80054e4 <HAL_UART_IRQHandler+0x518>
 80053aa:	bf00      	nop
 80053ac:	080056b3 	.word	0x080056b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 808e 	beq.w	80054e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8089 	beq.w	80054e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80053fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e3      	bne.n	80053d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	623b      	str	r3, [r7, #32]
   return(result);
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3314      	adds	r3, #20
 800542e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005432:	633a      	str	r2, [r7, #48]	@ 0x30
 8005434:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e3      	bne.n	800540e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	60fb      	str	r3, [r7, #12]
   return(result);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0310 	bic.w	r3, r3, #16
 800546a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005478:	61fa      	str	r2, [r7, #28]
 800547a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	69b9      	ldr	r1, [r7, #24]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	617b      	str	r3, [r7, #20]
   return(result);
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e3      	bne.n	8005454 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f844 	bl	8005526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800549e:	e023      	b.n	80054e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d009      	beq.n	80054c0 <HAL_UART_IRQHandler+0x4f4>
 80054ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f90e 	bl	80056da <UART_Transmit_IT>
    return;
 80054be:	e014      	b.n	80054ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <HAL_UART_IRQHandler+0x51e>
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f94d 	bl	8005778 <UART_EndTransmit_IT>
    return;
 80054de:	e004      	b.n	80054ea <HAL_UART_IRQHandler+0x51e>
    return;
 80054e0:	bf00      	nop
 80054e2:	e002      	b.n	80054ea <HAL_UART_IRQHandler+0x51e>
      return;
 80054e4:	bf00      	nop
 80054e6:	e000      	b.n	80054ea <HAL_UART_IRQHandler+0x51e>
      return;
 80054e8:	bf00      	nop
  }
}
 80054ea:	37e8      	adds	r7, #232	@ 0xe8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr

08005502 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	460b      	mov	r3, r1
 8005530:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554c:	e03b      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d037      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fb fe05 	bl	8001164 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <UART_WaitOnFlagUntilTimeout+0x30>
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e03a      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b80      	cmp	r3, #128	@ 0x80
 8005582:	d020      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d01d      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b08      	cmp	r3, #8
 8005596:	d116      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f81d 	bl	80055ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2208      	movs	r2, #8
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e00f      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d0b4      	beq.n	800554e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b095      	sub	sp, #84	@ 0x54
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	330c      	adds	r3, #12
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800560c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005616:	643a      	str	r2, [r7, #64]	@ 0x40
 8005618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800561c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	61fb      	str	r3, [r7, #28]
   return(result);
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3314      	adds	r3, #20
 8005648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800564a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005662:	2b01      	cmp	r3, #1
 8005664:	d119      	bne.n	800569a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	60bb      	str	r3, [r7, #8]
   return(result);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f023 0310 	bic.w	r3, r3, #16
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005686:	61ba      	str	r2, [r7, #24]
 8005688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6979      	ldr	r1, [r7, #20]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	613b      	str	r3, [r7, #16]
   return(result);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e5      	bne.n	8005666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056a8:	bf00      	nop
 80056aa:	3754      	adds	r7, #84	@ 0x54
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff ff21 	bl	8005514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b21      	cmp	r3, #33	@ 0x21
 80056ec:	d13e      	bne.n	800576c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056f6:	d114      	bne.n	8005722 <UART_Transmit_IT+0x48>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d110      	bne.n	8005722 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	1c9a      	adds	r2, r3, #2
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]
 8005720:	e008      	b.n	8005734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6211      	str	r1, [r2, #32]
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29b      	uxth	r3, r3
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	4619      	mov	r1, r3
 8005742:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10f      	bne.n	8005768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800578e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fea9 	bl	80054f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08c      	sub	sp, #48	@ 0x30
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b22      	cmp	r3, #34	@ 0x22
 80057ba:	f040 80ae 	bne.w	800591a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c6:	d117      	bne.n	80057f8 <UART_Receive_IT+0x50>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d113      	bne.n	80057f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	1c9a      	adds	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80057f6:	e026      	b.n	8005846 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800580a:	d007      	beq.n	800581c <UART_Receive_IT+0x74>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <UART_Receive_IT+0x82>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b2da      	uxtb	r2, r3
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e008      	b.n	800583c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005836:	b2da      	uxtb	r2, r3
 8005838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29b      	uxth	r3, r3
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4619      	mov	r1, r3
 8005854:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005856:	2b00      	cmp	r3, #0
 8005858:	d15d      	bne.n	8005916 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0220 	bic.w	r2, r2, #32
 8005868:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d135      	bne.n	800590c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	613b      	str	r3, [r7, #16]
   return(result);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	f023 0310 	bic.w	r3, r3, #16
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c6:	623a      	str	r2, [r7, #32]
 80058c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	69f9      	ldr	r1, [r7, #28]
 80058cc:	6a3a      	ldr	r2, [r7, #32]
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e5      	bne.n	80058a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d10a      	bne.n	80058fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fe0e 	bl	8005526 <HAL_UARTEx_RxEventCallback>
 800590a:	e002      	b.n	8005912 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7ff fdf8 	bl	8005502 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e002      	b.n	800591c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3730      	adds	r7, #48	@ 0x30
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800595e:	f023 030c 	bic.w	r3, r3, #12
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	430b      	orrs	r3, r1
 800596a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <UART_SetConfig+0x114>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d103      	bne.n	8005994 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800598c:	f7ff f892 	bl	8004ab4 <HAL_RCC_GetPCLK2Freq>
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	e002      	b.n	800599a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005994:	f7ff f87a 	bl	8004a8c <HAL_RCC_GetPCLK1Freq>
 8005998:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009a      	lsls	r2, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	4a22      	ldr	r2, [pc, #136]	@ (8005a3c <UART_SetConfig+0x118>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	0119      	lsls	r1, r3, #4
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	009a      	lsls	r2, r3, #2
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059d0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a3c <UART_SetConfig+0x118>)
 80059d2:	fba3 0302 	umull	r0, r3, r3, r2
 80059d6:	095b      	lsrs	r3, r3, #5
 80059d8:	2064      	movs	r0, #100	@ 0x64
 80059da:	fb00 f303 	mul.w	r3, r0, r3
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	3332      	adds	r3, #50	@ 0x32
 80059e4:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <UART_SetConfig+0x118>)
 80059e6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059f0:	4419      	add	r1, r3
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009a      	lsls	r2, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a08:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <UART_SetConfig+0x118>)
 8005a0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2064      	movs	r0, #100	@ 0x64
 8005a12:	fb00 f303 	mul.w	r3, r0, r3
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	3332      	adds	r3, #50	@ 0x32
 8005a1c:	4a07      	ldr	r2, [pc, #28]	@ (8005a3c <UART_SetConfig+0x118>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40013800 	.word	0x40013800
 8005a3c:	51eb851f 	.word	0x51eb851f

08005a40 <siprintf>:
 8005a40:	b40e      	push	{r1, r2, r3}
 8005a42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a46:	b500      	push	{lr}
 8005a48:	b09c      	sub	sp, #112	@ 0x70
 8005a4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a4c:	9002      	str	r0, [sp, #8]
 8005a4e:	9006      	str	r0, [sp, #24]
 8005a50:	9107      	str	r1, [sp, #28]
 8005a52:	9104      	str	r1, [sp, #16]
 8005a54:	4808      	ldr	r0, [pc, #32]	@ (8005a78 <siprintf+0x38>)
 8005a56:	4909      	ldr	r1, [pc, #36]	@ (8005a7c <siprintf+0x3c>)
 8005a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	a902      	add	r1, sp, #8
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	f000 f9b0 	bl	8005dc8 <_svfiprintf_r>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	9b02      	ldr	r3, [sp, #8]
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	b01c      	add	sp, #112	@ 0x70
 8005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a74:	b003      	add	sp, #12
 8005a76:	4770      	bx	lr
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	ffff0208 	.word	0xffff0208

08005a80 <memcmp>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	3901      	subs	r1, #1
 8005a84:	4402      	add	r2, r0
 8005a86:	4290      	cmp	r0, r2
 8005a88:	d101      	bne.n	8005a8e <memcmp+0xe>
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e005      	b.n	8005a9a <memcmp+0x1a>
 8005a8e:	7803      	ldrb	r3, [r0, #0]
 8005a90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	d001      	beq.n	8005a9c <memcmp+0x1c>
 8005a98:	1b18      	subs	r0, r3, r4
 8005a9a:	bd10      	pop	{r4, pc}
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	e7f2      	b.n	8005a86 <memcmp+0x6>

08005aa0 <memset>:
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4402      	add	r2, r0
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <__errno>:
 8005ab0:	4b01      	ldr	r3, [pc, #4]	@ (8005ab8 <__errno+0x8>)
 8005ab2:	6818      	ldr	r0, [r3, #0]
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	2000000c 	.word	0x2000000c

08005abc <__libc_init_array>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	2600      	movs	r6, #0
 8005ac0:	4d0c      	ldr	r5, [pc, #48]	@ (8005af4 <__libc_init_array+0x38>)
 8005ac2:	4c0d      	ldr	r4, [pc, #52]	@ (8005af8 <__libc_init_array+0x3c>)
 8005ac4:	1b64      	subs	r4, r4, r5
 8005ac6:	10a4      	asrs	r4, r4, #2
 8005ac8:	42a6      	cmp	r6, r4
 8005aca:	d109      	bne.n	8005ae0 <__libc_init_array+0x24>
 8005acc:	f000 fc78 	bl	80063c0 <_init>
 8005ad0:	2600      	movs	r6, #0
 8005ad2:	4d0a      	ldr	r5, [pc, #40]	@ (8005afc <__libc_init_array+0x40>)
 8005ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8005b00 <__libc_init_array+0x44>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	42a6      	cmp	r6, r4
 8005adc:	d105      	bne.n	8005aea <__libc_init_array+0x2e>
 8005ade:	bd70      	pop	{r4, r5, r6, pc}
 8005ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae4:	4798      	blx	r3
 8005ae6:	3601      	adds	r6, #1
 8005ae8:	e7ee      	b.n	8005ac8 <__libc_init_array+0xc>
 8005aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aee:	4798      	blx	r3
 8005af0:	3601      	adds	r6, #1
 8005af2:	e7f2      	b.n	8005ada <__libc_init_array+0x1e>
 8005af4:	08006570 	.word	0x08006570
 8005af8:	08006570 	.word	0x08006570
 8005afc:	08006570 	.word	0x08006570
 8005b00:	08006574 	.word	0x08006574

08005b04 <__retarget_lock_acquire_recursive>:
 8005b04:	4770      	bx	lr

08005b06 <__retarget_lock_release_recursive>:
 8005b06:	4770      	bx	lr

08005b08 <memcpy>:
 8005b08:	440a      	add	r2, r1
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b10:	d100      	bne.n	8005b14 <memcpy+0xc>
 8005b12:	4770      	bx	lr
 8005b14:	b510      	push	{r4, lr}
 8005b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b20:	d1f9      	bne.n	8005b16 <memcpy+0xe>
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <_free_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d040      	beq.n	8005bae <_free_r+0x8a>
 8005b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b30:	1f0c      	subs	r4, r1, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	bfb8      	it	lt
 8005b36:	18e4      	addlt	r4, r4, r3
 8005b38:	f000 f8de 	bl	8005cf8 <__malloc_lock>
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <_free_r+0x8c>)
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	b933      	cbnz	r3, 8005b50 <_free_r+0x2c>
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	4628      	mov	r0, r5
 8005b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b4c:	f000 b8da 	b.w	8005d04 <__malloc_unlock>
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	d908      	bls.n	8005b66 <_free_r+0x42>
 8005b54:	6820      	ldr	r0, [r4, #0]
 8005b56:	1821      	adds	r1, r4, r0
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	bf01      	itttt	eq
 8005b5c:	6819      	ldreq	r1, [r3, #0]
 8005b5e:	685b      	ldreq	r3, [r3, #4]
 8005b60:	1809      	addeq	r1, r1, r0
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	e7ed      	b.n	8005b42 <_free_r+0x1e>
 8005b66:	461a      	mov	r2, r3
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b10b      	cbz	r3, 8005b70 <_free_r+0x4c>
 8005b6c:	42a3      	cmp	r3, r4
 8005b6e:	d9fa      	bls.n	8005b66 <_free_r+0x42>
 8005b70:	6811      	ldr	r1, [r2, #0]
 8005b72:	1850      	adds	r0, r2, r1
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d10b      	bne.n	8005b90 <_free_r+0x6c>
 8005b78:	6820      	ldr	r0, [r4, #0]
 8005b7a:	4401      	add	r1, r0
 8005b7c:	1850      	adds	r0, r2, r1
 8005b7e:	4283      	cmp	r3, r0
 8005b80:	6011      	str	r1, [r2, #0]
 8005b82:	d1e0      	bne.n	8005b46 <_free_r+0x22>
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4408      	add	r0, r1
 8005b8a:	6010      	str	r0, [r2, #0]
 8005b8c:	6053      	str	r3, [r2, #4]
 8005b8e:	e7da      	b.n	8005b46 <_free_r+0x22>
 8005b90:	d902      	bls.n	8005b98 <_free_r+0x74>
 8005b92:	230c      	movs	r3, #12
 8005b94:	602b      	str	r3, [r5, #0]
 8005b96:	e7d6      	b.n	8005b46 <_free_r+0x22>
 8005b98:	6820      	ldr	r0, [r4, #0]
 8005b9a:	1821      	adds	r1, r4, r0
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1809      	addeq	r1, r1, r0
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	6063      	str	r3, [r4, #4]
 8005baa:	6054      	str	r4, [r2, #4]
 8005bac:	e7cb      	b.n	8005b46 <_free_r+0x22>
 8005bae:	bd38      	pop	{r3, r4, r5, pc}
 8005bb0:	200002d0 	.word	0x200002d0

08005bb4 <sbrk_aligned>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8005bf4 <sbrk_aligned+0x40>)
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6831      	ldr	r1, [r6, #0]
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b911      	cbnz	r1, 8005bc6 <sbrk_aligned+0x12>
 8005bc0:	f000 fbaa 	bl	8006318 <_sbrk_r>
 8005bc4:	6030      	str	r0, [r6, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fba5 	bl	8006318 <_sbrk_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d103      	bne.n	8005bda <sbrk_aligned+0x26>
 8005bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	1cc4      	adds	r4, r0, #3
 8005bdc:	f024 0403 	bic.w	r4, r4, #3
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d0f8      	beq.n	8005bd6 <sbrk_aligned+0x22>
 8005be4:	1a21      	subs	r1, r4, r0
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fb96 	bl	8006318 <_sbrk_r>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d1f2      	bne.n	8005bd6 <sbrk_aligned+0x22>
 8005bf0:	e7ef      	b.n	8005bd2 <sbrk_aligned+0x1e>
 8005bf2:	bf00      	nop
 8005bf4:	200002cc 	.word	0x200002cc

08005bf8 <_malloc_r>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	1ccd      	adds	r5, r1, #3
 8005bfe:	f025 0503 	bic.w	r5, r5, #3
 8005c02:	3508      	adds	r5, #8
 8005c04:	2d0c      	cmp	r5, #12
 8005c06:	bf38      	it	cc
 8005c08:	250c      	movcc	r5, #12
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	db01      	blt.n	8005c14 <_malloc_r+0x1c>
 8005c10:	42a9      	cmp	r1, r5
 8005c12:	d904      	bls.n	8005c1e <_malloc_r+0x26>
 8005c14:	230c      	movs	r3, #12
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cf4 <_malloc_r+0xfc>
 8005c22:	f000 f869 	bl	8005cf8 <__malloc_lock>
 8005c26:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2a:	461c      	mov	r4, r3
 8005c2c:	bb44      	cbnz	r4, 8005c80 <_malloc_r+0x88>
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4630      	mov	r0, r6
 8005c32:	f7ff ffbf 	bl	8005bb4 <sbrk_aligned>
 8005c36:	1c43      	adds	r3, r0, #1
 8005c38:	4604      	mov	r4, r0
 8005c3a:	d158      	bne.n	8005cee <_malloc_r+0xf6>
 8005c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8005c40:	4627      	mov	r7, r4
 8005c42:	2f00      	cmp	r7, #0
 8005c44:	d143      	bne.n	8005cce <_malloc_r+0xd6>
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	d04b      	beq.n	8005ce2 <_malloc_r+0xea>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	eb04 0903 	add.w	r9, r4, r3
 8005c54:	f000 fb60 	bl	8006318 <_sbrk_r>
 8005c58:	4581      	cmp	r9, r0
 8005c5a:	d142      	bne.n	8005ce2 <_malloc_r+0xea>
 8005c5c:	6821      	ldr	r1, [r4, #0]
 8005c5e:	4630      	mov	r0, r6
 8005c60:	1a6d      	subs	r5, r5, r1
 8005c62:	4629      	mov	r1, r5
 8005c64:	f7ff ffa6 	bl	8005bb4 <sbrk_aligned>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d03a      	beq.n	8005ce2 <_malloc_r+0xea>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	442b      	add	r3, r5
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	f8d8 3000 	ldr.w	r3, [r8]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	bb62      	cbnz	r2, 8005cd4 <_malloc_r+0xdc>
 8005c7a:	f8c8 7000 	str.w	r7, [r8]
 8005c7e:	e00f      	b.n	8005ca0 <_malloc_r+0xa8>
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	1b52      	subs	r2, r2, r5
 8005c84:	d420      	bmi.n	8005cc8 <_malloc_r+0xd0>
 8005c86:	2a0b      	cmp	r2, #11
 8005c88:	d917      	bls.n	8005cba <_malloc_r+0xc2>
 8005c8a:	1961      	adds	r1, r4, r5
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	6025      	str	r5, [r4, #0]
 8005c90:	bf18      	it	ne
 8005c92:	6059      	strne	r1, [r3, #4]
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	bf08      	it	eq
 8005c98:	f8c8 1000 	streq.w	r1, [r8]
 8005c9c:	5162      	str	r2, [r4, r5]
 8005c9e:	604b      	str	r3, [r1, #4]
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f000 f82f 	bl	8005d04 <__malloc_unlock>
 8005ca6:	f104 000b 	add.w	r0, r4, #11
 8005caa:	1d23      	adds	r3, r4, #4
 8005cac:	f020 0007 	bic.w	r0, r0, #7
 8005cb0:	1ac2      	subs	r2, r0, r3
 8005cb2:	bf1c      	itt	ne
 8005cb4:	1a1b      	subne	r3, r3, r0
 8005cb6:	50a3      	strne	r3, [r4, r2]
 8005cb8:	e7af      	b.n	8005c1a <_malloc_r+0x22>
 8005cba:	6862      	ldr	r2, [r4, #4]
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	bf0c      	ite	eq
 8005cc0:	f8c8 2000 	streq.w	r2, [r8]
 8005cc4:	605a      	strne	r2, [r3, #4]
 8005cc6:	e7eb      	b.n	8005ca0 <_malloc_r+0xa8>
 8005cc8:	4623      	mov	r3, r4
 8005cca:	6864      	ldr	r4, [r4, #4]
 8005ccc:	e7ae      	b.n	8005c2c <_malloc_r+0x34>
 8005cce:	463c      	mov	r4, r7
 8005cd0:	687f      	ldr	r7, [r7, #4]
 8005cd2:	e7b6      	b.n	8005c42 <_malloc_r+0x4a>
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d1fb      	bne.n	8005cd4 <_malloc_r+0xdc>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	6053      	str	r3, [r2, #4]
 8005ce0:	e7de      	b.n	8005ca0 <_malloc_r+0xa8>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	6033      	str	r3, [r6, #0]
 8005ce8:	f000 f80c 	bl	8005d04 <__malloc_unlock>
 8005cec:	e794      	b.n	8005c18 <_malloc_r+0x20>
 8005cee:	6005      	str	r5, [r0, #0]
 8005cf0:	e7d6      	b.n	8005ca0 <_malloc_r+0xa8>
 8005cf2:	bf00      	nop
 8005cf4:	200002d0 	.word	0x200002d0

08005cf8 <__malloc_lock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	@ (8005d00 <__malloc_lock+0x8>)
 8005cfa:	f7ff bf03 	b.w	8005b04 <__retarget_lock_acquire_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200002c8 	.word	0x200002c8

08005d04 <__malloc_unlock>:
 8005d04:	4801      	ldr	r0, [pc, #4]	@ (8005d0c <__malloc_unlock+0x8>)
 8005d06:	f7ff befe 	b.w	8005b06 <__retarget_lock_release_recursive>
 8005d0a:	bf00      	nop
 8005d0c:	200002c8 	.word	0x200002c8

08005d10 <__ssputs_r>:
 8005d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d14:	461f      	mov	r7, r3
 8005d16:	688e      	ldr	r6, [r1, #8]
 8005d18:	4682      	mov	sl, r0
 8005d1a:	42be      	cmp	r6, r7
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	4690      	mov	r8, r2
 8005d20:	680b      	ldr	r3, [r1, #0]
 8005d22:	d82d      	bhi.n	8005d80 <__ssputs_r+0x70>
 8005d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d2c:	d026      	beq.n	8005d7c <__ssputs_r+0x6c>
 8005d2e:	6965      	ldr	r5, [r4, #20]
 8005d30:	6909      	ldr	r1, [r1, #16]
 8005d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d36:	eba3 0901 	sub.w	r9, r3, r1
 8005d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d3e:	1c7b      	adds	r3, r7, #1
 8005d40:	444b      	add	r3, r9
 8005d42:	106d      	asrs	r5, r5, #1
 8005d44:	429d      	cmp	r5, r3
 8005d46:	bf38      	it	cc
 8005d48:	461d      	movcc	r5, r3
 8005d4a:	0553      	lsls	r3, r2, #21
 8005d4c:	d527      	bpl.n	8005d9e <__ssputs_r+0x8e>
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7ff ff52 	bl	8005bf8 <_malloc_r>
 8005d54:	4606      	mov	r6, r0
 8005d56:	b360      	cbz	r0, 8005db2 <__ssputs_r+0xa2>
 8005d58:	464a      	mov	r2, r9
 8005d5a:	6921      	ldr	r1, [r4, #16]
 8005d5c:	f7ff fed4 	bl	8005b08 <memcpy>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	6126      	str	r6, [r4, #16]
 8005d6e:	444e      	add	r6, r9
 8005d70:	6026      	str	r6, [r4, #0]
 8005d72:	463e      	mov	r6, r7
 8005d74:	6165      	str	r5, [r4, #20]
 8005d76:	eba5 0509 	sub.w	r5, r5, r9
 8005d7a:	60a5      	str	r5, [r4, #8]
 8005d7c:	42be      	cmp	r6, r7
 8005d7e:	d900      	bls.n	8005d82 <__ssputs_r+0x72>
 8005d80:	463e      	mov	r6, r7
 8005d82:	4632      	mov	r2, r6
 8005d84:	4641      	mov	r1, r8
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	f000 faac 	bl	80062e4 <memmove>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	68a3      	ldr	r3, [r4, #8]
 8005d90:	1b9b      	subs	r3, r3, r6
 8005d92:	60a3      	str	r3, [r4, #8]
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	4433      	add	r3, r6
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9e:	462a      	mov	r2, r5
 8005da0:	f000 fad8 	bl	8006354 <_realloc_r>
 8005da4:	4606      	mov	r6, r0
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d1e0      	bne.n	8005d6c <__ssputs_r+0x5c>
 8005daa:	4650      	mov	r0, sl
 8005dac:	6921      	ldr	r1, [r4, #16]
 8005dae:	f7ff feb9 	bl	8005b24 <_free_r>
 8005db2:	230c      	movs	r3, #12
 8005db4:	f8ca 3000 	str.w	r3, [sl]
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	e7e9      	b.n	8005d9a <__ssputs_r+0x8a>
	...

08005dc8 <_svfiprintf_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	4698      	mov	r8, r3
 8005dce:	898b      	ldrh	r3, [r1, #12]
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	061b      	lsls	r3, r3, #24
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	4614      	mov	r4, r2
 8005dd8:	b09d      	sub	sp, #116	@ 0x74
 8005dda:	d510      	bpl.n	8005dfe <_svfiprintf_r+0x36>
 8005ddc:	690b      	ldr	r3, [r1, #16]
 8005dde:	b973      	cbnz	r3, 8005dfe <_svfiprintf_r+0x36>
 8005de0:	2140      	movs	r1, #64	@ 0x40
 8005de2:	f7ff ff09 	bl	8005bf8 <_malloc_r>
 8005de6:	6028      	str	r0, [r5, #0]
 8005de8:	6128      	str	r0, [r5, #16]
 8005dea:	b930      	cbnz	r0, 8005dfa <_svfiprintf_r+0x32>
 8005dec:	230c      	movs	r3, #12
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	b01d      	add	sp, #116	@ 0x74
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	2340      	movs	r3, #64	@ 0x40
 8005dfc:	616b      	str	r3, [r5, #20]
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e02:	2320      	movs	r3, #32
 8005e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e08:	2330      	movs	r3, #48	@ 0x30
 8005e0a:	f04f 0901 	mov.w	r9, #1
 8005e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005fac <_svfiprintf_r+0x1e4>
 8005e16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	469a      	mov	sl, r3
 8005e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e22:	b10a      	cbz	r2, 8005e28 <_svfiprintf_r+0x60>
 8005e24:	2a25      	cmp	r2, #37	@ 0x25
 8005e26:	d1f9      	bne.n	8005e1c <_svfiprintf_r+0x54>
 8005e28:	ebba 0b04 	subs.w	fp, sl, r4
 8005e2c:	d00b      	beq.n	8005e46 <_svfiprintf_r+0x7e>
 8005e2e:	465b      	mov	r3, fp
 8005e30:	4622      	mov	r2, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	4638      	mov	r0, r7
 8005e36:	f7ff ff6b 	bl	8005d10 <__ssputs_r>
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f000 80a7 	beq.w	8005f8e <_svfiprintf_r+0x1c6>
 8005e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e42:	445a      	add	r2, fp
 8005e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e46:	f89a 3000 	ldrb.w	r3, [sl]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 809f 	beq.w	8005f8e <_svfiprintf_r+0x1c6>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e5a:	f10a 0a01 	add.w	sl, sl, #1
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	9307      	str	r3, [sp, #28]
 8005e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e68:	4654      	mov	r4, sl
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e70:	484e      	ldr	r0, [pc, #312]	@ (8005fac <_svfiprintf_r+0x1e4>)
 8005e72:	f000 fa61 	bl	8006338 <memchr>
 8005e76:	9a04      	ldr	r2, [sp, #16]
 8005e78:	b9d8      	cbnz	r0, 8005eb2 <_svfiprintf_r+0xea>
 8005e7a:	06d0      	lsls	r0, r2, #27
 8005e7c:	bf44      	itt	mi
 8005e7e:	2320      	movmi	r3, #32
 8005e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e84:	0711      	lsls	r1, r2, #28
 8005e86:	bf44      	itt	mi
 8005e88:	232b      	movmi	r3, #43	@ 0x2b
 8005e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e94:	d015      	beq.n	8005ec2 <_svfiprintf_r+0xfa>
 8005e96:	4654      	mov	r4, sl
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f04f 0c0a 	mov.w	ip, #10
 8005e9e:	9a07      	ldr	r2, [sp, #28]
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea6:	3b30      	subs	r3, #48	@ 0x30
 8005ea8:	2b09      	cmp	r3, #9
 8005eaa:	d94b      	bls.n	8005f44 <_svfiprintf_r+0x17c>
 8005eac:	b1b0      	cbz	r0, 8005edc <_svfiprintf_r+0x114>
 8005eae:	9207      	str	r2, [sp, #28]
 8005eb0:	e014      	b.n	8005edc <_svfiprintf_r+0x114>
 8005eb2:	eba0 0308 	sub.w	r3, r0, r8
 8005eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	46a2      	mov	sl, r4
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	e7d2      	b.n	8005e68 <_svfiprintf_r+0xa0>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	1d19      	adds	r1, r3, #4
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	9103      	str	r1, [sp, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bfbb      	ittet	lt
 8005ece:	425b      	neglt	r3, r3
 8005ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ed4:	9307      	strge	r3, [sp, #28]
 8005ed6:	9307      	strlt	r3, [sp, #28]
 8005ed8:	bfb8      	it	lt
 8005eda:	9204      	strlt	r2, [sp, #16]
 8005edc:	7823      	ldrb	r3, [r4, #0]
 8005ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee0:	d10a      	bne.n	8005ef8 <_svfiprintf_r+0x130>
 8005ee2:	7863      	ldrb	r3, [r4, #1]
 8005ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee6:	d132      	bne.n	8005f4e <_svfiprintf_r+0x186>
 8005ee8:	9b03      	ldr	r3, [sp, #12]
 8005eea:	3402      	adds	r4, #2
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	9203      	str	r2, [sp, #12]
 8005ef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ef6:	9305      	str	r3, [sp, #20]
 8005ef8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005fb0 <_svfiprintf_r+0x1e8>
 8005efc:	2203      	movs	r2, #3
 8005efe:	4650      	mov	r0, sl
 8005f00:	7821      	ldrb	r1, [r4, #0]
 8005f02:	f000 fa19 	bl	8006338 <memchr>
 8005f06:	b138      	cbz	r0, 8005f18 <_svfiprintf_r+0x150>
 8005f08:	2240      	movs	r2, #64	@ 0x40
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	eba0 000a 	sub.w	r0, r0, sl
 8005f10:	4082      	lsls	r2, r0
 8005f12:	4313      	orrs	r3, r2
 8005f14:	3401      	adds	r4, #1
 8005f16:	9304      	str	r3, [sp, #16]
 8005f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	4825      	ldr	r0, [pc, #148]	@ (8005fb4 <_svfiprintf_r+0x1ec>)
 8005f20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f24:	f000 fa08 	bl	8006338 <memchr>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d036      	beq.n	8005f9a <_svfiprintf_r+0x1d2>
 8005f2c:	4b22      	ldr	r3, [pc, #136]	@ (8005fb8 <_svfiprintf_r+0x1f0>)
 8005f2e:	bb1b      	cbnz	r3, 8005f78 <_svfiprintf_r+0x1b0>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	3307      	adds	r3, #7
 8005f34:	f023 0307 	bic.w	r3, r3, #7
 8005f38:	3308      	adds	r3, #8
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f3e:	4433      	add	r3, r6
 8005f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f42:	e76a      	b.n	8005e1a <_svfiprintf_r+0x52>
 8005f44:	460c      	mov	r4, r1
 8005f46:	2001      	movs	r0, #1
 8005f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f4c:	e7a8      	b.n	8005ea0 <_svfiprintf_r+0xd8>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4619      	mov	r1, r3
 8005f56:	3401      	adds	r4, #1
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f60:	3a30      	subs	r2, #48	@ 0x30
 8005f62:	2a09      	cmp	r2, #9
 8005f64:	d903      	bls.n	8005f6e <_svfiprintf_r+0x1a6>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0c6      	beq.n	8005ef8 <_svfiprintf_r+0x130>
 8005f6a:	9105      	str	r1, [sp, #20]
 8005f6c:	e7c4      	b.n	8005ef8 <_svfiprintf_r+0x130>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	2301      	movs	r3, #1
 8005f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f76:	e7f0      	b.n	8005f5a <_svfiprintf_r+0x192>
 8005f78:	ab03      	add	r3, sp, #12
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	4638      	mov	r0, r7
 8005f80:	4b0e      	ldr	r3, [pc, #56]	@ (8005fbc <_svfiprintf_r+0x1f4>)
 8005f82:	a904      	add	r1, sp, #16
 8005f84:	f3af 8000 	nop.w
 8005f88:	1c42      	adds	r2, r0, #1
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	d1d6      	bne.n	8005f3c <_svfiprintf_r+0x174>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	065b      	lsls	r3, r3, #25
 8005f92:	f53f af2d 	bmi.w	8005df0 <_svfiprintf_r+0x28>
 8005f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f98:	e72c      	b.n	8005df4 <_svfiprintf_r+0x2c>
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <_svfiprintf_r+0x1f4>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	f000 f87d 	bl	80060a4 <_printf_i>
 8005faa:	e7ed      	b.n	8005f88 <_svfiprintf_r+0x1c0>
 8005fac:	08006532 	.word	0x08006532
 8005fb0:	08006538 	.word	0x08006538
 8005fb4:	0800653c 	.word	0x0800653c
 8005fb8:	00000000 	.word	0x00000000
 8005fbc:	08005d11 	.word	0x08005d11

08005fc0 <_printf_common>:
 8005fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	4698      	mov	r8, r3
 8005fc8:	688a      	ldr	r2, [r1, #8]
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	4607      	mov	r7, r0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	bfb8      	it	lt
 8005fd2:	4613      	movlt	r3, r2
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fda:	460c      	mov	r4, r1
 8005fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe0:	b10a      	cbz	r2, 8005fe6 <_printf_common+0x26>
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	6033      	str	r3, [r6, #0]
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	0699      	lsls	r1, r3, #26
 8005fea:	bf42      	ittt	mi
 8005fec:	6833      	ldrmi	r3, [r6, #0]
 8005fee:	3302      	addmi	r3, #2
 8005ff0:	6033      	strmi	r3, [r6, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	f015 0506 	ands.w	r5, r5, #6
 8005ff8:	d106      	bne.n	8006008 <_printf_common+0x48>
 8005ffa:	f104 0a19 	add.w	sl, r4, #25
 8005ffe:	68e3      	ldr	r3, [r4, #12]
 8006000:	6832      	ldr	r2, [r6, #0]
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	42ab      	cmp	r3, r5
 8006006:	dc2b      	bgt.n	8006060 <_printf_common+0xa0>
 8006008:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	3b00      	subs	r3, #0
 8006010:	bf18      	it	ne
 8006012:	2301      	movne	r3, #1
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d430      	bmi.n	800607a <_printf_common+0xba>
 8006018:	4641      	mov	r1, r8
 800601a:	4638      	mov	r0, r7
 800601c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006020:	47c8      	blx	r9
 8006022:	3001      	adds	r0, #1
 8006024:	d023      	beq.n	800606e <_printf_common+0xae>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	6922      	ldr	r2, [r4, #16]
 800602a:	f003 0306 	and.w	r3, r3, #6
 800602e:	2b04      	cmp	r3, #4
 8006030:	bf14      	ite	ne
 8006032:	2500      	movne	r5, #0
 8006034:	6833      	ldreq	r3, [r6, #0]
 8006036:	f04f 0600 	mov.w	r6, #0
 800603a:	bf08      	it	eq
 800603c:	68e5      	ldreq	r5, [r4, #12]
 800603e:	f104 041a 	add.w	r4, r4, #26
 8006042:	bf08      	it	eq
 8006044:	1aed      	subeq	r5, r5, r3
 8006046:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800604a:	bf08      	it	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	4293      	cmp	r3, r2
 8006052:	bfc4      	itt	gt
 8006054:	1a9b      	subgt	r3, r3, r2
 8006056:	18ed      	addgt	r5, r5, r3
 8006058:	42b5      	cmp	r5, r6
 800605a:	d11a      	bne.n	8006092 <_printf_common+0xd2>
 800605c:	2000      	movs	r0, #0
 800605e:	e008      	b.n	8006072 <_printf_common+0xb2>
 8006060:	2301      	movs	r3, #1
 8006062:	4652      	mov	r2, sl
 8006064:	4641      	mov	r1, r8
 8006066:	4638      	mov	r0, r7
 8006068:	47c8      	blx	r9
 800606a:	3001      	adds	r0, #1
 800606c:	d103      	bne.n	8006076 <_printf_common+0xb6>
 800606e:	f04f 30ff 	mov.w	r0, #4294967295
 8006072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006076:	3501      	adds	r5, #1
 8006078:	e7c1      	b.n	8005ffe <_printf_common+0x3e>
 800607a:	2030      	movs	r0, #48	@ 0x30
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006088:	4422      	add	r2, r4
 800608a:	3302      	adds	r3, #2
 800608c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006090:	e7c2      	b.n	8006018 <_printf_common+0x58>
 8006092:	2301      	movs	r3, #1
 8006094:	4622      	mov	r2, r4
 8006096:	4641      	mov	r1, r8
 8006098:	4638      	mov	r0, r7
 800609a:	47c8      	blx	r9
 800609c:	3001      	adds	r0, #1
 800609e:	d0e6      	beq.n	800606e <_printf_common+0xae>
 80060a0:	3601      	adds	r6, #1
 80060a2:	e7d9      	b.n	8006058 <_printf_common+0x98>

080060a4 <_printf_i>:
 80060a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	7e0f      	ldrb	r7, [r1, #24]
 80060aa:	4691      	mov	r9, r2
 80060ac:	2f78      	cmp	r7, #120	@ 0x78
 80060ae:	4680      	mov	r8, r0
 80060b0:	460c      	mov	r4, r1
 80060b2:	469a      	mov	sl, r3
 80060b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ba:	d807      	bhi.n	80060cc <_printf_i+0x28>
 80060bc:	2f62      	cmp	r7, #98	@ 0x62
 80060be:	d80a      	bhi.n	80060d6 <_printf_i+0x32>
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	f000 80d3 	beq.w	800626c <_printf_i+0x1c8>
 80060c6:	2f58      	cmp	r7, #88	@ 0x58
 80060c8:	f000 80ba 	beq.w	8006240 <_printf_i+0x19c>
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060d4:	e03a      	b.n	800614c <_printf_i+0xa8>
 80060d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060da:	2b15      	cmp	r3, #21
 80060dc:	d8f6      	bhi.n	80060cc <_printf_i+0x28>
 80060de:	a101      	add	r1, pc, #4	@ (adr r1, 80060e4 <_printf_i+0x40>)
 80060e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e4:	0800613d 	.word	0x0800613d
 80060e8:	08006151 	.word	0x08006151
 80060ec:	080060cd 	.word	0x080060cd
 80060f0:	080060cd 	.word	0x080060cd
 80060f4:	080060cd 	.word	0x080060cd
 80060f8:	080060cd 	.word	0x080060cd
 80060fc:	08006151 	.word	0x08006151
 8006100:	080060cd 	.word	0x080060cd
 8006104:	080060cd 	.word	0x080060cd
 8006108:	080060cd 	.word	0x080060cd
 800610c:	080060cd 	.word	0x080060cd
 8006110:	08006253 	.word	0x08006253
 8006114:	0800617b 	.word	0x0800617b
 8006118:	0800620d 	.word	0x0800620d
 800611c:	080060cd 	.word	0x080060cd
 8006120:	080060cd 	.word	0x080060cd
 8006124:	08006275 	.word	0x08006275
 8006128:	080060cd 	.word	0x080060cd
 800612c:	0800617b 	.word	0x0800617b
 8006130:	080060cd 	.word	0x080060cd
 8006134:	080060cd 	.word	0x080060cd
 8006138:	08006215 	.word	0x08006215
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6032      	str	r2, [r6, #0]
 8006144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800614c:	2301      	movs	r3, #1
 800614e:	e09e      	b.n	800628e <_printf_i+0x1ea>
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	6820      	ldr	r0, [r4, #0]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	6031      	str	r1, [r6, #0]
 8006158:	0606      	lsls	r6, r0, #24
 800615a:	d501      	bpl.n	8006160 <_printf_i+0xbc>
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	e003      	b.n	8006168 <_printf_i+0xc4>
 8006160:	0645      	lsls	r5, r0, #25
 8006162:	d5fb      	bpl.n	800615c <_printf_i+0xb8>
 8006164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006168:	2d00      	cmp	r5, #0
 800616a:	da03      	bge.n	8006174 <_printf_i+0xd0>
 800616c:	232d      	movs	r3, #45	@ 0x2d
 800616e:	426d      	negs	r5, r5
 8006170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006174:	230a      	movs	r3, #10
 8006176:	4859      	ldr	r0, [pc, #356]	@ (80062dc <_printf_i+0x238>)
 8006178:	e011      	b.n	800619e <_printf_i+0xfa>
 800617a:	6821      	ldr	r1, [r4, #0]
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	0608      	lsls	r0, r1, #24
 8006180:	f853 5b04 	ldr.w	r5, [r3], #4
 8006184:	d402      	bmi.n	800618c <_printf_i+0xe8>
 8006186:	0649      	lsls	r1, r1, #25
 8006188:	bf48      	it	mi
 800618a:	b2ad      	uxthmi	r5, r5
 800618c:	2f6f      	cmp	r7, #111	@ 0x6f
 800618e:	6033      	str	r3, [r6, #0]
 8006190:	bf14      	ite	ne
 8006192:	230a      	movne	r3, #10
 8006194:	2308      	moveq	r3, #8
 8006196:	4851      	ldr	r0, [pc, #324]	@ (80062dc <_printf_i+0x238>)
 8006198:	2100      	movs	r1, #0
 800619a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800619e:	6866      	ldr	r6, [r4, #4]
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	bfa8      	it	ge
 80061a4:	6821      	ldrge	r1, [r4, #0]
 80061a6:	60a6      	str	r6, [r4, #8]
 80061a8:	bfa4      	itt	ge
 80061aa:	f021 0104 	bicge.w	r1, r1, #4
 80061ae:	6021      	strge	r1, [r4, #0]
 80061b0:	b90d      	cbnz	r5, 80061b6 <_printf_i+0x112>
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	d04b      	beq.n	800624e <_printf_i+0x1aa>
 80061b6:	4616      	mov	r6, r2
 80061b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80061bc:	fb03 5711 	mls	r7, r3, r1, r5
 80061c0:	5dc7      	ldrb	r7, [r0, r7]
 80061c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061c6:	462f      	mov	r7, r5
 80061c8:	42bb      	cmp	r3, r7
 80061ca:	460d      	mov	r5, r1
 80061cc:	d9f4      	bls.n	80061b8 <_printf_i+0x114>
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d10b      	bne.n	80061ea <_printf_i+0x146>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	07df      	lsls	r7, r3, #31
 80061d6:	d508      	bpl.n	80061ea <_printf_i+0x146>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	6861      	ldr	r1, [r4, #4]
 80061dc:	4299      	cmp	r1, r3
 80061de:	bfde      	ittt	le
 80061e0:	2330      	movle	r3, #48	@ 0x30
 80061e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ea:	1b92      	subs	r2, r2, r6
 80061ec:	6122      	str	r2, [r4, #16]
 80061ee:	464b      	mov	r3, r9
 80061f0:	4621      	mov	r1, r4
 80061f2:	4640      	mov	r0, r8
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	aa03      	add	r2, sp, #12
 80061fa:	f7ff fee1 	bl	8005fc0 <_printf_common>
 80061fe:	3001      	adds	r0, #1
 8006200:	d14a      	bne.n	8006298 <_printf_i+0x1f4>
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	b004      	add	sp, #16
 8006208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	f043 0320 	orr.w	r3, r3, #32
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	2778      	movs	r7, #120	@ 0x78
 8006216:	4832      	ldr	r0, [pc, #200]	@ (80062e0 <_printf_i+0x23c>)
 8006218:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	6831      	ldr	r1, [r6, #0]
 8006220:	061f      	lsls	r7, r3, #24
 8006222:	f851 5b04 	ldr.w	r5, [r1], #4
 8006226:	d402      	bmi.n	800622e <_printf_i+0x18a>
 8006228:	065f      	lsls	r7, r3, #25
 800622a:	bf48      	it	mi
 800622c:	b2ad      	uxthmi	r5, r5
 800622e:	6031      	str	r1, [r6, #0]
 8006230:	07d9      	lsls	r1, r3, #31
 8006232:	bf44      	itt	mi
 8006234:	f043 0320 	orrmi.w	r3, r3, #32
 8006238:	6023      	strmi	r3, [r4, #0]
 800623a:	b11d      	cbz	r5, 8006244 <_printf_i+0x1a0>
 800623c:	2310      	movs	r3, #16
 800623e:	e7ab      	b.n	8006198 <_printf_i+0xf4>
 8006240:	4826      	ldr	r0, [pc, #152]	@ (80062dc <_printf_i+0x238>)
 8006242:	e7e9      	b.n	8006218 <_printf_i+0x174>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f023 0320 	bic.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	e7f6      	b.n	800623c <_printf_i+0x198>
 800624e:	4616      	mov	r6, r2
 8006250:	e7bd      	b.n	80061ce <_printf_i+0x12a>
 8006252:	6833      	ldr	r3, [r6, #0]
 8006254:	6825      	ldr	r5, [r4, #0]
 8006256:	1d18      	adds	r0, r3, #4
 8006258:	6961      	ldr	r1, [r4, #20]
 800625a:	6030      	str	r0, [r6, #0]
 800625c:	062e      	lsls	r6, r5, #24
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	d501      	bpl.n	8006266 <_printf_i+0x1c2>
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	e002      	b.n	800626c <_printf_i+0x1c8>
 8006266:	0668      	lsls	r0, r5, #25
 8006268:	d5fb      	bpl.n	8006262 <_printf_i+0x1be>
 800626a:	8019      	strh	r1, [r3, #0]
 800626c:	2300      	movs	r3, #0
 800626e:	4616      	mov	r6, r2
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	e7bc      	b.n	80061ee <_printf_i+0x14a>
 8006274:	6833      	ldr	r3, [r6, #0]
 8006276:	2100      	movs	r1, #0
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	6032      	str	r2, [r6, #0]
 800627c:	681e      	ldr	r6, [r3, #0]
 800627e:	6862      	ldr	r2, [r4, #4]
 8006280:	4630      	mov	r0, r6
 8006282:	f000 f859 	bl	8006338 <memchr>
 8006286:	b108      	cbz	r0, 800628c <_printf_i+0x1e8>
 8006288:	1b80      	subs	r0, r0, r6
 800628a:	6060      	str	r0, [r4, #4]
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	2300      	movs	r3, #0
 8006292:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006296:	e7aa      	b.n	80061ee <_printf_i+0x14a>
 8006298:	4632      	mov	r2, r6
 800629a:	4649      	mov	r1, r9
 800629c:	4640      	mov	r0, r8
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	47d0      	blx	sl
 80062a2:	3001      	adds	r0, #1
 80062a4:	d0ad      	beq.n	8006202 <_printf_i+0x15e>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	079b      	lsls	r3, r3, #30
 80062aa:	d413      	bmi.n	80062d4 <_printf_i+0x230>
 80062ac:	68e0      	ldr	r0, [r4, #12]
 80062ae:	9b03      	ldr	r3, [sp, #12]
 80062b0:	4298      	cmp	r0, r3
 80062b2:	bfb8      	it	lt
 80062b4:	4618      	movlt	r0, r3
 80062b6:	e7a6      	b.n	8006206 <_printf_i+0x162>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4632      	mov	r2, r6
 80062bc:	4649      	mov	r1, r9
 80062be:	4640      	mov	r0, r8
 80062c0:	47d0      	blx	sl
 80062c2:	3001      	adds	r0, #1
 80062c4:	d09d      	beq.n	8006202 <_printf_i+0x15e>
 80062c6:	3501      	adds	r5, #1
 80062c8:	68e3      	ldr	r3, [r4, #12]
 80062ca:	9903      	ldr	r1, [sp, #12]
 80062cc:	1a5b      	subs	r3, r3, r1
 80062ce:	42ab      	cmp	r3, r5
 80062d0:	dcf2      	bgt.n	80062b8 <_printf_i+0x214>
 80062d2:	e7eb      	b.n	80062ac <_printf_i+0x208>
 80062d4:	2500      	movs	r5, #0
 80062d6:	f104 0619 	add.w	r6, r4, #25
 80062da:	e7f5      	b.n	80062c8 <_printf_i+0x224>
 80062dc:	08006543 	.word	0x08006543
 80062e0:	08006554 	.word	0x08006554

080062e4 <memmove>:
 80062e4:	4288      	cmp	r0, r1
 80062e6:	b510      	push	{r4, lr}
 80062e8:	eb01 0402 	add.w	r4, r1, r2
 80062ec:	d902      	bls.n	80062f4 <memmove+0x10>
 80062ee:	4284      	cmp	r4, r0
 80062f0:	4623      	mov	r3, r4
 80062f2:	d807      	bhi.n	8006304 <memmove+0x20>
 80062f4:	1e43      	subs	r3, r0, #1
 80062f6:	42a1      	cmp	r1, r4
 80062f8:	d008      	beq.n	800630c <memmove+0x28>
 80062fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006302:	e7f8      	b.n	80062f6 <memmove+0x12>
 8006304:	4601      	mov	r1, r0
 8006306:	4402      	add	r2, r0
 8006308:	428a      	cmp	r2, r1
 800630a:	d100      	bne.n	800630e <memmove+0x2a>
 800630c:	bd10      	pop	{r4, pc}
 800630e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006316:	e7f7      	b.n	8006308 <memmove+0x24>

08006318 <_sbrk_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	2300      	movs	r3, #0
 800631c:	4d05      	ldr	r5, [pc, #20]	@ (8006334 <_sbrk_r+0x1c>)
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	f7fa fe64 	bl	8000ff0 <_sbrk>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_sbrk_r+0x1a>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_sbrk_r+0x1a>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200002c4 	.word	0x200002c4

08006338 <memchr>:
 8006338:	4603      	mov	r3, r0
 800633a:	b510      	push	{r4, lr}
 800633c:	b2c9      	uxtb	r1, r1
 800633e:	4402      	add	r2, r0
 8006340:	4293      	cmp	r3, r2
 8006342:	4618      	mov	r0, r3
 8006344:	d101      	bne.n	800634a <memchr+0x12>
 8006346:	2000      	movs	r0, #0
 8006348:	e003      	b.n	8006352 <memchr+0x1a>
 800634a:	7804      	ldrb	r4, [r0, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	428c      	cmp	r4, r1
 8006350:	d1f6      	bne.n	8006340 <memchr+0x8>
 8006352:	bd10      	pop	{r4, pc}

08006354 <_realloc_r>:
 8006354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006358:	4680      	mov	r8, r0
 800635a:	4615      	mov	r5, r2
 800635c:	460c      	mov	r4, r1
 800635e:	b921      	cbnz	r1, 800636a <_realloc_r+0x16>
 8006360:	4611      	mov	r1, r2
 8006362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006366:	f7ff bc47 	b.w	8005bf8 <_malloc_r>
 800636a:	b92a      	cbnz	r2, 8006378 <_realloc_r+0x24>
 800636c:	f7ff fbda 	bl	8005b24 <_free_r>
 8006370:	2400      	movs	r4, #0
 8006372:	4620      	mov	r0, r4
 8006374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006378:	f000 f81a 	bl	80063b0 <_malloc_usable_size_r>
 800637c:	4285      	cmp	r5, r0
 800637e:	4606      	mov	r6, r0
 8006380:	d802      	bhi.n	8006388 <_realloc_r+0x34>
 8006382:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006386:	d8f4      	bhi.n	8006372 <_realloc_r+0x1e>
 8006388:	4629      	mov	r1, r5
 800638a:	4640      	mov	r0, r8
 800638c:	f7ff fc34 	bl	8005bf8 <_malloc_r>
 8006390:	4607      	mov	r7, r0
 8006392:	2800      	cmp	r0, #0
 8006394:	d0ec      	beq.n	8006370 <_realloc_r+0x1c>
 8006396:	42b5      	cmp	r5, r6
 8006398:	462a      	mov	r2, r5
 800639a:	4621      	mov	r1, r4
 800639c:	bf28      	it	cs
 800639e:	4632      	movcs	r2, r6
 80063a0:	f7ff fbb2 	bl	8005b08 <memcpy>
 80063a4:	4621      	mov	r1, r4
 80063a6:	4640      	mov	r0, r8
 80063a8:	f7ff fbbc 	bl	8005b24 <_free_r>
 80063ac:	463c      	mov	r4, r7
 80063ae:	e7e0      	b.n	8006372 <_realloc_r+0x1e>

080063b0 <_malloc_usable_size_r>:
 80063b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b4:	1f18      	subs	r0, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbc      	itt	lt
 80063ba:	580b      	ldrlt	r3, [r1, r0]
 80063bc:	18c0      	addlt	r0, r0, r3
 80063be:	4770      	bx	lr

080063c0 <_init>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr

080063cc <_fini>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	bf00      	nop
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr
