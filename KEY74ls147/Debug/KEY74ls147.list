
KEY74ls147.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001608  08001608  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001608  08001608  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001608  08001608  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001608  08001608  00002608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800160c  0800160c  0000260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001610  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  0800161c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800161c  00003030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029e7  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e7d  00000000  00000000  00005a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  000068a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c7  00000000  00000000  00006c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634d  00000000  00000000  00006f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d68  00000000  00000000  0001d294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f343  00000000  00000000  00021ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a133f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d7c  00000000  00000000  000a1384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a2100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080015cc 	.word	0x080015cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080015cc 	.word	0x080015cc

0800014c <read_BCD_value.0>:

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  uint8_t read_BCD_value(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	f8c7 c004 	str.w	ip, [r7, #4]
      // Đọc từng chân GPIO và gán giá trị tương ứng
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET) bcd_value |= (1 << 0); // Bit 0/D
 8000156:	2102      	movs	r1, #2
 8000158:	481e      	ldr	r0, [pc, #120]	@ (80001d4 <read_BCD_value.0+0x88>)
 800015a:	f000 fdfd 	bl	8000d58 <HAL_GPIO_ReadPin>
 800015e:	4603      	mov	r3, r0
 8000160:	2b01      	cmp	r3, #1
 8000162:	d106      	bne.n	8000172 <read_BCD_value.0+0x26>
 8000164:	4b1c      	ldr	r3, [pc, #112]	@ (80001d8 <read_BCD_value.0+0x8c>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	b2da      	uxtb	r2, r3
 800016e:	4b1a      	ldr	r3, [pc, #104]	@ (80001d8 <read_BCD_value.0+0x8c>)
 8000170:	701a      	strb	r2, [r3, #0]
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET) bcd_value |= (1 << 1); // Bit 1/C
 8000172:	2104      	movs	r1, #4
 8000174:	4817      	ldr	r0, [pc, #92]	@ (80001d4 <read_BCD_value.0+0x88>)
 8000176:	f000 fdef 	bl	8000d58 <HAL_GPIO_ReadPin>
 800017a:	4603      	mov	r3, r0
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <read_BCD_value.0+0x42>
 8000180:	4b15      	ldr	r3, [pc, #84]	@ (80001d8 <read_BCD_value.0+0x8c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0302 	orr.w	r3, r3, #2
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b13      	ldr	r3, [pc, #76]	@ (80001d8 <read_BCD_value.0+0x8c>)
 800018c:	701a      	strb	r2, [r3, #0]
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET) bcd_value |= (1 << 2); // Bit 2/B
 800018e:	2108      	movs	r1, #8
 8000190:	4810      	ldr	r0, [pc, #64]	@ (80001d4 <read_BCD_value.0+0x88>)
 8000192:	f000 fde1 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	2b01      	cmp	r3, #1
 800019a:	d106      	bne.n	80001aa <read_BCD_value.0+0x5e>
 800019c:	4b0e      	ldr	r3, [pc, #56]	@ (80001d8 <read_BCD_value.0+0x8c>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	f043 0304 	orr.w	r3, r3, #4
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	4b0c      	ldr	r3, [pc, #48]	@ (80001d8 <read_BCD_value.0+0x8c>)
 80001a8:	701a      	strb	r2, [r3, #0]
      if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) bcd_value |= (1 << 3); // Bit 3/A
 80001aa:	2110      	movs	r1, #16
 80001ac:	4809      	ldr	r0, [pc, #36]	@ (80001d4 <read_BCD_value.0+0x88>)
 80001ae:	f000 fdd3 	bl	8000d58 <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d106      	bne.n	80001c6 <read_BCD_value.0+0x7a>
 80001b8:	4b07      	ldr	r3, [pc, #28]	@ (80001d8 <read_BCD_value.0+0x8c>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4b05      	ldr	r3, [pc, #20]	@ (80001d8 <read_BCD_value.0+0x8c>)
 80001c4:	701a      	strb	r2, [r3, #0]

      return bcd_value;
 80001c6:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <read_BCD_value.0+0x8c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
  }
 80001ca:	4618      	mov	r0, r3
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800
 80001d8:	2000002a 	.word	0x2000002a

080001dc <main>:
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
int main(void)
 80001e2:	f107 0310 	add.w	r3, r7, #16
 80001e6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80001e8:	f000 faec 	bl	80007c4 <HAL_Init>
  SystemClock_Config();
 80001ec:	f000 f9ba 	bl	8000564 <SystemClock_Config>
  MX_GPIO_Init();
 80001f0:	f000 f9fe 	bl	80005f0 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   // Đọc giá trị BCD
	         bcd_value = read_BCD_value();
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	469c      	mov	ip, r3
 80001f8:	f7ff ffa8 	bl	800014c <read_BCD_value.0>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4bb7      	ldr	r3, [pc, #732]	@ (80004e0 <main+0x304>)
 8000202:	701a      	strb	r2, [r3, #0]
	         decimal_value = BCD_to_decimal(bcd_value);
 8000204:	4bb6      	ldr	r3, [pc, #728]	@ (80004e0 <main+0x304>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	1d3a      	adds	r2, r7, #4
 800020a:	4694      	mov	ip, r2
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f971 	bl	80004f4 <BCD_to_decimal.1>
 8000212:	4603      	mov	r3, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4bb3      	ldr	r3, [pc, #716]	@ (80004e4 <main+0x308>)
 8000218:	701a      	strb	r2, [r3, #0]
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,       GPIO_PIN_SET);}
 800021a:	2102      	movs	r1, #2
 800021c:	48b2      	ldr	r0, [pc, #712]	@ (80004e8 <main+0x30c>)
 800021e:	f000 fd9b 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b01      	cmp	r3, #1
 8000226:	d11a      	bne.n	800025e <main+0x82>
 8000228:	2104      	movs	r1, #4
 800022a:	48af      	ldr	r0, [pc, #700]	@ (80004e8 <main+0x30c>)
 800022c:	f000 fd94 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	2b01      	cmp	r3, #1
 8000234:	d113      	bne.n	800025e <main+0x82>
 8000236:	2108      	movs	r1, #8
 8000238:	48ab      	ldr	r0, [pc, #684]	@ (80004e8 <main+0x30c>)
 800023a:	f000 fd8d 	bl	8000d58 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b01      	cmp	r3, #1
 8000242:	d10c      	bne.n	800025e <main+0x82>
 8000244:	2110      	movs	r1, #16
 8000246:	48a8      	ldr	r0, [pc, #672]	@ (80004e8 <main+0x30c>)
 8000248:	f000 fd86 	bl	8000d58 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b01      	cmp	r3, #1
 8000250:	d105      	bne.n	800025e <main+0x82>
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000258:	48a4      	ldr	r0, [pc, #656]	@ (80004ec <main+0x310>)
 800025a:	f000 fd94 	bl	8000d86 <HAL_GPIO_WritePin>
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,   GPIO_PIN_RESET); keyPressed = 49;}
 800025e:	2102      	movs	r1, #2
 8000260:	48a1      	ldr	r0, [pc, #644]	@ (80004e8 <main+0x30c>)
 8000262:	f000 fd79 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d11d      	bne.n	80002a8 <main+0xcc>
 800026c:	2104      	movs	r1, #4
 800026e:	489e      	ldr	r0, [pc, #632]	@ (80004e8 <main+0x30c>)
 8000270:	f000 fd72 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d116      	bne.n	80002a8 <main+0xcc>
 800027a:	2108      	movs	r1, #8
 800027c:	489a      	ldr	r0, [pc, #616]	@ (80004e8 <main+0x30c>)
 800027e:	f000 fd6b 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b01      	cmp	r3, #1
 8000286:	d10f      	bne.n	80002a8 <main+0xcc>
 8000288:	2110      	movs	r1, #16
 800028a:	4897      	ldr	r0, [pc, #604]	@ (80004e8 <main+0x30c>)
 800028c:	f000 fd64 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d108      	bne.n	80002a8 <main+0xcc>
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800029c:	4893      	ldr	r0, [pc, #588]	@ (80004ec <main+0x310>)
 800029e:	f000 fd72 	bl	8000d86 <HAL_GPIO_WritePin>
 80002a2:	4b93      	ldr	r3, [pc, #588]	@ (80004f0 <main+0x314>)
 80002a4:	2231      	movs	r2, #49	@ 0x31
 80002a6:	701a      	strb	r2, [r3, #0]
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,     GPIO_PIN_RESET); keyPressed = 50;}
 80002a8:	2102      	movs	r1, #2
 80002aa:	488f      	ldr	r0, [pc, #572]	@ (80004e8 <main+0x30c>)
 80002ac:	f000 fd54 	bl	8000d58 <HAL_GPIO_ReadPin>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d11d      	bne.n	80002f2 <main+0x116>
 80002b6:	2104      	movs	r1, #4
 80002b8:	488b      	ldr	r0, [pc, #556]	@ (80004e8 <main+0x30c>)
 80002ba:	f000 fd4d 	bl	8000d58 <HAL_GPIO_ReadPin>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d116      	bne.n	80002f2 <main+0x116>
 80002c4:	2108      	movs	r1, #8
 80002c6:	4888      	ldr	r0, [pc, #544]	@ (80004e8 <main+0x30c>)
 80002c8:	f000 fd46 	bl	8000d58 <HAL_GPIO_ReadPin>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d10f      	bne.n	80002f2 <main+0x116>
 80002d2:	2110      	movs	r1, #16
 80002d4:	4884      	ldr	r0, [pc, #528]	@ (80004e8 <main+0x30c>)
 80002d6:	f000 fd3f 	bl	8000d58 <HAL_GPIO_ReadPin>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d108      	bne.n	80002f2 <main+0x116>
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002e6:	4881      	ldr	r0, [pc, #516]	@ (80004ec <main+0x310>)
 80002e8:	f000 fd4d 	bl	8000d86 <HAL_GPIO_WritePin>
 80002ec:	4b80      	ldr	r3, [pc, #512]	@ (80004f0 <main+0x314>)
 80002ee:	2232      	movs	r2, #50	@ 0x32
 80002f0:	701a      	strb	r2, [r3, #0]
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); keyPressed = 51;}//
 80002f2:	2102      	movs	r1, #2
 80002f4:	487c      	ldr	r0, [pc, #496]	@ (80004e8 <main+0x30c>)
 80002f6:	f000 fd2f 	bl	8000d58 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d11d      	bne.n	800033c <main+0x160>
 8000300:	2104      	movs	r1, #4
 8000302:	4879      	ldr	r0, [pc, #484]	@ (80004e8 <main+0x30c>)
 8000304:	f000 fd28 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d116      	bne.n	800033c <main+0x160>
 800030e:	2108      	movs	r1, #8
 8000310:	4875      	ldr	r0, [pc, #468]	@ (80004e8 <main+0x30c>)
 8000312:	f000 fd21 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d10f      	bne.n	800033c <main+0x160>
 800031c:	2110      	movs	r1, #16
 800031e:	4872      	ldr	r0, [pc, #456]	@ (80004e8 <main+0x30c>)
 8000320:	f000 fd1a 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d108      	bne.n	800033c <main+0x160>
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000330:	486e      	ldr	r0, [pc, #440]	@ (80004ec <main+0x310>)
 8000332:	f000 fd28 	bl	8000d86 <HAL_GPIO_WritePin>
 8000336:	4b6e      	ldr	r3, [pc, #440]	@ (80004f0 <main+0x314>)
 8000338:	2233      	movs	r2, #51	@ 0x33
 800033a:	701a      	strb	r2, [r3, #0]
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);}
 800033c:	2102      	movs	r1, #2
 800033e:	486a      	ldr	r0, [pc, #424]	@ (80004e8 <main+0x30c>)
 8000340:	f000 fd0a 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b01      	cmp	r3, #1
 8000348:	d11a      	bne.n	8000380 <main+0x1a4>
 800034a:	2104      	movs	r1, #4
 800034c:	4866      	ldr	r0, [pc, #408]	@ (80004e8 <main+0x30c>)
 800034e:	f000 fd03 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d113      	bne.n	8000380 <main+0x1a4>
 8000358:	2108      	movs	r1, #8
 800035a:	4863      	ldr	r0, [pc, #396]	@ (80004e8 <main+0x30c>)
 800035c:	f000 fcfc 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d10c      	bne.n	8000380 <main+0x1a4>
 8000366:	2110      	movs	r1, #16
 8000368:	485f      	ldr	r0, [pc, #380]	@ (80004e8 <main+0x30c>)
 800036a:	f000 fcf5 	bl	8000d58 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	2b01      	cmp	r3, #1
 8000372:	d105      	bne.n	8000380 <main+0x1a4>
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800037a:	485c      	ldr	r0, [pc, #368]	@ (80004ec <main+0x310>)
 800037c:	f000 fd03 	bl	8000d86 <HAL_GPIO_WritePin>
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);}//
 8000380:	2102      	movs	r1, #2
 8000382:	4859      	ldr	r0, [pc, #356]	@ (80004e8 <main+0x30c>)
 8000384:	f000 fce8 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d11a      	bne.n	80003c4 <main+0x1e8>
 800038e:	2104      	movs	r1, #4
 8000390:	4855      	ldr	r0, [pc, #340]	@ (80004e8 <main+0x30c>)
 8000392:	f000 fce1 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d113      	bne.n	80003c4 <main+0x1e8>
 800039c:	2108      	movs	r1, #8
 800039e:	4852      	ldr	r0, [pc, #328]	@ (80004e8 <main+0x30c>)
 80003a0:	f000 fcda 	bl	8000d58 <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d10c      	bne.n	80003c4 <main+0x1e8>
 80003aa:	2110      	movs	r1, #16
 80003ac:	484e      	ldr	r0, [pc, #312]	@ (80004e8 <main+0x30c>)
 80003ae:	f000 fcd3 	bl	8000d58 <HAL_GPIO_ReadPin>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d105      	bne.n	80003c4 <main+0x1e8>
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003be:	484b      	ldr	r0, [pc, #300]	@ (80004ec <main+0x310>)
 80003c0:	f000 fce1 	bl	8000d86 <HAL_GPIO_WritePin>
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,   GPIO_PIN_SET);}
 80003c4:	2102      	movs	r1, #2
 80003c6:	4848      	ldr	r0, [pc, #288]	@ (80004e8 <main+0x30c>)
 80003c8:	f000 fcc6 	bl	8000d58 <HAL_GPIO_ReadPin>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d11a      	bne.n	8000408 <main+0x22c>
 80003d2:	2104      	movs	r1, #4
 80003d4:	4844      	ldr	r0, [pc, #272]	@ (80004e8 <main+0x30c>)
 80003d6:	f000 fcbf 	bl	8000d58 <HAL_GPIO_ReadPin>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d113      	bne.n	8000408 <main+0x22c>
 80003e0:	2108      	movs	r1, #8
 80003e2:	4841      	ldr	r0, [pc, #260]	@ (80004e8 <main+0x30c>)
 80003e4:	f000 fcb8 	bl	8000d58 <HAL_GPIO_ReadPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d10c      	bne.n	8000408 <main+0x22c>
 80003ee:	2110      	movs	r1, #16
 80003f0:	483d      	ldr	r0, [pc, #244]	@ (80004e8 <main+0x30c>)
 80003f2:	f000 fcb1 	bl	8000d58 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d105      	bne.n	8000408 <main+0x22c>
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000402:	483a      	ldr	r0, [pc, #232]	@ (80004ec <main+0x310>)
 8000404:	f000 fcbf 	bl	8000d86 <HAL_GPIO_WritePin>
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);}//
 8000408:	2102      	movs	r1, #2
 800040a:	4837      	ldr	r0, [pc, #220]	@ (80004e8 <main+0x30c>)
 800040c:	f000 fca4 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d11a      	bne.n	800044c <main+0x270>
 8000416:	2104      	movs	r1, #4
 8000418:	4833      	ldr	r0, [pc, #204]	@ (80004e8 <main+0x30c>)
 800041a:	f000 fc9d 	bl	8000d58 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	2b01      	cmp	r3, #1
 8000422:	d113      	bne.n	800044c <main+0x270>
 8000424:	2108      	movs	r1, #8
 8000426:	4830      	ldr	r0, [pc, #192]	@ (80004e8 <main+0x30c>)
 8000428:	f000 fc96 	bl	8000d58 <HAL_GPIO_ReadPin>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d10c      	bne.n	800044c <main+0x270>
 8000432:	2110      	movs	r1, #16
 8000434:	482c      	ldr	r0, [pc, #176]	@ (80004e8 <main+0x30c>)
 8000436:	f000 fc8f 	bl	8000d58 <HAL_GPIO_ReadPin>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d105      	bne.n	800044c <main+0x270>
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000446:	4829      	ldr	r0, [pc, #164]	@ (80004ec <main+0x310>)
 8000448:	f000 fc9d 	bl	8000d86 <HAL_GPIO_WritePin>
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,   GPIO_PIN_SET);}
 800044c:	2102      	movs	r1, #2
 800044e:	4826      	ldr	r0, [pc, #152]	@ (80004e8 <main+0x30c>)
 8000450:	f000 fc82 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000454:	4603      	mov	r3, r0
 8000456:	2b01      	cmp	r3, #1
 8000458:	d11a      	bne.n	8000490 <main+0x2b4>
 800045a:	2104      	movs	r1, #4
 800045c:	4822      	ldr	r0, [pc, #136]	@ (80004e8 <main+0x30c>)
 800045e:	f000 fc7b 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d113      	bne.n	8000490 <main+0x2b4>
 8000468:	2108      	movs	r1, #8
 800046a:	481f      	ldr	r0, [pc, #124]	@ (80004e8 <main+0x30c>)
 800046c:	f000 fc74 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d10c      	bne.n	8000490 <main+0x2b4>
 8000476:	2110      	movs	r1, #16
 8000478:	481b      	ldr	r0, [pc, #108]	@ (80004e8 <main+0x30c>)
 800047a:	f000 fc6d 	bl	8000d58 <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d105      	bne.n	8000490 <main+0x2b4>
 8000484:	2201      	movs	r2, #1
 8000486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800048a:	4818      	ldr	r0, [pc, #96]	@ (80004ec <main+0x310>)
 800048c:	f000 fc7b 	bl	8000d86 <HAL_GPIO_WritePin>
	         if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_RESET){HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,   GPIO_PIN_SET);}
 8000490:	2102      	movs	r1, #2
 8000492:	4815      	ldr	r0, [pc, #84]	@ (80004e8 <main+0x30c>)
 8000494:	f000 fc60 	bl	8000d58 <HAL_GPIO_ReadPin>
 8000498:	4603      	mov	r3, r0
 800049a:	2b01      	cmp	r3, #1
 800049c:	f47f aeaa 	bne.w	80001f4 <main+0x18>
 80004a0:	2104      	movs	r1, #4
 80004a2:	4811      	ldr	r0, [pc, #68]	@ (80004e8 <main+0x30c>)
 80004a4:	f000 fc58 	bl	8000d58 <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	f47f aea2 	bne.w	80001f4 <main+0x18>
 80004b0:	2108      	movs	r1, #8
 80004b2:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <main+0x30c>)
 80004b4:	f000 fc50 	bl	8000d58 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	f47f ae9a 	bne.w	80001f4 <main+0x18>
 80004c0:	2110      	movs	r1, #16
 80004c2:	4809      	ldr	r0, [pc, #36]	@ (80004e8 <main+0x30c>)
 80004c4:	f000 fc48 	bl	8000d58 <HAL_GPIO_ReadPin>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f47f ae92 	bne.w	80001f4 <main+0x18>
 80004d0:	2201      	movs	r2, #1
 80004d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <main+0x310>)
 80004d8:	f000 fc55 	bl	8000d86 <HAL_GPIO_WritePin>
	         bcd_value = read_BCD_value();
 80004dc:	e68a      	b.n	80001f4 <main+0x18>
 80004de:	bf00      	nop
 80004e0:	2000002a 	.word	0x2000002a
 80004e4:	20000028 	.word	0x20000028
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40011000 	.word	0x40011000
 80004f0:	20000029 	.word	0x20000029

080004f4 <BCD_to_decimal.1>:
  uint8_t BCD_to_decimal(uint8_t bcd_value) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	f8c7 c000 	str.w	ip, [r7]
      switch (bcd_value) {
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b08      	cmp	r3, #8
 8000506:	d827      	bhi.n	8000558 <BCD_to_decimal.1+0x64>
 8000508:	a201      	add	r2, pc, #4	@ (adr r2, 8000510 <BCD_to_decimal.1+0x1c>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000535 	.word	0x08000535
 8000514:	08000539 	.word	0x08000539
 8000518:	0800053d 	.word	0x0800053d
 800051c:	08000541 	.word	0x08000541
 8000520:	08000545 	.word	0x08000545
 8000524:	08000549 	.word	0x08000549
 8000528:	0800054d 	.word	0x0800054d
 800052c:	08000551 	.word	0x08000551
 8000530:	08000555 	.word	0x08000555
          case 0x00: return 9;
 8000534:	2309      	movs	r3, #9
 8000536:	e010      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x01: return 8;
 8000538:	2308      	movs	r3, #8
 800053a:	e00e      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x02: return 7;
 800053c:	2307      	movs	r3, #7
 800053e:	e00c      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x03: return 6;
 8000540:	2306      	movs	r3, #6
 8000542:	e00a      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x04: return 5;
 8000544:	2305      	movs	r3, #5
 8000546:	e008      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x05: return 4;
 8000548:	2304      	movs	r3, #4
 800054a:	e006      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x06: return 3;
 800054c:	2303      	movs	r3, #3
 800054e:	e004      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x07: return 2;
 8000550:	2302      	movs	r3, #2
 8000552:	e002      	b.n	800055a <BCD_to_decimal.1+0x66>
          case 0x08: return 1;
 8000554:	2301      	movs	r3, #1
 8000556:	e000      	b.n	800055a <BCD_to_decimal.1+0x66>
          default:   return 0; // Không có phím nào được nhấn
 8000558:	2300      	movs	r3, #0
  }
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b090      	sub	sp, #64	@ 0x40
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2228      	movs	r2, #40	@ 0x28
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fffe 	bl	8001574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fc03 	bl	8000db8 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005b8:	f000 f874 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2102      	movs	r1, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fe70 	bl	80012bc <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005e2:	f000 f85f 	bl	80006a4 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3740      	adds	r7, #64	@ 0x40
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a23      	ldr	r2, [pc, #140]	@ (8000698 <MX_GPIO_Init+0xa8>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xa8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_GPIO_Init+0xa8>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <MX_GPIO_Init+0xa8>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_GPIO_Init+0xa8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_GPIO_Init+0xa8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a17      	ldr	r2, [pc, #92]	@ (8000698 <MX_GPIO_Init+0xa8>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_GPIO_Init+0xa8>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000652:	4812      	ldr	r0, [pc, #72]	@ (800069c <MX_GPIO_Init+0xac>)
 8000654:	f000 fb97 	bl	8000d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	480a      	ldr	r0, [pc, #40]	@ (800069c <MX_GPIO_Init+0xac>)
 8000672:	f000 f9ed 	bl	8000a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000676:	231e      	movs	r3, #30
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0xb0>)
 800068a:	f000 f9e1 	bl	8000a50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	40011000 	.word	0x40011000
 80006a0:	40010800 	.word	0x40010800

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a14      	ldr	r2, [pc, #80]	@ (800070c <HAL_MspInit+0x5c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_MspInit+0x5c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <HAL_MspInit+0x5c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_MspInit+0x5c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_MspInit+0x60>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <HAL_MspInit+0x60>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000
 8000710:	40010000 	.word	0x40010000

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <NMI_Handler+0x4>

0800071c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <MemManage_Handler+0x4>

0800072c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <UsageFault_Handler+0x4>

0800073c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f874 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000778:	f7ff fff8 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800077c:	480b      	ldr	r0, [pc, #44]	@ (80007ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800077e:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a09      	ldr	r2, [pc, #36]	@ (80007b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000794:	4c09      	ldr	r4, [pc, #36]	@ (80007bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007a2:	f000 feef 	bl	8001584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a6:	f7ff fd19 	bl	80001dc <main>
  bx lr
 80007aa:	4770      	bx	lr
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b4:	08001610 	.word	0x08001610
  ldr r2, =_sbss
 80007b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007bc:	20000030 	.word	0x20000030

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_Init+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <HAL_Init+0x28>)
 80007ce:	f043 0310 	orr.w	r3, r3, #16
 80007d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f907 	bl	80009e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	200f      	movs	r0, #15
 80007dc:	f000 f808 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff ff66 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40022000 	.word	0x40022000

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_InitTick+0x54>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_InitTick+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f911 	bl	8000a36 <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f8e7 	bl	80009fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <HAL_InitTick+0x5c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000008 	.word	0x20000008
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_IncTick+0x1c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <HAL_IncTick+0x20>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a03      	ldr	r2, [pc, #12]	@ (8000870 <HAL_IncTick+0x20>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000008 	.word	0x20000008
 8000870:	2000002c 	.word	0x2000002c

08000874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTick;
 8000878:	4b02      	ldr	r3, [pc, #8]	@ (8000884 <HAL_GetTick+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	2000002c 	.word	0x2000002c

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	@ (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	@ (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	@ 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	@ 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009b4:	d301      	bcc.n	80009ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00f      	b.n	80009da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <SysTick_Config+0x40>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c2:	210f      	movs	r1, #15
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f7ff ff90 	bl	80008ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <SysTick_Config+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <SysTick_Config+0x40>)
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	e000e010 	.word	0xe000e010

080009e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff49 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a10:	f7ff ff5e 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	68b9      	ldr	r1, [r7, #8]
 8000a1a:	6978      	ldr	r0, [r7, #20]
 8000a1c:	f7ff ff90 	bl	8000940 <NVIC_EncodePriority>
 8000a20:	4602      	mov	r2, r0
 8000a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff5f 	bl	80008ec <__NVIC_SetPriority>
}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffb0 	bl	80009a4 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b08b      	sub	sp, #44	@ 0x2c
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	e169      	b.n	8000d38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a64:	2201      	movs	r2, #1
 8000a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69fa      	ldr	r2, [r7, #28]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	f040 8158 	bne.w	8000d32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a9a      	ldr	r2, [pc, #616]	@ (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d05e      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a8c:	4a98      	ldr	r2, [pc, #608]	@ (8000cf0 <HAL_GPIO_Init+0x2a0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d875      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a92:	4a98      	ldr	r2, [pc, #608]	@ (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d058      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000a98:	4a96      	ldr	r2, [pc, #600]	@ (8000cf4 <HAL_GPIO_Init+0x2a4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d86f      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000a9e:	4a96      	ldr	r2, [pc, #600]	@ (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d052      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000aa4:	4a94      	ldr	r2, [pc, #592]	@ (8000cf8 <HAL_GPIO_Init+0x2a8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d869      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aaa:	4a94      	ldr	r2, [pc, #592]	@ (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d04c      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000ab0:	4a92      	ldr	r2, [pc, #584]	@ (8000cfc <HAL_GPIO_Init+0x2ac>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d863      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ab6:	4a92      	ldr	r2, [pc, #584]	@ (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d046      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
 8000abc:	4a90      	ldr	r2, [pc, #576]	@ (8000d00 <HAL_GPIO_Init+0x2b0>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d85d      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	d82a      	bhi.n	8000b1c <HAL_GPIO_Init+0xcc>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d859      	bhi.n	8000b7e <HAL_GPIO_Init+0x12e>
 8000aca:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad0 <HAL_GPIO_Init+0x80>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000b4b 	.word	0x08000b4b
 8000ad4:	08000b25 	.word	0x08000b25
 8000ad8:	08000b37 	.word	0x08000b37
 8000adc:	08000b79 	.word	0x08000b79
 8000ae0:	08000b7f 	.word	0x08000b7f
 8000ae4:	08000b7f 	.word	0x08000b7f
 8000ae8:	08000b7f 	.word	0x08000b7f
 8000aec:	08000b7f 	.word	0x08000b7f
 8000af0:	08000b7f 	.word	0x08000b7f
 8000af4:	08000b7f 	.word	0x08000b7f
 8000af8:	08000b7f 	.word	0x08000b7f
 8000afc:	08000b7f 	.word	0x08000b7f
 8000b00:	08000b7f 	.word	0x08000b7f
 8000b04:	08000b7f 	.word	0x08000b7f
 8000b08:	08000b7f 	.word	0x08000b7f
 8000b0c:	08000b7f 	.word	0x08000b7f
 8000b10:	08000b7f 	.word	0x08000b7f
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b41 	.word	0x08000b41
 8000b1c:	4a79      	ldr	r2, [pc, #484]	@ (8000d04 <HAL_GPIO_Init+0x2b4>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d013      	beq.n	8000b4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b22:	e02c      	b.n	8000b7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	623b      	str	r3, [r7, #32]
          break;
 8000b2a:	e029      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	3304      	adds	r3, #4
 8000b32:	623b      	str	r3, [r7, #32]
          break;
 8000b34:	e024      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e01f      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e01a      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b52:	2304      	movs	r3, #4
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e013      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	611a      	str	r2, [r3, #16]
          break;
 8000b6a:	e009      	b.n	8000b80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	615a      	str	r2, [r3, #20]
          break;
 8000b76:	e003      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
          break;
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x130>
          break;
 8000b7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2bff      	cmp	r3, #255	@ 0xff
 8000b84:	d801      	bhi.n	8000b8a <HAL_GPIO_Init+0x13a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	e001      	b.n	8000b8e <HAL_GPIO_Init+0x13e>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	2bff      	cmp	r3, #255	@ 0xff
 8000b94:	d802      	bhi.n	8000b9c <HAL_GPIO_Init+0x14c>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x152>
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	3b08      	subs	r3, #8
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	210f      	movs	r1, #15
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	6a39      	ldr	r1, [r7, #32]
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f000 80b1 	beq.w	8000d32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a4c      	ldr	r2, [pc, #304]	@ (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	4b4a      	ldr	r3, [pc, #296]	@ (8000d08 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be8:	4a48      	ldr	r2, [pc, #288]	@ (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3302      	adds	r3, #2
 8000bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a40      	ldr	r2, [pc, #256]	@ (8000d10 <HAL_GPIO_Init+0x2c0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d013      	beq.n	8000c3c <HAL_GPIO_Init+0x1ec>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d00d      	beq.n	8000c38 <HAL_GPIO_Init+0x1e8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a3d      	ldr	r2, [pc, #244]	@ (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d101      	bne.n	8000c30 <HAL_GPIO_Init+0x1e0>
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e006      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c30:	2304      	movs	r3, #4
 8000c32:	e004      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e002      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <HAL_GPIO_Init+0x1ee>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c40:	f002 0203 	and.w	r2, r2, #3
 8000c44:	0092      	lsls	r2, r2, #2
 8000c46:	4093      	lsls	r3, r2
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c4e:	492f      	ldr	r1, [pc, #188]	@ (8000d0c <HAL_GPIO_Init+0x2bc>)
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3302      	adds	r3, #2
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d006      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	492c      	ldr	r1, [pc, #176]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	608b      	str	r3, [r1, #8]
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4928      	ldr	r1, [pc, #160]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	4922      	ldr	r1, [pc, #136]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60cb      	str	r3, [r1, #12]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	491e      	ldr	r1, [pc, #120]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4918      	ldr	r1, [pc, #96]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4914      	ldr	r1, [pc, #80]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d021      	beq.n	8000d24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	490e      	ldr	r1, [pc, #56]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
 8000cec:	e021      	b.n	8000d32 <HAL_GPIO_Init+0x2e2>
 8000cee:	bf00      	nop
 8000cf0:	10320000 	.word	0x10320000
 8000cf4:	10310000 	.word	0x10310000
 8000cf8:	10220000 	.word	0x10220000
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	10120000 	.word	0x10120000
 8000d04:	10110000 	.word	0x10110000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	40011000 	.word	0x40011000
 8000d1c:	40011400 	.word	0x40011400
 8000d20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_GPIO_Init+0x304>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <HAL_GPIO_Init+0x304>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	3301      	adds	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f47f ae8e 	bne.w	8000a64 <HAL_GPIO_Init+0x14>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	372c      	adds	r7, #44	@ 0x2c
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	887b      	ldrh	r3, [r7, #2]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	807b      	strh	r3, [r7, #2]
 8000d92:	4613      	mov	r3, r2
 8000d94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d96:	787b      	ldrb	r3, [r7, #1]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d9c:	887a      	ldrh	r2, [r7, #2]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000da2:	e003      	b.n	8000dac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	041a      	lsls	r2, r3, #16
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
	...

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e272      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8087 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dd8:	4b92      	ldr	r3, [pc, #584]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d00c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	4b8f      	ldr	r3, [pc, #572]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d112      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
 8000df0:	4b8c      	ldr	r3, [pc, #560]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfc:	d10b      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfe:	4b89      	ldr	r3, [pc, #548]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d06c      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d168      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e24c      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x76>
 8000e20:	4b80      	ldr	r3, [pc, #512]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a7f      	ldr	r2, [pc, #508]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e02e      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10c      	bne.n	8000e50 <HAL_RCC_OscConfig+0x98>
 8000e36:	4b7b      	ldr	r3, [pc, #492]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	4b78      	ldr	r3, [pc, #480]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a77      	ldr	r2, [pc, #476]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e01d      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0xbc>
 8000e5a:	4b72      	ldr	r3, [pc, #456]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a71      	ldr	r2, [pc, #452]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b6f      	ldr	r3, [pc, #444]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e00b      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e74:	4b6b      	ldr	r3, [pc, #428]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4b68      	ldr	r3, [pc, #416]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a67      	ldr	r2, [pc, #412]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d013      	beq.n	8000ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fcee 	bl	8000874 <HAL_GetTick>
 8000e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9a:	e008      	b.n	8000eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e9c:	f7ff fcea 	bl	8000874 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	@ 0x64
 8000ea8:	d901      	bls.n	8000eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e200      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eae:	4b5d      	ldr	r3, [pc, #372]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f0      	beq.n	8000e9c <HAL_RCC_OscConfig+0xe4>
 8000eba:	e014      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fcda 	bl	8000874 <HAL_GetTick>
 8000ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec2:	e008      	b.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec4:	f7ff fcd6 	bl	8000874 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	2b64      	cmp	r3, #100	@ 0x64
 8000ed0:	d901      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e1ec      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	4b53      	ldr	r3, [pc, #332]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d1f0      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x10c>
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d063      	beq.n	8000fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00b      	beq.n	8000f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000efe:	4b49      	ldr	r3, [pc, #292]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d11c      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
 8000f0a:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f16:	4b43      	ldr	r3, [pc, #268]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d001      	beq.n	8000f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e1c0      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4939      	ldr	r1, [pc, #228]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f42:	e03a      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f4c:	4b36      	ldr	r3, [pc, #216]	@ (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fc8f 	bl	8000874 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5a:	f7ff fc8b 	bl	8000874 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e1a1      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	4927      	ldr	r1, [pc, #156]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e015      	b.n	8000fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f8e:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <HAL_RCC_OscConfig+0x270>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fc6e 	bl	8000874 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc6a 	bl	8000874 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e180      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d03a      	beq.n	800103c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d019      	beq.n	8001002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fce:	4b17      	ldr	r3, [pc, #92]	@ (800102c <HAL_RCC_OscConfig+0x274>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd4:	f7ff fc4e 	bl	8000874 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fc4a 	bl	8000874 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e160      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f000 fa9c 	bl	8001538 <RCC_Delay>
 8001000:	e01c      	b.n	800103c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_RCC_OscConfig+0x274>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001008:	f7ff fc34 	bl	8000874 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800100e:	e00f      	b.n	8001030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001010:	f7ff fc30 	bl	8000874 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d908      	bls.n	8001030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e146      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	42420000 	.word	0x42420000
 800102c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001030:	4b92      	ldr	r3, [pc, #584]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e9      	bne.n	8001010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a6 	beq.w	8001196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104e:	4b8b      	ldr	r3, [pc, #556]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b88      	ldr	r3, [pc, #544]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a87      	ldr	r2, [pc, #540]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b85      	ldr	r3, [pc, #532]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001072:	2301      	movs	r3, #1
 8001074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001076:	4b82      	ldr	r3, [pc, #520]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800107e:	2b00      	cmp	r3, #0
 8001080:	d118      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001082:	4b7f      	ldr	r3, [pc, #508]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a7e      	ldr	r2, [pc, #504]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800108e:	f7ff fbf1 	bl	8000874 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001096:	f7ff fbed 	bl	8000874 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b64      	cmp	r3, #100	@ 0x64
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e103      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a8:	4b75      	ldr	r3, [pc, #468]	@ (8001280 <HAL_RCC_OscConfig+0x4c8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x312>
 80010bc:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	4a6e      	ldr	r2, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6213      	str	r3, [r2, #32]
 80010c8:	e02d      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10c      	bne.n	80010ec <HAL_RCC_OscConfig+0x334>
 80010d2:	4b6a      	ldr	r3, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a69      	ldr	r2, [pc, #420]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b67      	ldr	r3, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a66      	ldr	r2, [pc, #408]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
 80010ea:	e01c      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x356>
 80010f4:	4b61      	ldr	r3, [pc, #388]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a60      	ldr	r2, [pc, #384]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	4b5e      	ldr	r3, [pc, #376]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4a5d      	ldr	r2, [pc, #372]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6213      	str	r3, [r2, #32]
 800110c:	e00b      	b.n	8001126 <HAL_RCC_OscConfig+0x36e>
 800110e:	4b5b      	ldr	r3, [pc, #364]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a5a      	ldr	r2, [pc, #360]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a57      	ldr	r2, [pc, #348]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001120:	f023 0304 	bic.w	r3, r3, #4
 8001124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d015      	beq.n	800115a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fba1 	bl	8000874 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fb9d 	bl	8000874 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e0b1      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800114c:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ee      	beq.n	8001136 <HAL_RCC_OscConfig+0x37e>
 8001158:	e014      	b.n	8001184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115a:	f7ff fb8b 	bl	8000874 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff fb87 	bl	8000874 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001170:	4293      	cmp	r3, r2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e09b      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001178:	4b40      	ldr	r3, [pc, #256]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1ee      	bne.n	8001162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d105      	bne.n	8001196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a3b      	ldr	r2, [pc, #236]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011a0:	4b36      	ldr	r3, [pc, #216]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d061      	beq.n	8001270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d146      	bne.n	8001242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b4:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb5b 	bl	8000874 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fb57 	bl	8000874 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e06d      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f0      	bne.n	80011c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e8:	d108      	bne.n	80011fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ea:	4b24      	ldr	r3, [pc, #144]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	4921      	ldr	r1, [pc, #132]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a19      	ldr	r1, [r3, #32]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	430b      	orrs	r3, r1
 800120e:	491b      	ldr	r1, [pc, #108]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	4313      	orrs	r3, r2
 8001212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fb2b 	bl	8000874 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001222:	f7ff fb27 	bl	8000874 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e03d      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001234:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x46a>
 8001240:	e035      	b.n	80012ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <HAL_RCC_OscConfig+0x4cc>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fb14 	bl	8000874 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fb10 	bl	8000874 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e026      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_RCC_OscConfig+0x4c4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x498>
 800126e:	e01e      	b.n	80012ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e019      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
 800127c:	40021000 	.word	0x40021000
 8001280:	40007000 	.word	0x40007000
 8001284:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_RCC_OscConfig+0x500>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	429a      	cmp	r2, r3
 800129a:	d106      	bne.n	80012aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0d0      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b6a      	ldr	r3, [pc, #424]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d910      	bls.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b67      	ldr	r3, [pc, #412]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 0207 	bic.w	r2, r3, #7
 80012e6:	4965      	ldr	r1, [pc, #404]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b63      	ldr	r3, [pc, #396]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b8      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b59      	ldr	r3, [pc, #356]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a58      	ldr	r2, [pc, #352]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800131e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001322:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800133a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494d      	ldr	r1, [pc, #308]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d040      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d115      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07f      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e073      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e06b      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b39      	ldr	r3, [pc, #228]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4936      	ldr	r1, [pc, #216]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff fa62 	bl	8000874 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff fa5e 	bl	8000874 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e053      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d210      	bcs.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 0207 	bic.w	r2, r3, #7
 80013f2:	4922      	ldr	r1, [pc, #136]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e032      	b.n	8001472 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4916      	ldr	r1, [pc, #88]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001436:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490e      	ldr	r1, [pc, #56]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f821 	bl	8001490 <HAL_RCC_GetSysClockFreq>
 800144e:	4602      	mov	r2, r0
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	490a      	ldr	r1, [pc, #40]	@ (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	fa22 f303 	lsr.w	r3, r2, r3
 8001462:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <HAL_RCC_ClockConfig+0x1cc>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_RCC_ClockConfig+0x1d0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f9c0 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40022000 	.word	0x40022000
 8001480:	40021000 	.word	0x40021000
 8001484:	080015e4 	.word	0x080015e4
 8001488:	20000000 	.word	0x20000000
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_RCC_GetSysClockFreq+0x94>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d002      	beq.n	80014c0 <HAL_RCC_GetSysClockFreq+0x30>
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_GetSysClockFreq+0x36>
 80014be:	e027      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014c2:	613b      	str	r3, [r7, #16]
      break;
 80014c4:	e027      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	0c9b      	lsrs	r3, r3, #18
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_RCC_GetSysClockFreq+0x9c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d010      	beq.n	8001500 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_RCC_GetSysClockFreq+0x94>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	0c5b      	lsrs	r3, r3, #17
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ea:	5cd3      	ldrb	r3, [r2, r3]
 80014ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 80014f2:	fb03 f202 	mul.w	r2, r3, r2
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e004      	b.n	800150a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a0c      	ldr	r2, [pc, #48]	@ (8001534 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	613b      	str	r3, [r7, #16]
      break;
 800150e:	e002      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_RCC_GetSysClockFreq+0x98>)
 8001512:	613b      	str	r3, [r7, #16]
      break;
 8001514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001516:	693b      	ldr	r3, [r7, #16]
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000
 8001528:	007a1200 	.word	0x007a1200
 800152c:	080015f4 	.word	0x080015f4
 8001530:	08001604 	.word	0x08001604
 8001534:	003d0900 	.word	0x003d0900

08001538 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <RCC_Delay+0x34>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <RCC_Delay+0x38>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0a5b      	lsrs	r3, r3, #9
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001554:	bf00      	nop
  }
  while (Delay --);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e5a      	subs	r2, r3, #1
 800155a:	60fa      	str	r2, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <RCC_Delay+0x1c>
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000
 8001570:	10624dd3 	.word	0x10624dd3

08001574 <memset>:
 8001574:	4603      	mov	r3, r0
 8001576:	4402      	add	r2, r0
 8001578:	4293      	cmp	r3, r2
 800157a:	d100      	bne.n	800157e <memset+0xa>
 800157c:	4770      	bx	lr
 800157e:	f803 1b01 	strb.w	r1, [r3], #1
 8001582:	e7f9      	b.n	8001578 <memset+0x4>

08001584 <__libc_init_array>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	2600      	movs	r6, #0
 8001588:	4d0c      	ldr	r5, [pc, #48]	@ (80015bc <__libc_init_array+0x38>)
 800158a:	4c0d      	ldr	r4, [pc, #52]	@ (80015c0 <__libc_init_array+0x3c>)
 800158c:	1b64      	subs	r4, r4, r5
 800158e:	10a4      	asrs	r4, r4, #2
 8001590:	42a6      	cmp	r6, r4
 8001592:	d109      	bne.n	80015a8 <__libc_init_array+0x24>
 8001594:	f000 f81a 	bl	80015cc <_init>
 8001598:	2600      	movs	r6, #0
 800159a:	4d0a      	ldr	r5, [pc, #40]	@ (80015c4 <__libc_init_array+0x40>)
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <__libc_init_array+0x44>)
 800159e:	1b64      	subs	r4, r4, r5
 80015a0:	10a4      	asrs	r4, r4, #2
 80015a2:	42a6      	cmp	r6, r4
 80015a4:	d105      	bne.n	80015b2 <__libc_init_array+0x2e>
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
 80015a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ac:	4798      	blx	r3
 80015ae:	3601      	adds	r6, #1
 80015b0:	e7ee      	b.n	8001590 <__libc_init_array+0xc>
 80015b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b6:	4798      	blx	r3
 80015b8:	3601      	adds	r6, #1
 80015ba:	e7f2      	b.n	80015a2 <__libc_init_array+0x1e>
 80015bc:	08001608 	.word	0x08001608
 80015c0:	08001608 	.word	0x08001608
 80015c4:	08001608 	.word	0x08001608
 80015c8:	0800160c 	.word	0x0800160c

080015cc <_init>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	bf00      	nop
 80015d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	469e      	mov	lr, r3
 80015d6:	4770      	bx	lr

080015d8 <_fini>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr
