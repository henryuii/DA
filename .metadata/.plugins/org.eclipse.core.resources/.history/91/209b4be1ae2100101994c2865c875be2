/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "LCD1602.h"
#include "flash.h"
#include "stdio.h"
#include "string.h"
#include "stdbool.h"
#include "sha256.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define FLASH_USER_START_ADDR 0x0800F800
#define MAX_ATTEMPTS 3
#define LOCK_DURATION_MS 60000
#define ADMIN_CODE "999999"

typedef enum {
    STATE_IDLE,
    STATE_ENTER_PASSWORD,
    STATE_MENU,
    STATE_CHANGE_PASSWORD,
    STATE_CONFIRM_PASSWORD,
    STATE_LOCKED,
    STATE_RESET_PASSWORD
} SystemState;

SystemState currentState = STATE_IDLE;

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
uint8_t current_password_hash[32];
uint8_t input_password[10];
uint8_t new_password[10];
uint8_t confirm_password[10];
uint8_t input_length = 0;
uint8_t failed_attempts = 0;
uint32_t lock_start_time = 0;
uint32_t currentMillis = 0;
int8_t keyPressed = -1;
char lcd_buffer[20];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void Load_Hashed_Password(void);
void Save_Hashed_Password(void);
void Hash_Password(uint8_t *input, uint8_t length, uint8_t *output);
bool Verify_Hash(uint8_t *input, uint8_t length);
void Lock_System(void);
void FSM_Handler(void);
void Reset_Password_To_Default(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
  lcd_init();
  Load_Hashed_Password();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   currentMillis = HAL_GetTick();
	   FSM_Handler();
	   HAL_Delay(50);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA8
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void FSM_Handler(void) {
    switch (currentState) {
        case STATE_IDLE:
            lcd_clear();
            lcd_send_string("Password System");
            lcd_put_cur(1, 0);
            lcd_send_string("Press * to start");
            if (keyPressed == 42) {
                keyPressed = -1;
                input_length = 0;
                memset(input_password, 0, sizeof(input_password));
                lcd_clear();
                lcd_send_string("Enter Password:");
                lcd_put_cur(1, 0);
                currentState = STATE_ENTER_PASSWORD;
            }
            break;

        case STATE_ENTER_PASSWORD:
            if (keyPressed != -1) {
                uint8_t tempKey = keyPressed;
                keyPressed = -1;
                if (tempKey == 35) {
                    if (strncmp((char*)input_password, ADMIN_CODE, strlen(ADMIN_CODE)) == 0) {
                        currentState = STATE_RESET_PASSWORD;
                        break;
                    }
                    if (Verify_Hash(input_password, input_length)) {
                        failed_attempts = 0;
                        lcd_clear();
                        lcd_send_string("Password OK!");
                        HAL_Delay(1000);
                        currentState = STATE_MENU;
                    } else {
                        failed_attempts++;
                        if (failed_attempts >= MAX_ATTEMPTS) {
                            Lock_System();
                            currentState = STATE_LOCKED;
                        } else {
                            lcd_clear();
                            sprintf(lcd_buffer, "Wrong (%d/%d)", failed_attempts, MAX_ATTEMPTS);
                            lcd_send_string(lcd_buffer);
                            HAL_Delay(1000);
                            currentState = STATE_IDLE;
                        }
                    }
                } else if (tempKey == 68 && input_length > 0) {
                    input_length--;
                    input_password[input_length] = 0;
                    lcd_put_cur(1, 0);
                    lcd_send_string("          ");
                    lcd_put_cur(1, 0);
                    for (int i = 0; i < input_length; i++) lcd_send_data('*');
                } else if (input_length < 10 && tempKey != 35 && tempKey != 42) {
                    input_password[input_length++] = tempKey;
                    lcd_send_data('*');
                }
            }
            break;

        case STATE_MENU:
            lcd_clear();
            lcd_send_string("B: Change Pass");
            lcd_put_cur(1, 0);
            lcd_send_string("C: Exit");
            if (keyPressed == 66) {
                keyPressed = -1;
                memset(new_password, 0, sizeof(new_password));
                input_length = 0;
                lcd_clear();
                lcd_send_string("New Password:");
                lcd_put_cur(1, 0);
                currentState = STATE_CHANGE_PASSWORD;
            } else if (keyPressed == 67) {
                keyPressed = -1;
                currentState = STATE_IDLE;
            }
            break;

        case STATE_CHANGE_PASSWORD:
            if (keyPressed != -1) {
                uint8_t tempKey = keyPressed;
                keyPressed = -1;
                if (tempKey == 35) {
                    if (input_length > 0) {
                        lcd_clear();
                        lcd_send_string("Confirm Pass:");
                        lcd_put_cur(1, 0);
                        memset(confirm_password, 0, sizeof(confirm_password));
                        currentState = STATE_CONFIRM_PASSWORD;
                        break;
                    }
                } else if (tempKey == 68 && input_length > 0) {
                    input_length--;
                    new_password[input_length] = 0;
                    lcd_put_cur(1, 0);
                    lcd_send_string("          ");
                    lcd_put_cur(1, 0);
                    for (int i = 0; i < input_length; i++) lcd_send_data('*');
                } else if (input_length < 10 && tempKey != '*' && tempKey != 'A') {
                    new_password[input_length++] = tempKey;
                    lcd_send_data('*');
                }
            }
            break;

        case STATE_CONFIRM_PASSWORD:
            if (keyPressed != -1) {
                uint8_t tempKey = keyPressed;
                keyPressed = -1;
                static uint8_t confirm_length = 0;
                if (tempKey == 35) {
                    if (confirm_length == input_length && memcmp(confirm_password, new_password, input_length) == 0) {
                        Hash_Password(new_password, input_length, current_password_hash);
                        Save_Hashed_Password();
                        lcd_clear();
                        lcd_send_string("Password Changed");
                        HAL_Delay(1000);
                        currentState = STATE_IDLE;
                    } else {
                        lcd_clear();
                        lcd_send_string("Mismatch!");
                        HAL_Delay(1000);
                        currentState = STATE_IDLE;
                    }
                    confirm_length = 0;
                } else if (tempKey == 68 && confirm_length > 0) {
                    confirm_length--;
                    confirm_password[confirm_length] = 0;
                    lcd_put_cur(1, 0);
                    lcd_send_string("          ");
                    lcd_put_cur(1, 0);
                    for (int i = 0; i < confirm_length; i++) lcd_send_data('*');
                } else if (confirm_length < 10) {
                    confirm_password[confirm_length++] = tempKey;
                    lcd_send_data('*');
                }
            }
            break;

        case STATE_LOCKED:
            if (currentMillis - lock_start_time >= LOCK_DURATION_MS) {
                failed_attempts = 0;
                currentState = STATE_IDLE;
            } else {
                uint32_t remain = (LOCK_DURATION_MS - (currentMillis - lock_start_time)) / 1000;
                lcd_put_cur(0, 0);
                lcd_send_string("Locked! Wait:");
                lcd_put_cur(1, 0);
                sprintf(lcd_buffer, "%lus", remain);
                lcd_send_string(lcd_buffer);
            }
            break;

        case STATE_RESET_PASSWORD:
            Reset_Password_To_Default();
            lcd_clear();
            lcd_send_string("Password Reset!");
            HAL_Delay(1000);
            currentState = STATE_IDLE;
            break;
    }
}

void Lock_System(void) {
    lock_start_time = currentMillis;
    lcd_clear();
    lcd_send_string("System Locked!");
    HAL_Delay(1000);
}

void Hash_Password(uint8_t *input, uint8_t length, uint8_t *output) {
    SHA256_CTX ctx;
    sha256_init(&ctx);
    sha256_update(&ctx, input, length);
    sha256_final(&ctx, output);
}

bool Verify_Hash(uint8_t *input, uint8_t length) {
    uint8_t temp_hash[32];
    Hash_Password(input, length, temp_hash);
    return memcmp(temp_hash, current_password_hash, 32) == 0;
}

void Save_Hashed_Password(void) {
    HAL_FLASH_Unlock();
    FLASH_EraseInitTypeDef EraseInitStruct = {
        .TypeErase = FLASH_TYPEERASE_PAGES,
        .PageAddress = FLASH_USER_START_ADDR,
        .NbPages = 1,
        .Banks = FLASH_BANK_1
    };
    uint32_t PageError;
    HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
    for (int i = 0; i < 32; i++) {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_USER_START_ADDR + i * 2, current_password_hash[i]);
    }
    HAL_FLASH_Lock();
}

void Load_Hashed_Password(void) {
    for (int i = 0; i < 32; i++) {
        current_password_hash[i] = *(__IO uint16_t*)(FLASH_USER_START_ADDR + i * 2);
    }
}

void Reset_Password_To_Default(void) {
    uint8_t default_pass[] = "123456";
    Hash_Password(default_pass, strlen((char*)default_pass), current_password_hash);
    Save_Hashed_Password();
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
