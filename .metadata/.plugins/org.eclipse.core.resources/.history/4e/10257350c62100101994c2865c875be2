/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "LCD1602.h"
#include "flash.h"
#include "stdio.h"
#include "string.h"
#include <stdbool.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define FLASH_USER_START_ADDR     0x0800F800
#define MAX_FAILED_ATTEMPTS       5
#define LOCK_DURATION_MS          60000
#define TIMEOUT_DURATION_MS       30000
#define ADMIN_CODE                "000999"

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint32_t lastInteraction = 0;
uint32_t lockTimestamp = 0;

int8_t keyPressed = -1;
uint8_t default_password[6] = "123456";
uint8_t current_password[10];
uint8_t input_password[10];
uint8_t new_password[10];
uint8_t confirm_password[10];

uint8_t input_length = 0;
uint8_t password_length = 6;
uint8_t failed_attempts = 0;
bool password_changed = false;

char lcd_buffer[20];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void Save_Password_To_Flash(void);
void Load_Password_From_Flash(void);
bool Verify_Password(void);
void Change_Password(void);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  Load_Password_From_Flash();
  HAL_TIM_Base_Start(&htim1);
  lcd_init();

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);

    lcd_clear();
    lcd_put_cur(0, 0);
    lcd_send_string("Password System");
    lcd_put_cur(1, 0);
    lcd_send_string("Press * to start");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if (keyPressed == 42) // '*'
        {
            lcd_clear();
            lcd_send_string("Enter Password:");
            lcd_put_cur(1, 0);
            input_length = 0;
            memset(input_password, 0, sizeof(input_password));
            lastInteraction = HAL_GetTick();
            keyPressed = -1; // Reset ngay sau nhấn '*'

            bool exitInput = false; // 🌟 Cờ thoát khỏi nhập password

            while (!exitInput) // Còn đang trong chế độ nhập password
            {
                if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS)
                {
                    lcd_clear();
                    lcd_send_string("Timeout 30s!");
                    HAL_Delay(1000);

                    lcd_clear();
                    lcd_put_cur(0, 0);
                    lcd_send_string("Password System");
                    lcd_put_cur(1, 0);
                    lcd_send_string("Press * to start");

                    exitInput = true; // 🔥 Thoát chế độ nhập
                    break;
                }

                if (keyPressed != -1)
                {
                    lastInteraction = HAL_GetTick();
                    uint8_t tempKey = keyPressed;
                    keyPressed = -1;

                    if (tempKey == 35) // '#'
                    {
                        if (memcmp(input_password, ADMIN_CODE, strlen(ADMIN_CODE)) == 0)
                        {
                            memcpy(current_password, default_password, 6);
                            password_length = 6;
                            Save_Password_To_Flash();
                            lcd_clear();
                            lcd_send_string("Admin Reset OK!");
                            HAL_Delay(1000);
                            exitInput = true;
                            break;
                        }

                        if (Verify_Password())
                        {
                            lcd_clear();
                            lcd_send_string("Password OK!");
                            HAL_Delay(1000);

                            lcd_clear();
                            lcd_send_string("B: Change Pass");
                            lcd_put_cur(1, 0);
                            lcd_send_string("C: Exit");

                            bool inMenu = true;
                            while (inMenu)
                            {
                                if (keyPressed == 66) { Change_Password(); inMenu = false; }
                                else if (keyPressed == 67) { inMenu = false; }
                            }

                            lcd_clear();
                            lcd_put_cur(0, 0);
                            lcd_send_string("Password System");
                            lcd_put_cur(1, 0);
                            lcd_send_string("Press * to start");

                            exitInput = true;
                            break;
                        }
                        else
                        {
                            failed_attempts++;
                            if (failed_attempts >= MAX_FAILED_ATTEMPTS)
                            {
                                lockTimestamp = HAL_GetTick();
                            }

                            lcd_clear();
                            lcd_send_string("Wrong Password!");
                            HAL_Delay(1000);

                            lcd_clear();
                            lcd_put_cur(0, 0);
                            lcd_send_string("Password System");
                            lcd_put_cur(1, 0);
                            lcd_send_string("Press * to start");

                            exitInput = true;
                            break;
                        }
                    }
                    else if (tempKey == 68) // 'D' xóa ký tự
                    {
                        if (input_length > 0)
                        {
                            input_length--;
                            input_password[input_length] = 0;
                            lcd_put_cur(1, 0);
                            lcd_send_string("                ");
                            lcd_put_cur(1, 0);
                            for (int i = 0; i < input_length; i++)
                                lcd_send_data('*'); // Có thể show '*'
                        }
                    }
                    else if (input_length < 10 && tempKey != '*' && tempKey != 'A' && tempKey != 'B' && tempKey != 'C')
                    {
                        input_password[input_length++] = tempKey;
                        lcd_send_data(tempKey); // Hiển thị dấu '*' thay vì ký tự thực
                    }
                }
                HAL_Delay(50);
            }
        }
    }

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0xffff-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA8
                           PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  currentMillis = HAL_GetTick();
  if (currentMillis - previousMillis > 10) {
    /*Configure GPIO pins : PB to GPIO_INPUT*/
    GPIO_InitStructPrivate.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
    {
      keyPressed = 68; //ASCII value of D
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
    {
      keyPressed = 67; //ASCII value of C
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
    {
      keyPressed = 66; //ASCII value of B
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
    {
      keyPressed = 65; //ASCII value of A
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
    {
      keyPressed = 35; //ASCII value of #
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
    {
      keyPressed = 57; //ASCII value of 9
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
    {
      keyPressed = 54; //ASCII value of 6
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
    {
      keyPressed = 51; //ASCII value of 3
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
    {
      keyPressed = 48; //ASCII value of 0
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
    {
      keyPressed = 56; //ASCII value of 8
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
    {
      keyPressed = 53; //ASCII value of 5
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
    {
      keyPressed = 50; //ASCII value of 2
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
    if(GPIO_Pin == GPIO_PIN_12 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
    {
      keyPressed = 42; //ASCII value of *
    }
    else if(GPIO_Pin == GPIO_PIN_13 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
    {
      keyPressed = 55; //ASCII value of 7
    }
    else if(GPIO_Pin == GPIO_PIN_14 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
    {
      keyPressed = 52; //ASCII value of 4
    }
    else if(GPIO_Pin == GPIO_PIN_15 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
    {
      keyPressed = 49; //ASCII value of 1
    }

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8,  1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,  1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
    /*Configure GPIO pins : PB back to EXTI*/

    GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructPrivate);
    previousMillis = currentMillis;
  }
}
bool Verify_Password(void)
{
  if (HAL_GetTick() - lockTimestamp < LOCK_DURATION_MS)
  {
    lcd_clear();
    lcd_send_string("Locked 60s...");
    HAL_Delay(1000);
    return false;
  }

  if (input_length != password_length)
    return false;

  for (int i = 0; i < password_length; i++)
    if (input_password[i] != current_password[i]) return false;

  failed_attempts = 0;
  return true;
}
void Change_Password(void)
{
  lcd_clear();
  lcd_send_string("New Password:");
  lcd_put_cur(1, 0);
  input_length = 0;
  memset(new_password, 0, sizeof(new_password));
  lastInteraction = HAL_GetTick();

  while (1)
  {
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;

    if (keyPressed != -1)
    {
      lastInteraction = HAL_GetTick();
      uint8_t tempkey = keyPressed;
      keyPressed = -1;

      if (tempkey == 35 && input_length == password_length) break;
      else if (tempkey == 68 && input_length > 0)
      {
        input_length--;
        new_password[input_length] = 0;
        lcd_put_cur(1, 0);
        lcd_send_string("                ");
        lcd_put_cur(1, 0);
        for (int i = 0; i < input_length; i++)
        lcd_send_data(new_password[i]);
      }
      else if (input_length < 10) {
        new_password[input_length++] = tempkey;
        lcd_send_data(tempkey);
      }
    }
    HAL_Delay(50);
  }
  lcd_clear();
  lcd_send_string("Confirm Pass:");
  lcd_put_cur(1, 0);
  memset(confirm_password, 0, sizeof(confirm_password));
  uint8_t confirm_length = 0;
  lastInteraction = HAL_GetTick();

  while (1)
  {
    if (HAL_GetTick() - lastInteraction > TIMEOUT_DURATION_MS) return;

    if (keyPressed != -1)
    {
      lastInteraction = HAL_GetTick();
      uint8_t tempkey = keyPressed;
      keyPressed = -1;

      if (tempkey == 35)
      {
        if (confirm_length == input_length && memcmp(new_password, confirm_password, input_length) == 0)
        {
          memcpy(current_password, new_password, input_length);
          password_length = input_length;
          Save_Password_To_Flash();
          lcd_clear();
          lcd_send_string("Password Changed");
          HAL_Delay(1000);
        }
        else
        {
          lcd_clear();
          lcd_send_string("Mismatch!");
          HAL_Delay(1000);
        }
        break;
      }
      else if (tempkey == 68 && confirm_length > 0)
      {
        confirm_length--;
        confirm_password[confirm_length] = 0;
        lcd_put_cur(1, 0);
        lcd_send_string("                ");
        lcd_put_cur(1, 0);
        for (int i = 0; i < confirm_length; i++)
        lcd_send_data(confirm_password[i]);
      }
      else if (confirm_length < 10)
      {
        confirm_password[confirm_length++] = tempkey;
        lcd_send_data(tempkey);
      }
    }
    HAL_Delay(50);
  }
}
void Save_Password_To_Flash(void)
{
  HAL_FLASH_Unlock();
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PAGEError = 0;

  EraseInitStruct.Banks = 1;
  EraseInitStruct.NbPages = 1;
  EraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) return;

  HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_USER_START_ADDR, password_length);
  for (int i = 0; i < password_length; i++)
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_USER_START_ADDR + 2 + i * 2, current_password[i]);

  HAL_FLASH_Lock();
}
void Load_Password_From_Flash(void)
{
  uint8_t len = *(__IO uint16_t*)FLASH_USER_START_ADDR;
  if (len > 0 && len < 20)
  {
    password_length = len;
    for (int i = 0; i < len; i++)
      current_password[i] = *(__IO uint16_t*)(FLASH_USER_START_ADDR + 2 + i * 2);
  }
  else
  {
    memcpy(current_password, default_password, 6);
    password_length = 6;
  }
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
